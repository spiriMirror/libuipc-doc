{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#libuipc","title":"libuipc","text":"<p>A Cross-Platform Modern C++20 Library of Unified Incremental Potential Contact.</p> <p>Both C++ and Python APIs are provided!</p> <p></p> <p>More Application</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Libuipc is a library that offers a unified GPU incremental potential contact framework for simulating the dynamics of rigid bodies, soft bodies, cloth, and threads, and their couplings. It ensures accurate, penetration-free frictional contact and is naturally differentiable. Libuipc aims to provide robust and efficient forward and backward simulations, making it easy for users to integrate with machine learning frameworks, inverse dynamics, robotics, and more.</p> <p>We are actively developing Libuipc and will continue to add more features and improve its performance. We welcome any feedback and contributions from the community!</p>"},{"location":"#why-libuipc","title":"Why Libuipc","text":"<ul> <li>Easy &amp; Powerful: Libuipc offers an intuitive and unified approach to creating and accessing vivid simulation scenes, supporting a variety of objects and constraints that can be easily added.</li> <li>Fast &amp; Robust: Libuipc is designed to run fully in parallel on the GPU, achieving high performance and enabling large-scale simulations. It features a robust and accurate frictional contact model that effectively handles complex frictional scenarios without penetration.</li> <li>High Flexibility: Libuipc provides APIs in both Python and C++ and supports both Linux and Windows systems.</li> <li>Fully Differentiable: Libuipc provides differentiable simulation APIs for backward optimizations. (Coming Soon)</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Finite Element-Based Deformable Simulation</li> <li>Rigid &amp; Soft Body Strong Coupling Simulation</li> <li>Penetration-Free &amp; Accurate Frictional Contact Handling</li> <li>User Scriptable Animation Control</li> <li>Fully Differentiable Simulation (Diff-Sim Coming Soon)</li> </ul>"},{"location":"#news","title":"News","text":"<p>2024-11-25: Libuipc v0.9.0 (Alpha) is published! We are excited to share our work with the community. This is a preview version, if you have any feedback or suggestions, please feel free to contact us! Issues and PRs are welcome! </p>"},{"location":"#citation","title":"Citation","text":"<p>If you use Libuipc in your project, please cite our works:</p> <pre><code>@misc{huang2024advancinggpuipcstiff,\n      title={Advancing GPU IPC for stiff affine-deformable simulation}, \n      author={Kemeng Huang and Xinyu Lu and Huancheng Lin and Taku Komura and Minchen Li},\n      year={2024},\n      eprint={2411.06224},\n      archivePrefix={arXiv},\n      primaryClass={cs.GR},\n      url={https://arxiv.org/abs/2411.06224}, \n}\n</code></pre> <pre><code>@article{gipc2024,\n      author = {Huang, Kemeng and Chitalu, Floyd M. and Lin, Huancheng and Komura, Taku},\n      title = {GIPC: Fast and Stable Gauss-Newton Optimization of IPC Barrier Energy},\n      year = {2024},\n      publisher = {Association for Computing Machinery},\n      volume = {43},\n      number = {2},\n      issn = {0730-0301},\n      doi = {10.1145/3643028},\n      journal = {ACM Trans. Graph.},\n      month = {mar},\n      articleno = {23},\n      numpages = {18}\n}\n</code></pre>"},{"location":"gallery/","title":"Gallery","text":""},{"location":"gallery/#gallery","title":"Gallery","text":""},{"location":"nav/","title":"Nav","text":"<ul> <li>Home</li> <li>Gallery</li> <li>Build &amp; Install<ul> <li>Windows</li> <li>Linux</li> </ul> </li> <li>Tutorial<ul> <li>Geometry</li> <li>Concepts</li> <li>Animation</li> </ul> </li> <li>Specification<ul> <li>Implicit Geometry UID</li> <li>Implicit Geometries</li> <li>Constitution UID</li> <li>Constitutions</li> </ul> </li> <li>API Documentation<ul> <li>Links</li> <li>Classes<ul> <li>Index</li> <li>Hierarchy</li> <li>Members</li> <li>Member Functions</li> <li>Member Variables</li> <li>Member Typedefs</li> <li>Member Enumerations</li> </ul> </li> <li>Namespaces<ul> <li>Index</li> <li>Member</li> <li>Member Functions</li> <li>Member Variables</li> <li>Member Typedefs</li> <li>Member Enumerations</li> </ul> </li> <li>Functions</li> <li>Variables</li> <li>Macros</li> <li>Files</li> </ul> </li> <li>Development<ul> <li>Backend</li> <li>Backend Cuda</li> </ul> </li> <li>Misc</li> </ul>"},{"location":"xmake/","title":"The xmake building system","text":""},{"location":"xmake/#the-xmake-building-system","title":"The xmake building system","text":"<p>UPDATE 2024-12-14</p> <ul> <li>currently maintained in <code>xmake</code> branch</li> <li>build <code>xmake</code></li> <li>contact @sailing-innocent for support</li> </ul>"},{"location":"xmake/#current-issues","title":"Current Issues","text":"<ul> <li>fmt support: https://github.com/spiriMirror/libuipc/issues/52</li> <li>different heading style between cmake and xmake: https://github.com/spiriMirror/libuipc/issues/51</li> </ul>"},{"location":"xmake/#basic-q-a","title":"Basic Q &amp; A","text":""},{"location":"xmake/#out-of-memory","title":"out of memory","text":"<ul> <li>xmake use a lot of process for parallel compilation in order to accelerate the compilation task. However, nvcc will consume a lot of memory, thus will eventually cause an OOM</li> <li>Solution:  set the multi-process manurally, e.g. <code>xmake -j8</code> to set 8 parallel compilation jobs</li> </ul>"},{"location":"build_install/","title":"Build &amp; Install","text":""},{"location":"build_install/#build-install","title":"Build &amp; Install","text":"<p>A Cross-Platform Modern C++20 Library of Unified Incremental Potential Contact.</p>"},{"location":"build_install/#specific-build-instructions","title":"Specific Build Instructions","text":"<ul> <li> <p>Libuipc:</p> <ul> <li>Windows</li> <li>Linux</li> <li>Linux-Docker</li> </ul> </li> <li> <p>Libuipc Documentation:</p> <ul> <li>Build Document</li> </ul> </li> </ul>"},{"location":"build_install/build_docs/","title":"Build Document","text":""},{"location":"build_install/build_docs/#build-document","title":"Build Document","text":"<p>Download and install doxygen.</p> <p>Install mkdocs and its plugins:</p> <pre><code>pip install mkdocs mkdocs-material mkdocs-literate-nav mkdoxy mkdocs-video\n</code></pre> <p>Turn on the local server: </p><pre><code>mkdocs serve\n</code></pre> <p>Open the browser and visit the localhost:8000</p>"},{"location":"build_install/linux-docker/","title":"Build on Linux Docker","text":""},{"location":"build_install/linux-docker/#build-on-linux-docker","title":"Build on Linux Docker","text":""},{"location":"build_install/linux-docker/#install-docker","title":"Install Docker","text":"<p>Install Docker following the instructions.</p> <p>https://docs.docker.com/engine/install/ubuntu/</p>"},{"location":"build_install/linux-docker/#clone-libuipc","title":"Clone Libuipc","text":"<p>Clone the repository with the following command:</p> <pre><code>git clone https://github.com/spiriMirror/libuipc.git\n</code></pre>"},{"location":"build_install/linux-docker/#install-image","title":"Install Image","text":"<pre><code>cd libuipc\ndocker build -t pub/libuipc:dev -f artifacts/docker/dev.dockerfile .\n</code></pre>"},{"location":"build_install/linux-docker/#run-image","title":"Run Image","text":"<pre><code>docker run -it --rm --gpus all pub/libuipc:dev\n</code></pre>"},{"location":"build_install/linux-docker/#check-installation","title":"Check Installation","text":"<p>You can run the <code>uipc_info.py</code> to check if the <code>Pyuipc</code> is installed correctly.</p> <pre><code>cd libuipc/python\npython uipc_info.py\n</code></pre> <p>More samples are at Pyuipc Samples.</p>"},{"location":"build_install/linux/","title":"Linux","text":""},{"location":"build_install/linux/#build-on-linux","title":"Build on Linux","text":""},{"location":"build_install/linux/#prerequisites","title":"Prerequisites","text":"<p>The following dependencies are required to build the project.</p> Name Version Usage Import CMake &gt;=3.26 build system system install Python &gt;=3.11 build system system install Cuda &gt;=12.4 GPU programming system install Vcpkg &gt;=2024.11.16 package manager git clone"},{"location":"build_install/linux/#install-vcpkg","title":"Install Vcpkg","text":"<p>If you haven't installed Vcpkg, you can clone the repository with the following command:</p> <pre><code>mkdir ~/Toolchain\ncd ~/Toolchain\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n</code></pre> <p>The simplest way to let CMake detect Vcpkg is to set the System Environment Variable <code>CMAKE_TOOLCHAIN_FILE</code> to <code>~/Toolchain/scripts/buildsystems/vcpkg.cmake</code></p> <pre><code># Write in ~/.bashrc\nexport CMAKE_TOOLCHAIN_FILE=\"$HOME/Toolchain/scripts/buildsystems/vcpkg.cmake\"\n</code></pre>"},{"location":"build_install/linux/#clone-libuipc","title":"Clone Libuipc","text":"<p>Clone the repository with the following command:</p> <pre><code>git clone https://github.com/spiriMirror/libuipc.git\n</code></pre>"},{"location":"build_install/linux/#conda-environment","title":"Conda Environment","text":"<p>We recommend using conda environments to build the project on Linux.</p> <pre><code>conda env create -f conda/env.yaml\n</code></pre> <p>Cuda-12.4.0 requires driver version &gt;= 550.54.14 (https://docs.nvidia.com/deploy/cuda-compatibility/index.html#use-the-right-compat-package), check your nvidia driver version with the following command.</p> <pre><code>nvidia-smi\n</code></pre>"},{"location":"build_install/linux/#other-environment","title":"Other Environment","text":"<p>If you don't want to use conda, you can manually install <code>CMake 3.26</code>, <code>GCC 11.4</code>, <code>Cuda 12.4</code> and <code>Python &gt;=3.11</code> with your favorite package manager.</p>"},{"location":"build_install/linux/#build-libuipc","title":"Build Libuipc","text":"<p>Build the project with the following commands.</p> <pre><code>cd libuipc; cd ..; mkdir CMakeBuild; cd CMakeBuild\ncmake -S ../libuipc -DUIPC_BUILD_PYBIND=1 -DCMAKE_BUILD_TYPE=&lt;Release/RelWithDebInfo&gt; \ncmake --build . -j8\n</code></pre> <p>Note</p> <p>Use multi-thread to speed up the build process as possible, becasue the NVCC compiler will take a lot of time.</p>"},{"location":"build_install/linux/#run-project","title":"Run Project","text":"<p>The excutable files are in the <code>CMakeBuild/&lt;Release/RelWithDebInfo&gt;/bin</code> folder. </p> <pre><code>cd CMakeBuild/&lt;Release/RelWithDebInfo&gt;/bin\n./hello_uipc\n./uipc_sim_case\n[...]\n</code></pre>"},{"location":"build_install/linux/#install-pyuipc","title":"Install Pyuipc","text":"<p>With <code>UIPC_BUILD_PYBIND</code> option set to <code>ON</code>, the Python binding will be built and installed in the specified Python environment.</p> <p>If some errors occur during the installation, you can try to manually install the Python binding.</p> <pre><code>cd CMakeBuild/python\npip install .\n</code></pre>"},{"location":"build_install/linux/#check-installation","title":"Check Installation","text":"<p>You can run the <code>uipc_info.py</code> to check if the <code>Pyuipc</code> is installed correctly.</p> <pre><code>cd libuipc/python\npython uipc_info.py\n</code></pre> <p>More samples are at Pyuipc Samples.</p>"},{"location":"build_install/windows/","title":"Windows","text":""},{"location":"build_install/windows/#build-on-windows","title":"Build on Windows","text":""},{"location":"build_install/windows/#prerequisites","title":"Prerequisites","text":"<p>The following dependencies are required to build the project.</p> Name Version Usage Import CMake &gt;=3.26 build system system install Python &gt;=3.11 build system system install Cuda &gt;=12.4 GPU programming system install Vcpkg &gt;=2024.11.16 package manager git clone"},{"location":"build_install/windows/#install-vcpkg","title":"Install Vcpkg","text":"<p>If you haven't installed Vcpkg, you can clone the repository with the following command:</p> <pre><code>mkdir ~/Toolchain\ncd ~/Toolchain\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.bat\n</code></pre> <p>The simplest way to let CMake detect Vcpkg is to set the System Environment Variable <code>CMAKE_TOOLCHAIN_FILE</code> to <code>~/Toolchain/vcpkg/scripts/buildsystems/vcpkg.cmake</code></p> <p>You can set the environment variable in the PowerShell:</p> <pre><code># In PowerShell: Permanently set the environment variable\n[System.Environment]::SetEnvironmentVariable(\"CMAKE_TOOLCHAIN_FILE\", \"~/Toolchain/vcpkg/scripts/buildsystems/vcpkg.cmake\", \"User\")\n</code></pre>"},{"location":"build_install/windows/#build-libuipc","title":"Build Libuipc","text":"<p>Clone the repository with the following command:</p> <pre><code>git clone https://github.com/spiriMirror/libuipc.git\n</code></pre>"},{"location":"build_install/windows/#cmake-gui","title":"CMake-GUI","text":"<p>On Windows, you can use the <code>CMake-GUI</code> to configure the project and generate the Visual Studio solution file with only a few clicks.</p> <ul> <li>Toggling the <code>UIPC_BUILD_PYBIND</code> option to <code>ON</code> to enable the Python binding.</li> </ul>"},{"location":"build_install/windows/#cmake-cli","title":"CMake-CLI","text":"<p>Or, you can use the following commands to build the project.</p> <pre><code>cd libuipc; cd ..; mkdir CMakeBuild; cd CMakeBuild\ncmake -S ../libuipc -DUIPC_BUILD_PYBIND=1 \ncmake --build . --config &lt;Release/RelWithDebInfo&gt; -j8\n</code></pre> <p>Note</p> <p>Use multi-thread to speed up the build process as possible, becasue the NVCC compiler will take a lot of time.</p>"},{"location":"build_install/windows/#run-project","title":"Run Project","text":"<p>Just run the executable files in <code>CMakeBuild/&lt;Release/RelWithDebInfo&gt;/bin</code> folder.</p>"},{"location":"build_install/windows/#install-pyuipc","title":"Install Pyuipc","text":"<p>With <code>UIPC_BUILD_PYBIND</code> option set to <code>ON</code>, the Python binding will be built and installed in the specified Python environment.</p> <p>If some errors occur during the installation, you can try to manually install the Python binding.</p> <pre><code>cd CMakeBuild/python\npip install .\n</code></pre>"},{"location":"build_install/windows/#conda-environment-optional","title":"Conda Environment (Optional)","text":"<p>If you want to install the Python binding in a Conda environment, you should additionally specify the Python executable path of the Conda environment.</p> <p>First, create a Conda environment with Python &gt;=3.11 </p><pre><code>conda create -n uipc_env python=3.11\n</code></pre> <p>Note</p> <p>Don't activate the Conda environment when compiling Libuipc. On Windows it's hard to compile with MSVC/NVCC in conda environment, so we build the C++ part in the system environment and install the Python binding in the conda environment.</p> <p></p><pre><code>cmake -S ../libuipc -DUIPC_BUILD_PYBIND=1 -DUIPC_PYTHON_EXECUTABLE_PATH=&lt;PYTHON_EXE_IN_CONDA_ENV&gt;\ncmake --build . --config &lt;Release/RelWithDebInfo&gt; -j8\n</code></pre> For example, the <code>&lt;PYTHON_EXE_IN_CONDA_ENV&gt;</code> may be  <code>C:\\Users\\&lt;UserName&gt;\\anaconda3\\envs\\uipc_env\\python.exe</code>"},{"location":"build_install/windows/#check-installation","title":"Check Installation","text":"<p>You can run the <code>uipc_info.py</code> to check if the <code>Pyuipc</code> is installed correctly.</p> <pre><code>cd libuipc/python\npython uipc_info.py\n</code></pre> <p>More samples are at Pyuipc Samples.</p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#development","title":"Development","text":"<p>This document describes the design and implementation of the <code>libuipc</code>, providing a reference for developers who wish to contribute to the project. Here, we will mainly focus on the backend implementation of the framework.</p>"},{"location":"development/#data-oriented-programming","title":"Data Oriented Programming","text":"<p>The Partial Differential Equation (PDE) of the simulation problem is already an abstract representation of the real world. We don't need to make any conceptual abstraction using Object Oriented Programming (OOP) to represent the objects. Instead, we keep Data Oriented Programming (DOP) in mind to represent the data in a way that is cache-friendly and efficient. In some way, we organize the UIPC framework in a modified Entity Component System (ECS) pattern, which is called the Reporter-Manager-Receiver (RMR) model.</p>"},{"location":"development/#reporter-manager-receiver-model","title":"Reporter-Manager-Receiver Model","text":"<p>The model is a conceptual design pattern that organizes the data flow between different components of the framework in a safe, cache-friendly and flexible way.</p> <p></p>"},{"location":"development/backend/","title":"Backend","text":""},{"location":"development/backend/#backend","title":"Backend","text":"<p><code>Libuipc</code> has frontend and backend components. The frontend part is used to create the scene, objects, and geometries, and the backend part is used to simulate the physics of the scene.</p> <p>A <code>libuipc</code> backend is a independent module that will be dynamically loaded and linked by the frontend. Typically througth the <code>engine::Engine</code> class. The frontend user utilizes the backend functionalities through <code>World</code> interface.</p> <pre><code>engine::Engine engine{\"BACKEND_NAME\"};\nworld::World world{engine};\n</code></pre>"},{"location":"development/backend/#create-your-own-backend","title":"Create Your Own Backend","text":"<p>Say, you want to create a backend named <code>my_backend</code>. You need to create a new folder <code>my_backend/</code> in the <code>src/uipc/backends/</code> directory.</p> <p>And then, you need to append a line of <code>add_subdirectory(my_backend)</code> in the <code>src/uipc/backends/CMakeLists.txt</code> file to include the new backend in the build system.</p> <p>In the <code>my_backend/</code> folder, you need to create a <code>CMakeLists.txt</code> file to define the build rules for the backend.</p> <pre><code># my_backend/CMakeLists.txt\nuipc_add_backend(my_backend)\nfile(GLOB SOURCES \"*.cpp\" \"*.h\" \"details/*.inl\")\ntarget_sources(my_backend PRIVATE ${SOURCES})\n</code></pre> <p>The backend <code>none</code> is a good example for creating a new backend.</p> <p>The entry point of the backend is the engine creation and destruction functions. You need to implement somewhere in the backend source code.</p> <pre><code>#include &lt;uipc/backends/common/module.h&gt;\n\nUIPC_BACKEND_API\nUIPCEngineInterface* uipc_create_engine()\n{\n    // new your engine instance and return it\n}\n\nUIPC_BACKEND_API\nvoid uipc_destroy_engine(UIPCEngineInterface* engine)\n{\n    // delete your engine instance\n}\n</code></pre>"},{"location":"development/backend/#official-backends","title":"Official Backends","text":"<p><code>Libuipc</code> provides several official backends:</p> Name Description none A dummy backend that does nothing, as a template for creating a new backend. cuda A backend that utilizes the GPU to compute the physics. ..."},{"location":"development/backend/#common-utilities","title":"Common Utilities","text":"<p>Some common utilities are shared among different backends. They are in the <code>src/uipc/backends/common/</code> directory. They are automatically included in the build system when you call <code>uipc_add_backend</code> in the <code>CMakeLists.txt</code> file.</p> <p>It's recommended to use these utilities to make your backend engine more robust and maintainable.</p>"},{"location":"development/backend/#simengine","title":"SimEngine","text":"<p>The <code>uipc::backend::SimEngine</code> class is the top-level class of the backend, this base class will help you to manage the backend simulation systems. You can derive your own engine class from it.</p> <p>Call <code>build_systems()</code> will help you to build all the systems and their dependencies. Call <code>dump_system_infos()</code> will help you to dump the system information to the workspace of this backend.</p> <pre><code>// my_backend/my_sim_engine.h\n#include &lt;uipc/backends/common/sim_engine.h&gt;\nnamespace uipc::backend::my_backend\n{\nclass UIPC_BACKEND_API MySimEngine : public SimEngine\n{\n  protected:\n    void do_init(backend::WorldVisitor v) override;\n    void do_advance() override;\n    void do_sync() override;\n    void do_retrieve() override;\n    ...\n};\n}\n\n// my_backend/my_sim_engine.cpp\nnamespace uipc::backend::my_backend\n{\nvoid MySimEngine::do_init(backend::WorldVisitor v)\n{\n    build_systems();\n    dump_system_infos();\n}\n}\n</code></pre>"},{"location":"development/backend/#simsystem","title":"SimSystem","text":"<p>The <code>uipc::backend::SimSystem</code> class is the base class of the backend simulation system. You can derive your own system class from it.</p> <pre><code>// my_backend/my_sim_system.h\n#include &lt;uipc/backends/common/sim_system.h&gt;\nnamespace uipc::backend::my_backend\n{\n    class MySimSystem : public backend::SimSystem\n    {\n      public:\n        using SimSystem::SimSystem;\n      protected:\n        void do_build() override;\n        // a safe way to keep the reference of other system\n        SimSystemSlot&lt;OtherSimSystem&gt; other_system;\n        // a safe way to keep the reference of a collection of other systems\n        SimSystemSlotCollection&lt;AnotherSimSystem&gt; another_systems;\n    };\n}\n\n// my_backend/my_sim_system.cpp\nnamespace uipc::backend::my_backend\n{\n    REGISTER_SIM_SYSTEM(MySimSystem);\n}\n</code></pre> <p>Call <code>REGISTER_SIM_SYSTEM(MySimSystem)</code> in source file to register your system to the backend engine automatically.</p>"},{"location":"development/backend/#dependency","title":"Dependency","text":"<p>To build up the dependency between systems, you call the <code>require&lt;T&gt;</code> and <code>find&lt;T&gt;</code> in the <code>do_build</code> function of the system.</p> <pre><code>// my_backend/my_sim_system.cpp\nnamespace uipc::backend::my_backend\n{\nvoid MySimSystem::do_build()\n{\n    // require other systems\n    auto&amp; other_system_ref = require&lt;OtherSimSystem&gt;();\n    other_system.register_system(&amp;other_system_ref);\n\n    // find other systems\n    auto* another_system_ptr = find&lt;AnotherSimSystem&gt;();\n    another_systems.register_system(another_system_ptr);\n\n    if(...) // if some bad condition happened\n        throw SimSystemException(\"This system is invalid\");\n}\n}\n</code></pre> <p><code>require&lt;T&gt;</code> will throw an exception if the system is not found, and <code>find&lt;T&gt;</code> will return a nullptr if the system is not found. If any dependency is not satisfied, the dependent system will throw an exception to invalidate itself.</p> <p>You can also manually throw a <code>SimSystemException</code> to invalidate the system.</p> <p>The backend common utilities will clean up the invalid systems and keep the valid systems in the backend engine. If such exception is upraised to the level of the backend engine, the engine will close itself and throw the exception to the frontend.</p> <p>It's recommended to use the <code>reuiqre&lt;T&gt;</code> for those systems that are necessary for the current system to work properly, and use the <code>find&lt;T&gt;</code> for those systems that are optional.</p> <p>To keep the reference of the other systems, you should use the <code>SimSystemSlot</code> and <code>SimSystemSlotCollection</code>. They will help you to manage the lifetime of the other systems properly. </p> <p>Some wierd situation may happen: the other system is valid when you require it, but it's invalid when you use it. The <code>SimSystemSlot</code> and <code>SimSystemSlotCollection</code> will help you to avoid such situation.</p> <p>Or you should manually check the validity of the other systems before you use them.</p>"},{"location":"development/backend/#lifecycle-functions","title":"Lifecycle Functions","text":"<p>Lifecyle of a simulator is the most complex part of the backend, varying among different simulation methods. So the common utilities won't provide a default implementation for the lifecycle functions.</p> <p>It's up to you to design the pipeline. I.e. how every <code>SimSystem</code> is updated in each phase of the simulation.</p> <p>It's your responsibility to call the lifecycle functions in the engine's <code>do_init</code>, <code>do_advance</code>, <code>do_sync</code>, and <code>do_retrieve</code> functions.</p> <p>But the common utilities still provide some basic tools.</p>"},{"location":"development/backend/#simaction","title":"SimAction","text":"<pre><code>#include &lt;uipc/backends/common/sim_system.h&gt;\n#include &lt;uipc/backends/common/sim_action_collection.h&gt;\n\nnamespace uipc::backend::my_backend\n{\nclass MyActionDispatcher : public SimSystem\n{\n    public:\n    using SimSystem::SimSystem;\n    void do_build() override{}\n    void add_action(SimAction&lt;void()&gt;&amp;&amp; action);\n\n\n    private:\n    friend class MySimEngine;\n    void dispatch_actions();\n    SimActionCollection&lt;void()&gt; m_actions;\n};\n}\n\n// my_backend/my_action_dispatcher.cpp\nnamespace uipc::backend::my_backend\n{\nREGISTER_SIM_SYSTEM(MyActionDispatcher);\n\nvoid MyActionDispatcher::add_action(SimAction&lt;void()&gt;&amp;&amp; action)\n{\n    m_actions.add_action(std::move(action));\n}\n\nvoid MyActionDispatcher::dispatch_actions()\n{\n    for(auto&amp; action : m_actions.view())\n    {\n        action();\n    }\n}\n}\n</code></pre> <pre><code>// my_backend/my_sim_engine.h\n#include &lt;uipc/backends/common/sim_engine.h&gt;\nnamespace uipc::backend::my_backend\n{\n// forward declaration\nclass MyActionDispatcher;\n\nclass UIPC_BACKEND_API MySimEngine : public SimEngine\n{\n  protected:\n    void do_init(backend::WorldVisitor v) override;\n    void do_advance() override;\n    void do_sync() override;\n    void do_retrieve() override;\n   private:\n    SimSystemSlot&lt;MyActionDispatcher&gt; m_action_dispatcher;\n};\n}\n\n// my_backend/my_sim_engine.cpp\nnamespace uipc::backend::my_backend\n{\nvoid MySimEngine::do_init(backend::WorldVisitor v)\n{\n    build_systems();\n\n    m_action_dispatcher = &amp;require&lt;MyActionDispatcher&gt;();\n\n    dump_system_infos();\n}\n\nvoid MySimEngine::do_advance()\n{\n    auto action_view = m_action_dispatcher-&gt;view();\n    for (auto&amp; action : action_view)\n    {\n        action();\n    }\n}\n}\n</code></pre> <p>With the implementation above, other sim systems can add actions to the <code>MyActionDispatcher</code> in the <code>do_build</code> function. </p> <p>And because we can require the <code>MyActionDispatcher</code> in the <code>MySimEngine</code> and keep the reference of it, we can dispatch the actions in any where of the engine.</p> <p>E.g. The Dispatcher can be a time to integrate some systems, or a time to solve the linear system, or a time to update the geometry.</p>"},{"location":"development/backend/#subsystem","title":"Subsystem","text":"<p>Sometimes, it's a good idea to have a global system and several subsystems, all subsystem register itself to the global system, and the global system dispatch the lifecycle functions of the subsystems.</p> <p>The common utilities don't provide a default implementation for you. But it's easy to implement it by yourself. Using the same idea of the <code>SimAction</code> and <code>SimActionCollection</code>.</p> <p>Just replace the <code>SimAction</code> with <code>SimSystem</code>, <code>SimActionCollection</code> with <code>SimSystemSlotCollection</code>. And ask the subsystems to register themselves to the global system when <code>do_build</code>.</p> <pre><code>// my_backend/my_global_system.h\n\nnamespace uipc::backend::my_backend\n{\nclass MyGlobalSystem : public SimSystem\n{\n    public:\n    using SimSystem::SimSystem;\n    void do_build() override{}\n    void add_subsystem(SimSystem* subsystem);\n    void dispatch_subsystems();\n\n    private:\n    friend class MySimEngine;\n    SimSystemSlotCollection&lt;SimSystem&gt; m_subsystems;\n};\n}\n\n// my_backend/my_global_system.cpp\nnamespace uipc::backend::my_backend\n{\nREGISTER_SIM_SYSTEM(MyGlobalSystem);\n\nvoid MyGlobalSystem::add_subsystem(SimSystem* subsystem)\n{\n    m_subsystems.register_system(subsystem);\n}\n\nvoid MyGlobalSystem::dispatch_subsystems()\n{\n    for(auto&amp; subsystem : m_subsystems.view())\n    {\n        subsystem-&gt;advance();\n    }\n}\n}\n</code></pre> <p>Of course, you should let the engine require the global system and dispatch the subsystems in the lifecycle functions.</p> <p>Such global-subsystem pattern can be recursively used. A subsystem can also have its own subsystems.</p>"},{"location":"development/backend_cuda/","title":"Backend Cuda","text":""},{"location":"development/backend_cuda/#backend-cuda","title":"Backend Cuda","text":"<p>This document describes the implementation of the CUDA backend for the <code>libuipc</code>. It won't repeat the basic concepts of the <code>backend</code>. Before reading this document, it's highly recommended to read the backend document first.</p> <p>In this document, we assume that the reader has a basic understanding of the CUDA programming model, and won't describe the basic concepts of CUDA. You can refer to the CUDA Programming Guide for more information. We also require the reader to have a basic understanding of parallel computing and programming, especially the parallel primitives.</p>"},{"location":"development/backend_cuda/#from-local-to-global","title":"From Local to Global","text":"<p>The cuda backend is almost relying on the prefix sum to handle the data aggregation from the local level to the global level.</p> <p>In the <code>libuipc</code>, we have a lot of local data that needs to be aggregated to the global level. </p> <p>For example, <code>GlobalVertexManager</code> is responsible for managing all the vertices that reported by some <code>SimSystem</code>. Every related <code>SimSystem</code> reports its local vertices to the <code>GlobalVertexManager</code>, and the <code>GlobalVertexManager</code> needs to aggregate all the local vertices to the global level and return global offsets to the subsystems.</p> <p>Say, \\(N_i\\) is the number of the i-th subsystem's local vertices, then the global offset of the i-th subsystem is \\(S_i=\\sum_{j=0}^{i-1} N_j\\).</p> <p>We can apply prefix sum to calculate all the \\(S_i\\) we need.</p> <p>The aggregation provides a way to allocate the memory only once, which can reduce the memory fragmentation and improve the memory access efficiency, because all the vertices are stored in a continuous memory block.</p> <p>Almost all the data aggregation in the cuda backend is implemented using the prefix sum. Keep it in mind will help you understand the code better.</p> <p>The system level prefix sum is calculated on the CPU side, because the system level prefix sum is not very large, it's much faster to calculate it on the CPU side, typically, the <code>std::exclusive_scan</code> function in the C++ standard library.</p>"},{"location":"development/backend_cuda/#from-global-to-local","title":"From Global to Local","text":"<p>In last section, we talked about how to aggregate the local data to the global level. In this section, we will talk about how to distribute the global data to the local level.</p>"},{"location":"development/backend_cuda/#partition","title":"Partition","text":"<p>When some global data needs to be distributed to the local level, we need to partition the global data into several parts, and each part is assigned to a subsystem.</p> <p>For example, the <code>GlobalContactManager</code> collects all the contacts from certain <code>SimSystem</code>s, and then distributes the contacts to other <code>SimSystem</code>s. Before distributing, we need to partition the contact pairs into several parts, because one <code>SimSystem</code> can only process one kind of contact. A vivid exmpale is that the Affine Body-Affine-Body contact can only be processed by the Affine Body subsystem, the Affine Body-FEM contact can only be processed by the ABD-FEM coupling subsystem, the FEM-FEM contact can only be processed by the FEM subsystem. </p> <p>This kind of partition is mostly processed on the GPU side, using the parallel partition algorithm.</p>"},{"location":"development/backend_cuda/#run-length-encoding","title":"Run Length Encoding","text":"<p>If some data is able to be sorted and can be exclusively partitioned, we can also use the run length encoding to distribute the data.</p>"},{"location":"development/backend_cuda/#separation-of-ownership-and-access","title":"Separation of Ownership and Access","text":"<p>In the global-local pattern, we always separate the ownership and access of the data. The ownership of the data is always kept by the global manager, the local subsystems only have the access to a subview of the data.</p> <p>For example, we use <code>DeviceBuffer&lt;T&gt;</code> for the global data, and pass the <code>BufferView&lt;T&gt;</code> to the local subsystems. The <code>BufferView&lt;T&gt;</code> is a subview of the <code>DeviceBuffer&lt;T&gt;</code>, containing the offset and the size of the subview.</p> <p>Such design can improve the memory access efficiency and the safety of the data access. With the safety check from <code>muda</code>, an out-of-bound access will be detected and reported.</p> <p>This separation is applied to all the data in the cuda backend, always keep it in mind when you are reading or writing the code.</p>"},{"location":"development/backend_cuda/#use-assertion","title":"Use Assertion","text":"<p>In GPU programming, it's hard to debug the code, because all the code is running parallelly, and the order of the execution is not guaranteed. </p> <p>So always use the assertion to check the correctness of the code when possible. Typically, we use the <code>MUDA_KERNEL_ASSERT</code> to check the correctness of the code. E.g.</p> <pre><code>MUDA_KERNEL_ASSERT(x &gt; 0.0, \"x should be positive, but x=%f\", x);\n</code></pre> <p>The <code>MUDA_KERNEL_ASSERT</code> will check the condition in the kernel, and if the condition is not satisfied, it will print the error message the thread id and the block id, and then terminate the kernel.</p>"},{"location":"development/backend_cuda/#debug-print","title":"Debug Print","text":"<p>I provide a simple <code>cout</code> implementation for the cuda backend, which can be used to print the debug information in the kernel.</p> <pre><code>#include &lt;kernel_cout.h&gt;\n\n// in your kernel or device function\ncout &lt;&lt; Vector3{1.0, 2.0, 3.0} &lt;&lt; \"\\n\";\n</code></pre> <p>which is a feature provided by the <code>muda</code> library, you can refer to the muda for the detailed usage.</p> <p>The only problem is that, when a kernel is terminated by assertion, the <code>cout</code> message will not be kept. So always use the assertion to check the correctness of the code and use the <code>cout</code> to debug your calculation.</p>"},{"location":"development/backend_cuda/#symbol-calculation","title":"Symbol Calculation","text":"<p>I provide an extension of <code>sympy</code> called <code>SymEigen</code> in <code>scripts/</code>, which can be used to calculate the symbolic expression and codegen it to C++ Eigen code. See the <code>scripts/</code> for more information. This can release you from the formula typing and reduce the error in the formula.</p>"},{"location":"misc/3rd_libs/","title":"fmt","text":""},{"location":"misc/3rd_libs/#fmt","title":"fmt","text":"<ul> <li>Format User Type</li> </ul>"},{"location":"specification/","title":"Libuipc Specification","text":""},{"location":"specification/#libuipc-specification","title":"Libuipc Specification","text":"<p>This document, referred to as the \"Libuipc Specification\" defines the behavior of the library.</p> <ul> <li>Libuipc Specification<ul> <li>Coordinates</li> </ul> </li> </ul>"},{"location":"specification/#coordinates","title":"Coordinates","text":"<p>The <code>libuipc</code> uses 3D coordinates to represent points in space. The coordinates are represented as a tuple of three real numbers <code>(x, y, z)</code> with units in meters. The convention used is the right-handed coordinate system, with the x-axis pointing to the right, the y-axis pointing up, and the z-axis pointing backwards.</p> <p>[TODO] Add an image to illustrate the coordinate system.</p>"},{"location":"specification/constitution_uid/","title":"Constitution UID","text":""},{"location":"specification/constitution_uid/#constitution-uid","title":"Constitution UID","text":"<p>The Constitution UID is a unique identifier for a constitution known by <code>libuipc</code>, which is a 64-bit unsigned integer. </p> <p>The official constitution UID has a range of \\([0, 2^{32}-1]\\). The range \\([2^{32}, 2^{64}-1]\\) is reserved for user-defined constitutions.</p> <p>Every official constitution will be documented in this specification. A user-defined constitution can apply for an official constitution UID by submitting a pull request to the <code>libuipc</code> repository, After code review, the constitution will be added to the official constitution list.</p> <p>The related documentation of the constitution will be added to the Constutitions/ directory.</p> <p>When applying a constitution to a geometry, the <code>constitution_uid</code> attribute of the <code>meta</code> attribute of the geometry will be set to the constitution UID. The backend will use this UID to determine the constitution of the geometry.</p>"},{"location":"specification/implicit_geometry_uid/","title":"Implicit Geometry UID","text":""},{"location":"specification/implicit_geometry_uid/#implicit-geometry-uid","title":"Implicit Geometry UID","text":"<p>The Implicit Geometry UID is a unique identifier for an implicit geometry known by <code>libuipc</code>, which is a 64-bit unsigned integer.</p> <p>The official implicit geometry UID has a range of \\([0, 2^{32}-1]\\). The range \\([2^{32}, 2^{64}-1]\\) is reserved for user-defined implicit geometries.</p> <p>Every official implicit geometry will be documented in this specification. A user-defined implicit geometry can apply for an official implicit geometry UID by submitting a pull request to the <code>libuipc</code> repository, After code review, the implicit geometry will be added to the official implicit geometry list.</p> <p>The related documentation of the implicit geometry will be added to the Implicit Geometries/ directory.</p> <p>When creating a implicit geometry, the <code>implicit_geometry_uid</code> attribute of the <code>meta</code> attribute of the geometry will be set to the implicit geometry UID. The backend will use this UID to determine the implicit geometry of the geometry, and try to find the related coefficients from the attributes of the geometry (in <code>meta</code> or <code>instances</code>).</p>"},{"location":"specification/constitutions/","title":"Constitutions","text":""},{"location":"specification/constitutions/#constitutions","title":"Constitutions","text":"UID Friendly Name Description 0 Empty Preserved 1-8 AffineBody Affine Body Preserved Constitutions 9 ARAP As-Rigid-As-Possible Constitutions 10 StableNeoHookean Stable Neo-Hookean Constitutions 11 NeoHookeanShell Neo-Hookean Shell Constitutions 12 HookeanSpring Hookean Spring Constitutions 13 Particle Particle Constitutions"},{"location":"specification/constitutions/affine_body/","title":"Affine Body","text":""},{"location":"specification/constitutions/affine_body/#affine-body","title":"Affine Body","text":"<p>This page registers the Affine Body constitution.</p>"},{"location":"specification/constitutions/arap/","title":"ARAP","text":""},{"location":"specification/constitutions/hookean_spring/","title":"Hookean Spring","text":""},{"location":"specification/constitutions/neo_hookean_shell/","title":"Neo Hookean Shell","text":""},{"location":"specification/constitutions/particle/","title":"Particle","text":""},{"location":"specification/constitutions/stable_neo_hookean/","title":"Stable Neo Hookean","text":""},{"location":"specification/implicit_geometries/","title":"Implicit Geometry","text":""},{"location":"specification/implicit_geometries/#implicit-geometry","title":"Implicit Geometry","text":"UID Friendly Name Description 0 Empty Preserved 1 HalfPlane Half Plane"},{"location":"specification/implicit_geometries/half_plane/","title":"Half Plane","text":""},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#tutorial","title":"Tutorial","text":"<p>Hey there! Welcome to the tutorial section of the Libuipc documentation. This section is designed to help you get started with Libuipc and understand the basics of the library. If you are new to Libuipc, this is the best place to start.</p> <p>Most of the codes can be found in libuipc-samples.</p>"},{"location":"tutorial/#hello-libuipc","title":"Hello Libuipc","text":"<p>This is a simple example to get you started with <code>libuipc</code>. In this example, we will create a simple simulation using Libuipc.</p> C++Python <p>First, we include the <code>uipc.h</code> header file, which includes most the necessary headers for the <code>libuipc</code> library. Then, we use the namespace to make the code more readable:</p> <pre><code>#include &lt;uipc/uipc.h&gt;\n\nint main()\n{\n    using namespace uipc;\n    using namespace uipc::core;\n    using namespace uipc::geometry;\n    using namespace uipc::constitution;\n\n    ...\n}\n</code></pre> <p>First, we import pyuipc, and alias some of the modules to make the code more readable:</p> <pre><code>import uipc\nfrom uipc import Vector3\nfrom uipc import Engine, World, Scene, SceneIO\nfrom uipc.geometry import *\nfrom uipc import builtin\nfrom uipc.unit import GPa, MPa\n\nimport numpy as np\n</code></pre> <p>Then we create an instance of the <code>Engine</code> class, which is the main class of the <code>libuipc</code> simulation engine. We pass the <code>\"cuda\"</code> string to the constructor to specify the backend engine to use. </p> <p><code>Engine</code> is the heart of the simulation, which drives the <code>World</code> evolution. </p> <p><code>Scene</code> is a snapshot of the simulation at a certain time, and contains all information we needed to drive the simulation.</p> C++Python <pre><code>#include &lt;uipc/uipc.h&gt;\n\nint main()\n{\n    ...\n    Engine engine{\"cuda\"};\n    World  world{engine};\n    auto config = Scene::default_config();\n    config[\"dt\"] = 0.01_s;\n    config[\"gravity\"] = Vector3{0, -9.8, 0};\n    Scene scene{config};\n}\n</code></pre> <pre><code>engine = Engine('cuda')\nworld = World(engine)\nconfig = Scene.default_config()\nconfig['dt'] = 0.01\nconfig['gravity'] = [[0.0], [-9.8], [0.0]]\nscene = Scene(config)\n</code></pre> <p>Here, we configure the <code>Scene</code> with a time step of \\(0.01s\\) and a gravity of \\(9.8 m/s^2\\) in the negative y-direction.</p> <p>To evolve the simulation, we need setup the initial state of the simulation, i.e., the initial <code>Scene</code>.</p> <p>In this example, we want to simulate a free-falling rigid tetrahedron bumping into another fixed rigid tetrahedron. So,</p> <ol> <li>We need to apply a <code>AffineBodyConstitution</code> to the tetrahedra, to make them behave like rigid body.</li> <li>We need to specify what kind of contact coefficient to use when the two tetrahedra collide.</li> </ol> <p>Constitution is a set of rules that govern the behavior of the objects in the simulation. In this case, we use <code>AffineBodyConstitution</code> to make the tetrahedra behave like a rigid body. Don't worry about the details of so-called Constitution, we will cover it in the later sections.</p> <p>Contact model is a set of rules that govern the interaction between two objects when they collide.</p> <p>Before that, we should first add the <code>AffineBodyConstitution</code> to the <code>Scene</code>, and configure the contact model. <code>Libuipc</code> supports flexible configuration of the contact model, any pair of colliding objects can have their own contact model. For simplicity, in this example, we will use the default contact model for all the objects:</p> C++Python <pre><code>#include &lt;uipc/uipc.h&gt;\n#include &lt;uipc/constitutions/affine_body.h&gt;\n\nint main()\n{\n    ...\n    Scene scene{config};\n    {\n        // create constitution and contact model\n        AffineBodyConstitution abd;\n        scene.contact_tabular().default_model(0.5, 1.0_GPa);\n        auto&amp; default_element = scene.contact_tabular().default_element();\n        ...\n    }\n}\n</code></pre> <pre><code>from uipc.constitution import AffineBodyConstitution\n...\nscene = Scene(config)\n# create constitution and contact model\nabd = AffineBodyConstitution()\nscene.contact_tabular().default_model(0.5, 1.0 * GPa)\ndefault_element = scene.contact_tabular().default_element()\n...\n</code></pre> <p>As you can see, we set the defualt contact model to have a friction ratio of \\(0.5\\) and a contact resistance of \\(1.0GPa\\), which is common in the real world. And after specifying the contact model, we create a <code>default_element</code> in order to apply the default contact model to the mesh in the later steps.</p> <p>It's time to create the mesh! </p> <p>In this example, we will just manually create a regular tetrahedron (<code>base_mesh</code>), and apply a <code>AffineBodyConstitution</code> with a stiffness(hardness) of \\(100MPa\\) to the <code>base_mesh</code>, which may be a hard-rubber-like material in the real world. Then we apply the default contact model to the <code>base_mesh</code>:</p> C++Python <pre><code>int main()\n{\n    ...\n    Scene scene{config};\n    {\n        ...\n        // create a regular tetrahedron\n        vector&lt;Vector3&gt; Vs = {Vector3{0, 1, 0},\n                              Vector3{0, 0, 1},\n                              Vector3{-std::sqrt(3) / 2, 0, -0.5},\n                              Vector3{std::sqrt(3) / 2, 0, -0.5}};\n        vector&lt;Vector4i&gt; Ts = {Vector4i{0, 1, 2, 3}};\n\n        // setup a base mesh to reduce the later work\n        SimplicialComplex base_mesh = tetmesh(Vs, Ts);\n        // apply the constitution model to the base mesh\n        abd.apply_to(base_mesh, 100.0_MPa);\n        // apply the default contact model to the base mesh\n        default_element.apply_to(base_mesh);\n\n        // label the surface, enable the contact\n        label_surface(base_mesh);\n        // label the triangle orientation to export the correct surface mesh\n        label_triangle_orient(base_mesh);\n    }\n}\n...\n</code></pre> <pre><code>...\nscene = Scene(config)\n...\n# create a regular tetrahedron\nVs = np.array([[0,1,0],\n               [0,0,1],\n               [-np.sqrt(3)/2, 0, -0.5],\n               [np.sqrt(3)/2, 0, -0.5]])\nTs = np.array([[0,1,2,3]])\n\n# setup a base mesh to reduce the later work\nbase_mesh = tetmesh(Vs, Ts)\n# apply the constitution and contact model to the base mesh\nabd.apply_to(base_mesh, 100 * MPa)\n# apply the default contact model to the base mesh\ndefault_element.apply_to(base_mesh)\n\n# label the surface, enable the contact\nlabel_surface(base_mesh)\n# label the triangle orientation to export the correct surface mesh\nlabel_triangle_orient(base_mesh)\n</code></pre> <p><code>SimplicialComplex</code> is an expressive geometry representation, which is well-defined in mathematics. <code>Libuipc</code> use the concept of <code>SimplicialComplex</code> to represent the geometry of the discrete mesh in the simulation. Don't worry about the details of <code>SimplicialComplex</code>, we will cover it in the Geometry. Now, just think of it as a container that holds the vertices/edges/triangles/tetrahedra of the mesh.</p> <p>Keep in mind that, only we call <code>label_surface</code> on the mesh, will the engine consider the surface of the mesh for contact.</p> <p>And <code>label_triangle_orient</code> is used to label the orientation of the triangles in the mesh, which is necessary for exporting the correct surface mesh. It doesn't affect the simulation itself.</p> <p>Using the <code>base_mesh</code>, we can easily copy the setup to create two tetrahedra, <code>mesh1</code> and <code>mesh2</code>, and modify them as we like:</p> C++Python <pre><code>int main()\n{\n    ...\n    Scene scene{config};\n    {\n        ...\n\n        SimplicialComplex mesh1 = base_mesh;\n        {\n            // move the mesh1 up for 1.5 unit\n            auto pos_view = view(mesh1.positions());\n            std::ranges::transform(pos_view,\n                                pos_view.begin(),\n                                [](const Vector3&amp; v) -&gt; Vector3\n                                { return v + Vector3::UnitY() * 1.5; });\n        }\n\n        SimplicialComplex mesh2 = base_mesh;\n        {\n            // find the is_fixed attribute\n            auto is_fixed = mesh2.instances().find&lt;IndexT&gt;(builtin::is_fixed);\n            // set the first instance to be fixed\n            auto is_fixed_view = view(*is_fixed);\n            is_fixed_view[0]   = 1;\n        }\n    }\n}\n</code></pre> <pre><code>Scene scene = Scene(config)\n...\nmesh1 = base_mesh.copy()\npos_view = view(mesh1.positions())\n# move the mesh up for 1.5 unit\npos_view += Vector3.UnitY() * 1.5\n\nmesh2 = base_mesh.copy()\nis_fixed = mesh2.instances().find(builtin.is_fixed)\nis_fixed_view = view(is_fixed)\nis_fixed_view[:] = 1\n</code></pre> <p>For <code>mesh1</code>, we move it up for \\(1m\\) along the y-axis. And for <code>mesh2</code>, we set the first instance to be fixed.</p> <p>In this section, we won't go into the details of the manipulation of the mesh (exactly, the geometry), we will cover it in the Geometry. Now, just think the code above is the <code>Libuipc</code>'s way to modify the geometry.</p> <p>In <code>libuipc</code>, <code>Scene</code> contains some objects consisting of geometries. In this example, we create 2 objects, <code>object1</code> and <code>object2</code>, each with a mesh:</p> C++Python <pre><code>int main()\n{\n    Scene scene{config};\n    {\n        ...\n        // create objects\n        auto object1 = scene.objects().create(\"upper_tet\");\n        {\n            object1-&gt;geometries().create(mesh1);\n        }\n\n        auto object2 = scene.objects().create(\"lower_tet\");\n        {\n            object2-&gt;geometries().create(mesh2);\n        }\n    }\n}\n</code></pre> <pre><code>...\nScene scene = Scene(config)\n...\n# create objects\nobject1 = scene.objects().create(\"upper_tet\")\nobject1.geometries().create(mesh1)\n\nobject2 = scene.objects().create(\"lower_tet\")\nobject2.geometries().create(mesh2)\n...\n</code></pre> <p>From the API, we know that an object can have multiple geometries. It's sensible, because in the real world, an object can have multiple parts. E.g., a cloth can have multiple patches, a car can have multiple parts, etc. Object is a concept grouping the geometries together to make up a nameable entity, which is pretty intuitive for the user to build the world. But in this example, we just use one geometry for each object, for simplicity.</p> <p>Now, we have setup the initial state of the <code>Scene</code>, we can pass it to the <code>World</code> for later simulation:</p> C++Python <pre><code>int main()\n{\n    ...\n    World world{engine};\n    ...\n    Scene scene{config};\n    ...\n\n    world.init(scene);\n\n    SceneIO sio{scene};\n    sio.write_surface(fmt::format(\"scene_surface{}.obj\", world.frame()));\n\n    while(world.frame() &lt; 100)\n    {\n        world.advance();\n        world.retrieve();\n        sio.write_surface(fmt::format(\"scene_surface{}.obj\", world.frame()));\n    }\n}\n</code></pre> <pre><code>...\nworld = World(engine)\n...\nscene = Scene(config)\n...\n\nworld.init(scene)\n\nsio = SceneIO(scene)\nsio.write_surface(f\"scene_surface{world.frame()}.obj\")\n\nwhile world.frame() &lt; 100:\n    world.advance()\n    world.retrieve()\n    sio.write_surface(f\"scene_surface{world.frame()}.obj\")\n</code></pre> <p>To evolve the simulation, we call the <code>advance</code> method of the <code>World</code> to advance the simulation by one time step. Finally, we call the <code>retrieve</code> method to retrieve (download) the simulation data from the <code>World</code>.</p> <p>The easiest way to consume the simulation data is to export the surface mesh of the <code>Scene</code> at each time step. Here we use the <code>SceneIO</code> class to export the surface of all the meshes to the <code>.obj</code> file.</p> <p>It's not the only way to consume the simulation data. Because the interest of the user may vary: some may want to visualize the simulation in some GUI software, some may want to analyze the simulation data in some post-processing software, some may want to do some machine learning on the simulation data, etc. It's up to you to decide what kind of data to get from the evolution of the <code>World</code>.</p> C++Python <p>source: [TODO]</p> <p>source: hello_libuipc</p>"},{"location":"tutorial/#next-steps","title":"Next Steps","text":"<p>Now you may be interested in the following topics:</p> <ol> <li>[ Geometry ] How can I understand the geometry in <code>libuipc</code>? </li> <li>[ Concepts ] How can I understand the basic concepts in <code>libuipc</code>? </li> <li>[ Animation ] How can I script my own animation in <code>libuipc</code>?</li> </ol> <p>It's recommended to read the above topics in order, as they are the basic concepts of <code>libuipc</code>.</p>"},{"location":"tutorial/animation/","title":"Animation","text":""},{"location":"tutorial/animation/#animation","title":"Animation","text":"<p>Prequsites: Geometry, Concepts</p> <p>Simulation without interaction is boring! So comes the animation!</p> <p><code>Animation</code> in <code>libuipc</code> gives such a way to specify the translation, rotation, deformation and even anything of a geometry over time. </p> <p>An <code>Animation</code> can be a pre-designed offline animation, or a real-time input from user interaction.</p> <p>In this tutorial, we will go through the basic usage of <code>Animation</code> in <code>libuipc</code>.</p>"},{"location":"tutorial/animation/#walking-cube","title":"Walking Cube","text":"<p>In this section, we will animate a cube rotating around its own x-axis, and so it can walk on the ground with the help of friction force.</p> <p>Here we assume you have already defined the <code>engine</code>, <code>world</code>, <code>scene</code> and loaded the cube geometry with the name <code>cube_mesh</code>. Of course, don't forget <code>label_surface</code> and <code>label_triangle_orient</code> for the cube mesh, which is necessary to tell <code>libuipc</code> where the surface is and to export correct oriented surface mesh.</p> <p>Though friction is default enabled in <code>libuipc</code>, it's good to know how to turn on/off the friction explicitly.</p> C++Python <pre><code>auto config = Scene::default_config();\nconfig['contact']['friction']['enable'] = true;\n...\nauto scene = Scene(config);\n</code></pre> <pre><code>config = Scene.default_config()\nconfig['contact']['friction']['enable'] = True\nscene = Scene(config)\n</code></pre> <p>Then we need to define the constitution and constraint for the cube.</p> C++Python <pre><code>...\n\nAffineBodyConstitution abd;\nRotatingMotor          rm;\n\n// create object\nauto cube_object = scene.objects().create(\"cube\");\n{\n    // apply the constitution and constraint\n    abd.apply_to(cube_mesh, 10.0_MPa);\n    rm.apply_to(\n        cube_mesh, \n        100.0, // constraint strength ratio\n        Vector3::UnitX(), // rotation axis\n        std::numbers::pi / 1.0_s // rotation speed\n    );\n\n    // move the cube up by 2 units\n    auto trans_view = view(cube_mesh.transforms());\n    {\n        Transform t = Transform::Identity();\n        t.translate(Vector3::UnitY() * 2);\n        trans_view[0] = t.matrix();\n    }\n\n    cube_object-&gt;geometries().create(cube_mesh);\n}\n\nauto ground_obj = scene.objects().create(\"ground\");\n{\n    auto g = ground();\n    ground_obj-&gt;geometries().create(g);\n}\n</code></pre> <pre><code>...\n\nabd = AffineBodyConstitution()\nrm = RotatingMotor()\n\n# create object\ncube_object = scene.objects().create('cube')\n\n# apply the constitution and constraint\nabd.apply_to(cube_mesh, 10.0 * MPa)\nrm.apply_to(\n    cube_mesh, \n    100.0, # constraint strength ratio\n    Vector3.UnitX(), # rotation axis\n    np.pi / 1.0 # rotation speed\n)\n\n# move the cube up by 2 units\ntrans_view = view(cube_mesh.transforms())\nt = Transform.Identity()\nt.translate(Vector3.UnitY() * 2)\ntrans_view[0] = t.matrix()\n\ncube_object.geometries().create(cube_mesh)\n\nground_obj = scene.objects().create('ground')\ng = ground()\nground_obj.geometries().create(g)\n</code></pre> <p>As same as the constitutions, we first define the constraint we need for the cube. Here we use <code>RotatingMotor</code> to rotate the cube around certain axis with certain speed.</p> <p>By calling <code>apply_to</code> method of <code>RotatingMotor</code>, we apply the constraint to the cube mesh, and set a default rotation axis \\((1,0,0)\\) and rotation speed \\(\\pi\\) rad/s. The strength of the constraint is set to 100.0, which means the stiffness of the constraint is 100 times of the mass of the cube.</p> <p>Then we move the cube up by 2 units, preventing the cube intersecting with the ground.</p> <p>Finally, we create the ground.</p> <p>Ok, it's time to animate the cube!</p> <p><code>Animation</code> in <code>libuipc</code> is logically a script that define the behavior of the geometry over time. So it's intuitive to give a function to the <code>Animation</code> object, which will be called every frame.</p> C++Python <pre><code>auto&amp; animator = scene.animator();\nanimator.insert(\n    *cube_object,\n    [](Animation::UpdateInfo&amp; info) // animation function\n    {\n        // get all geometries attached to the object\n        auto geo_slots = info.geo_slots();\n        auto geo = geo_slots[0]-&gt;geometry().as&lt;SimplicialComplex&gt;();\n\n        // by setting is_constrained to 1, the cube will be controlled by the animation\n        auto is_constrained =\n            geo-&gt;instances().find&lt;IndexT&gt;(builtin::is_constrained);\n        auto is_constrained_view = view(*is_constrained);\n        is_constrained_view[0]   = 1;\n\n        // using the RotatingMotor to animate the cube\n        RotatingMotor::animate(*geo, info.dt());\n    });\n</code></pre> <pre><code>animator = scene.animator()\n\ndef animate_cube(info:Animation.UpdateInfo): # animation function\n    # get all geometries attached to the object\n    geo_slots:list[GeometrySlot] = info.geo_slots()\n    geo:SimplicialComplex = geo_slots[0].geometry()\n\n    # by setting is_constrained to 1, the cube will be controlled by the animation\n    is_constrained = geo.instances().find(builtin.is_constrained)\n    view(is_constrained)[0] = 1\n\n    # using the RotatingMotor to animate the cube\n    RotatingMotor.animate(geo, info.dt())\n\nanimator.insert(cube_object, animate_cube)\n</code></pre> <p>The <code>animator.insert()</code> takes an <code>object</code> instance and a function as input. The first argument tells <code>libuipc</code> which geometries need to be animated. The second argument is a function that will be called in each frame to update the geometry.</p> <p><code>geo_slots</code> are the geometries attached to the object with the creating order. Note that, we use the term <code>slot</code> to represent a position or a place holder not the geometry itself. The geometry reference can be retrieved by calling <code>geometry()</code> on the <code>slot</code>.</p> <p>When apply a constraint to a geometry, a builtin attribute called <code>is_constrained</code> will be created on the geometry, which tells some the element is controlled by the constraint. In this example, the element is one instance of the cube mesh (or rigorously, the <code>transform</code> of the cube mesh). We set the <code>is_constrained</code> of the first instance (the only one we have) to 1 to tell the <code>RotatingMotor</code> to control the cube.</p> <p>Finally, we call <code>RotatingMotor::animate()</code> to update the geometry according to axis and speed we set before. Note that, the axis and speed can be changed in the animation function, so the cube can rotate around different axis or with different speed at different time. By setting the <code>motor_rot_axis</code> and <code>motor_rot_vel</code> attributes of the <code>instance</code>.</p> <p>Now, run the simulation, you will see the cube rotating around its x-axis.</p> C++Python <pre><code>world.init(scene);\nSceneIO sio{scene};\nsio.write_surface(fmt::format(\"scene_surface{}.obj\", world.frame()));\n\nwhile(world.frame() &lt; 360)\n{\n    world.advance();\n    world.retrieve();\n    sio.write_surface(fmt::format(\"scene_surface{}.obj\", world.frame()));\n}\n</code></pre> <pre><code>world.init(scene)\nsio = SceneIO(scene)\nsio.write_surface(f\"scene_surface{world.frame()}.obj\")\nwhile world.frame() &lt; 360:\n    world.advance()\n    world.retrieve()\n    sio.write_surface(f\"scene_surface{world.frame()}.obj\")\n</code></pre> <p>Voila! The cube is walking on the ground!</p> <p><code>Libuipc</code> also provide <code>LinearMotor</code> for you to control the translation of an affine body by specifying the translation axis and speed.</p> <p>When you ask the name of them:</p> C++Python <pre><code>RotatingMotor rm; rm.name(); // SoftTransformConstraint\nLinearMotor lm; lm.name(); // SoftTransformConstraint\n</code></pre> <pre><code>rm = RotatingMotor()\nrm.name() # SoftTransformConstraint\nlm = LinearMotor()\nlm.name() # SoftTransformConstraint\n</code></pre> <p>They are both <code>SoftTransformConstraint</code>. Because, <code>LinearMotor</code> and <code>RotatingMotor</code> are just special cases of <code>SoftTransformConstraint</code>. </p> <p><code>SoftTransformConstraint</code> is a general constraint that can be used to fully control the transformation of a geometry, which may require some mathematical knowledge of transformation matrix. For smooth start, we will not go into the details of <code>SoftTransformConstraint</code> here. This topic will be covered in advanced tutorials.</p> C++Python <p>source: [TODO]</p> <p>source: walking_cube</p>"},{"location":"tutorial/animation/#periodically-pressed-tetrahedron","title":"Periodically Pressed Tetrahedron","text":"<p>Say, you want to animate some part of a soft body and leave the other part free (obeying the physics). <code>Libuipc</code> provides a <code>SoftPositionConstraint</code> for this purpose. The usage of <code>SoftPositionConstraint</code> is similar to the constratints we have seen before, the only difference is that <code>SoftPositionConstraint</code> applying to a soft body's vertex position rather than an affine body's instance transformation.</p> <p>Here we assume you have already defined the <code>engine</code>, <code>world</code>, <code>scene</code>. In this example, we use the <code>StableNeoHookean</code> constitution to simulate the soft body.</p> C++Python <pre><code>StableNeoHookean snh;\nSoftPositionConstraint spc;\nauto tet_object = scene.objects().create(\"tet_object\");\n{\n    vector&lt;Vector3&gt; Vs = {Vector3{0, 1, 0},\n                          Vector3{0, 0, 1},\n                          Vector3{-std::sqrt(3) / 2, 0, -0.5},\n                          Vector3{std::sqrt(3) / 2, 0, -0.5}};\n    vector&lt;Vector4i&gt; Ts = {Vector4i{0, 1, 2, 3}};\n    auto tet = tetmesh(Vs, Ts);\n    label_surface(tet);\n    label_triangle_orient(tet);\n    auto moduli = ElasticModuli::youngs_poisson(0.1_MPa, 0.49);\n    snh.apply_to(tet, moduli);\n    spc.apply_to(tet, 100); // constraint strength ratio\n    tet_object-&gt;geometries().create(tet);\n}\n\nauto ground_object = scene.objects().create(\"ground\");\n{\n    auto g = ground(-0.5);\n    ground_object-&gt;geometries().create(g);\n}\n</code></pre> <pre><code>snh = StableNeoHookean()\nspc = SoftPositionConstraint()\ntet_object = scene.objects().create('tet_object')\nVs = np.array([[0,1,0],\n               [0,0,1],\n               [-np.sqrt(3)/2, 0, -0.5],\n               [np.sqrt(3)/2, 0, -0.5]])\nTs = np.array([[0,1,2,3]])\ntet = tetmesh(Vs, Ts)\nlabel_surface(tet)\nlabel_triangle_orient(tet)\nmoduli = ElasticModuli.youngs_poisson(0.1 * MPa, 0.49)\nsnh.apply_to(tet, moduli)\nspc.apply_to(tet, 100) # constraint strength ratio\ntet_object.geometries().create(tet)\n\nground_object = scene.objects().create('ground')\ng = ground(-0.5)\nground_object.geometries().create(g)\n</code></pre> <p>Nothing special here, we just create a tetrahedron and apply the <code>StableNeoHookean</code> constitution and <code>SoftPositionConstraint</code> to it as we did before, the ground height is set to -0.5. Now we try to animate the first vertex of the tetrahedron with a <code>sin</code> function.</p> C++Python <pre><code>auto&amp; animator = scene.animator();\nanimator.insert(\n    *tet_object,\n    [](Animation::UpdateInfo&amp; info) // animation function\n    {\n        auto geo_slots = info.geo_slots();\n        auto geo = geo_slots[0]-&gt;geometry().as&lt;SimplicialComplex&gt;();\n        auto rest_geo_slots = info.rest_geo_slots();\n        auto rest_geo = rest_geo_slots[0]-&gt;geometry().as&lt;SimplicialComplex&gt;();\n\n        auto is_constrained = geo-&gt;vertices().find&lt;IndexT&gt;(builtin::is_constrained);\n        auto is_constrained_view = view(*is_constrained);\n        auto aim_position = geo-&gt;vertices().find&lt;Vector3&gt;(builtin::aim_position);\n        auto aim_position_view = view(*aim_position);\n        auto rest_position_view = rest_geo-&gt;positions().view();\n\n        is_constrained_view[0]   = 1;\n\n        auto t = info.dt() * info.frame();\n        auto theta = std::numbers::pi * t;\n        auto y = -std::sin(theta);\n\n        aim_position_view[0] = rest_position_view[0] + Vector3::UnitY() * y;\n    });\n</code></pre> <pre><code>animator = scene.animator()\ndef animate_tet(info:Animation.UpdateInfo): # animation function\n    geo_slots:list[GeometrySlot] = info.geo_slots()\n    geo:SimplicialComplex = geo_slots[0].geometry()\n    rest_geo_slots:list[GeometrySlot] = info.rest_geo_slots()\n    rest_geo:SimplicialComplex = rest_geo_slots[0].geometry()\n\n    is_constrained = geo.vertices().find(builtin.is_constrained)\n    is_constrained_view = view(is_constrained)\n    aim_position = geo.vertices().find(builtin.aim_position)\n    aim_position_view = view(aim_position)\n    rest_position_view = rest_geo.positions().view()\n\n    is_constrained_view[0] = 1\n\n    t = info.dt() * info.frame()\n    theta = np.pi * t\n    y = -np.sin(theta)\n\n    aim_position_view[0] = rest_position_view[0] + Vector3.UnitY() * y\n\nanimator.insert(tet_object, animate_tet)\n</code></pre> <p>Something new here is the <code>info.rest_geo_slots()</code>, which returns the slots of the rest geometry (initial geometry) in the object. We use the rest geometry to get the initial position of the vertex we want to animate. With the initial position and a periodic function, we can setup the <code>aim_position</code> of the vertex to animate it.</p> <p>Here we go!</p> C++Python <p>source: [TODO]</p> <p>source: periodically_pressed_tetrahedron</p>"},{"location":"tutorial/concepts/","title":"Concepts","text":""},{"location":"tutorial/concepts/#concepts","title":"Concepts","text":"<p>Here is an illustration of almost all the concepts and their relationship in <code>libuipc</code>. It might look a little bit complicated, but don't worry, we will explain it step by step.</p> <p></p> <p>As we can see, there are 3 top-most concepts in <code>libuipc</code>, they are:</p> <ul> <li><code>Engine</code></li> <li><code>World</code></li> <li><code>Scene</code></li> </ul> <p>Conceptually, <code>World</code> is something interests us. <code>Engine</code> is the heart of the simulation, which drives the <code>World</code> evolution. <code>Scene</code> is a snapshot of the <code>World</code> at a certain time point, and contains all information we needed to drive the simulation.</p> <p>From the aspect of 'programming', <code>Engine</code> is some simulation algorithms running on some computing devices, it can be <code>ipc-on-cuda</code>, <code>ipc-on-tbb</code> or even <code>any-method-on-any-device</code>, which is called the backend of <code>libuipc</code>. <code>World</code> is an interface exploiting the life-cycle of the simulation, you can <code>init()</code> it, <code>advance()</code> the simulation by one step, <code>retrieve()</code> the simulation data back and so on. <code>Scene</code> is a data structure that contains the 'current state' and the 'initial state' of the world, which is all the information we need to simulate the world.</p>"},{"location":"tutorial/concepts/#scene","title":"Scene","text":"<p>Scene in <code>libuipc</code> is a whole set of entities we need to simulate the world.</p> <p>There are 5 main parts in a scene:</p> Term Description Objects Objects are some concrete entities, such as a T-shirt, a box, etc. They may can be described by a set of geometries. For example, a T-shirt may have several pieces of cloth, producted by different materials (constitutions) and have different contact behaviors (contact models). Geometries Geometries are all the basic geometries that are used to build objects in the scene. The ownership of the geometries is kept by the scene. Constitution Tabular Constitution Tabular is a collection of all the constitutions that are used in the scene. A constitution is a set of properties that define the physics behavior of the object. For example, a famous constitution is the Neo-Hookean model, which is used to simulate the deformation of rubber-like materials. Contact Tabular Contact Tabular  is a collection of all the contact models that are used in the scene. A contact model is a set of properties that define the contact behavior of the object. Typically, the properties include the friction coefficient, the restitution coefficient, etc. Animator Animator is a collection of all the animations that are used in the scene. An animation is a script that defines the motion of the object. C++Python <p>The interfaces of <code>Engine</code>, <code>World</code>, <code>Scene</code>, <code>Object</code> are defined in the <code>uipc::core</code> namespace.</p> <pre><code>using namespace uipc::core;\n</code></pre> <p>The interfaces of <code>Engine</code>, <code>World</code>, <code>Scene</code>, <code>Object</code> are defined in the <code>uipc.core</code> module.</p> <pre><code>from uipc.core import *\n</code></pre> <p>Here is a simple example to create a scene:</p> <p>First, we declare a scene.</p> C++Python <pre><code>Scene scene;\n</code></pre> <pre><code>scene = Scene()\n</code></pre> <p>Then, we need to create a constitution for the object. Here we use the <code>AffineBodyConstitution</code> as an example, <code>AffineBodyConstitution</code> is a simple constitution that can be used to approximate the behavior of a rigid body.</p> <p>We need to create a constitution for the object. Here we use the <code>AffineBodyConstitution</code> as an example, <code>AffineBodyConstitution</code> is a simple constitution that can be used to approximate the behavior of a rigid body.</p> C++Python <pre><code>auto&amp; constitution_tabular = scene.constitution_tabular();\n// create a constitution\nconstitution::AffineBodyConstitution abd;\n// optional, libuipc will do this automatically under default configuration\nconstitution_tabular.insert(abd); \n// create a material with affine body stiffness 100 MPa\nauto abd_material = abd.create_material(100.0_MPa);\n</code></pre> <pre><code>constitution_tabular = scene.constitution_tabular()\n# create a constitution\nabd = constitution.AffineBodyConstitution()\n# optional, libuipc will do this automatically under default configuration\nconstitution_tabular.insert(abd)\n# create a material with affine body stiffness 100 MPa\nabd_material = abd.create_material(100 * MPa)\n</code></pre> <p>To simulate the contact behavior of the object, we need to create a contact model. Note that the contact model has a pairwised relationship. For example, a contact tabular among wood, steel, and rubber can be defined as follows (imaginary values, just for demonstration):</p> fric wood steel rubber wood 0.5 0.3 0.6 steel - 0.2 0.4 rubber - - 0.7 C++Python <pre><code>auto&amp; contact_tabular = scene.contact_tabular();\n// create a contact element\nauto&amp; wood_contact = contact_tabular.create(\"wood\");\n// create self-contact model\n// friction coefficient is 0.5, restitution coefficient is 1.0 GPa\ncontact_tabular.insert(wood_contact, wood_contact, 0.5, 1.0_GPa);\n</code></pre> <pre><code>contact_tabular = scene.contact_tabular()\n# create a contact element\nwood_contact = contact_tabular.create(\"wood\")\n# create self-contact model\n# friction coefficient is 0.5, restitution coefficient is 1.0 GPa\ncontact_tabular.insert(wood_contact, wood_contact, 0.5, 1.0 * GPa)\n</code></pre> <p>Now we can create a wooden cube object in the scene.</p> C++Python <pre><code>// read a cube mesh from file\ngeometry::SimplicialComplexIO io;\nauto cube = io.read(\"cube.msh\");\n\n// apply the material and the contact model to the cube\nabd_material.apply_to(cube);\nwood_contact.apply_to(cube);\n\n// create an object\nauto wooden_cube = scene.objects().create(\"wooden_cube\");\n\n// create a geometry for the object\nwooden_cube-&gt;geometries().create(cube);\n</code></pre> <pre><code># read a cube mesh from file\nio = geometry.SimplicialComplexIO()\ncube = io.read(\"cube.msh\")\n\n# apply the material and the contact model to the cube\nabd_material.apply_to(cube)\nwood_contact.apply_to(cube)\n\n# create an object\nwooden_cube = scene.objects().create(\"wooden_cube\")\n\n# create a geometry for the object\nwooden_cube.geometries().create(cube)\n</code></pre> <p>A short summary of creating a scene:</p> <ol> <li>setup the constitution tabular</li> <li>setup the contact tabular</li> <li>apply constitutions and contact elements to the geometries</li> <li>create objects</li> </ol>"},{"location":"tutorial/concepts/#object","title":"Object","text":"<p>Object in <code>libuipc</code> is a representation of the concrete entity in real world. It is something that touchable, visible, and can be interacted with. An object can be composed of one or more geometries, and each geometry can have its own constitution and contact model. </p> <p>Though a geometry share the same constitution and contact model, the coefficients of the constitution and the contact model can be different in the geometry. Some random perturbation can be added to the related attributes of the geometry to simulate the real world.</p> <p>Info</p> <p>The coefficients of the constitution and the contact model can be stored in the attributes of the geometry. The backend can retrieve the coefficients from the attributes and simulate them properly.</p>"},{"location":"tutorial/concepts/#constitution","title":"Constitution","text":"<p>Constitution is a set of coefficients and models that define the physics behavior of the object. Because there are so many different constitutions so far, we use a Consititution UID to identify all the constitutions <code>libuipc</code> supports. The specification of the constitutions can be found here.</p> <p>For coding convenience, we provide some class like <code>AffineBodyConstitution</code> to help the user create a constitution. </p>"},{"location":"tutorial/concepts/#constraint","title":"Constraint","text":"<p>A constraint is a set of coefficients and models that define the constrained behavior of the object. For example, a transform constraint on affine body can force the affine body to move along certain trajectory specified by users. Constraint is always coupling with the animation (see Animator) to control the movement of the object.</p>"},{"location":"tutorial/concepts/#material","title":"Material","text":"<p>Material is an instance of a constitution. A material has a concrete set of coefficients that define the physics behavior of the object. And it may be a short cut to apply the coefficients to the geometry.</p>"},{"location":"tutorial/concepts/#contact-model","title":"Contact Model","text":"<p>Contact model is a set of coefficients and models that define the contact behavior of the object. The contact model is a pairwised relationship, which means the contact model between two objects is different from the contact model between another two objects.</p>"},{"location":"tutorial/concepts/#contact-element","title":"Contact Element","text":"<p>A contact element is one side of the pairwised contact model, which has no meaning itself. The contact element IDs of two collided objects are used to find the contact model coefficients between them.</p> C++Python <pre><code>wood_contact.id(); // 1\n</code></pre> <pre><code>wood_contact.id() # 1\n</code></pre> <p>Note that, <code>wood_contact</code> element id is <code>1</code>, because there is a default contact element with id <code>0</code>. The default contact model will be a fallback when the contact model between two objects is not defined.</p> <p>[Discussion] Do we need to provide a <code>ContactModelUID</code> to identify the contact model? Because in GIPC we have new contact model based on an anisotropic constitutions.</p>"},{"location":"tutorial/concepts/#animator","title":"Animator","text":"<p>Animator contains a set of scripted animation that define the behavior of the object, such as the rotation, translation, per-vertex deformation and so on.</p> C++Python <pre><code>auto&amp; animator = scene.animator();\n</code></pre> <pre><code>animator = scene.animator()\n</code></pre> <p>To create an animation, we need following codes:</p> C++Python <pre><code>// create an animation\nanimator.insert(*obj,\n    [](Animation::UpdateInfo&amp; info)\n    {\n        auto geo_slots = info.geo_slots();\n        for(auto&amp; slot : geo_slots)\n        {\n            auto&amp; geo = slot-&gt;geometry().as&lt;SimplicialComplex&gt;();\n            ...\n        }\n    });\n</code></pre> <pre><code># create an animation\ndef update(info:Animation.UpdateInfo):\n    geo_slots = info.geo_slots()\n    for slot in geo_slots:\n        geo:SimplicialComplex = slot.geometry()\n        ...\n\nanimator.insert(obj, update)\n</code></pre> <p>The <code>animator.insert()</code> takes an <code>object</code> instance and a function as input. The first argument tells <code>libuipc</code> which geometries need to be animated. The second argument is a function that will be called in each frame to update the geometry.</p> <p><code>geo_slots</code> are the geometries bound to the object with the creating order. Note that, we use the term <code>slot</code> to represent a position or a place holder not the geometry itself. The geometry reference can be retrieved by calling <code>geometry()</code> on the <code>slot</code>.</p> <p>The way you modifying the animated geometries are dependent on the constraint you use. </p> <p>For example:</p> <ul> <li>If you use a <code>SoftTransformConstraint</code> on affine bodies, you can set the <code>is_constrained</code> attribute of the <code>instances</code> to <code>1</code> to enable the constraint on certain instances, and modify the <code>aim_transform</code> attribute of the <code>instances</code> to control the transform of the instances.</li> <li>If you use a <code>SoftPositionConstraint</code> on soft bodies, you can set the <code>is_constrained</code> attribute of the <code>vertices</code> to <code>1</code> to enable the constraint on certain vertices, and modify the <code>aim_position</code> attribute of the <code>vertices</code> to control the position of the vertices.</li> </ul> <p>There will be a lot of other constraints provided in the future, and the way you modify the animated geometries will be different, please refer to the document of those constraints for more details.</p> <p>A concrete tutorial of how to create an animation can be found here, Animation Tutorial.</p>"},{"location":"tutorial/geometry/","title":"Geometry","text":""},{"location":"tutorial/geometry/#geometry","title":"Geometry","text":"<p>In simulation programs, geometry is a fundamental concept to represent the shape of the object, or rigrously, the domain of the simulation. </p> <p>There are several kinds of geometry, such as point cloud, line mesh, triangle mesh, quad mesh, polygon mesh, tetrahedral mesh, hexahedral mesh and so on, these geometries are called explicit geometries, because we use a discrete set of vertices and primitives to represent them. There are also some implicit geometries, such as the Signed Distance Field (SDF), which is a scalar field that represents the distance from the point to the surface of the geometry. It's inrealistic and inpractical to represent all the geometries in a single way, so we separate the geometries into several categories, and provide proper interfaces to access the relative information.</p> <p>They are:</p> <ul> <li>Simplicial Complex: A unified representation of the explicit geometries, whose primitives are simplices, such as point, line, triangle, tetrahedron, etc. Some examples are point cloud, line mesh, triangle mesh, tetrahedral mesh, etc.</li> <li>Implicit Geometry: A presentation of the implicit geometries, such as the Signed Distance Field (SDF).</li> <li>...</li> </ul> <p>In this tutorial, we will focus on the simplicial complex, which is the most common geometry in the simulation programs. And describe the geometry interface in the <code>libuipc</code> library. </p> C++Python <p>All geometry interfaces are defined in the <code>uipc/geometry</code> namespace.</p> <pre><code>using namespace uipc::geometry;\n</code></pre> <p>All geometry interfaces are defined in the <code>pyuipc.geometry</code> module.</p> <pre><code>from uipc.geometry import *\n</code></pre>"},{"location":"tutorial/geometry/#what-makes-a-geometry","title":"What makes a geometry?","text":"<p>The first question to come is what makes a geometry?</p> <p>Our answer is:</p> \\[ \\text{Geometry} = \\text{Topology} + \\text{Attributes} \\] <p>Topologies describe how a geometry is connected, and attributes who have the same dimension as the topology carry the information of the geometry.</p> <p>For example, to represent a 2D surface in a triangle mesh (like the famous <code>.obj</code> format), we store the positions of the vertices and the triangles that connect the vertices, as shown below:</p> \\[ V = \\{ 0,1,...,N-1 \\}, \\] <p>where \\(V\\) is the set of vertices, and \\(N\\) is the number of vertices.</p> <p>We may store the positions of the vertices with the same count as the vertices:</p> \\[ P = \\{ \\mathbf{x}_i\\mid i \\in V \\}, \\mathbf{x}_i \\in \\mathbb{R}^3. \\] <p>To represent the triangle, we may store the indices of the vertices that form the triangle:</p> \\[ F = \\{ (i,j,k) \\mid i,j,k \\in V \\}. \\] <p>If we want to record the area of each triangle, we may store a float number for each triangle:</p> \\[ A = \\{ a_{ijk} \\mid (i,j,k) \\in F \\}. \\] <p>In this example, the topology is the set of vertices \\(V\\) and triangles \\(F\\), and the attributes are the positions \\(P\\) of the vertices and the area \\(A\\) of the triangles, which obey the rule:</p> \\[ |P| = |V|, |A| = |F|, \\] <p>where \\(|\\bullet|\\) tells the element count of the set.</p> <p>With the same basic idea, we use a more general and well-defined way to represent such kind of geometry in the <code>libuipc</code> library, called Simplicial Complex, which is widely used in the diserete differential geometry.</p>"},{"location":"tutorial/geometry/#simplicial-complex","title":"Simplicial Complex","text":"<p>In <code>libuipc</code>, a <code>Simplicial Complex</code> is a general representation of an explicit mesh. In \\(\\mathbb{R}^3\\), a simplicial complex can be a tetrahedral mesh, a triangle mesh, a line mesh, or a point cloud, which have a dimension of \\(3\\), \\(2\\), \\(1\\), or \\(0\\), respectively.</p> <ul> <li>The tetrahedral mesh can be used to describe solid objects.</li> <li>The triangle mesh can be used to describe some 2D-codimensional objects, like a cloth with a thin thickness or the surface of a solid object.</li> <li>The line mesh can be used to describe some 1D-codimensional objects, like a rope, a curve, or a wire.</li> <li>The point cloud can be used to describe some 0D-codimensional objects, like a bunch of particles.</li> </ul> C++Python <p>The simplest way to create a simplicial complex is to use the <code>tetmesh()</code>, <code>trimesh()</code>, <code>linemesh()</code>, and <code>pointcloud()</code> functions, which are shown below:</p> <pre><code>auto tets = tetmesh(Vs,Ts);\ntets.dim(); // 3\nauto tris = trimesh(Vs,Fs);\ntris.dim(); // 2\nauto lines = linemesh(Vs,Es);\nlines.dim(); // 1\nauto points = pointcloud(Vs);\npoints.dim(); // 0\n</code></pre> <p>Or, you want to read the meshes from a file, you can use <code>SimplicialComplexIO</code>.</p> <pre><code>SimplicialComplexIO io;\n// .msh file\nauto tetmesh = io.read(\"bunny.msh\");\n// .obj file\nauto trimesh = io.read(\"cloth.obj\");\n// ... any other supported file format\n</code></pre> <p>The simplest way to create a simplicial complex is to use the <code>tetmesh()</code>, <code>trimesh()</code>, <code>linemesh()</code>, and <code>pointcloud()</code> functions:</p> <pre><code>tets = tetmesh(Vs,Ts)\ntets.dim() # 3\ntris = trimesh(Vs,Fs)\ntris.dim() # 2\nlines = linemesh(Vs,Es)\nlines.dim() # 1\npoints = pointcloud(Vs)\npoints.dim() # 0\n</code></pre> <p>Or, you want to read the meshes from a file, you can use <code>SimplicialComplexIO</code>.</p> <pre><code>io = SimplicialComplexIO()\n# .msh file\ntetmesh = io.read('bunny.msh')\n# .obj file\ntrimesh = io.read('cloth.obj')\n# ... any other supported file format\n</code></pre>"},{"location":"tutorial/geometry/#access-geometry-information","title":"Access Geometry Information","text":"<p>In <code>libuipc</code>, the data access and memory ownership of the geometry are separated. You can notice such a design almost everywhere in the library.</p> <p>To access the geometry information, you need to create a <code>view</code> of the geometry, which is a lightweight object indicating the way we access the geometry, typically the read-only or read-write. </p> <p>For example, now we have a cube.</p> C++Python <pre><code>SimplicialComplexIO io;\nauto cube = io.read(\"cube.msh\");\n</code></pre> <pre><code>io = SimplicialComplexIO()\ncube = io.read('cube.msh')\n</code></pre> <p>To access the positions of the cube, we need to find the attribute of the positions.</p> C++Python <p>The the atrribute <code>position</code> is of type <code>Vector3</code>.</p> <pre><code>auto VA = cube.vertices();\nauto pos = VA.find&lt;Vector3&gt;(builtin::position);\n</code></pre> <p>The <code>builtin::position</code> is a predefined attribute name, which is the position of the vertices to avoid typo. You can also use a string to represent the attribute name.</p> <pre><code>VA = cube.vertices()\npos = VA.find(builtin.position)\n</code></pre> <p>The <code>builtin.position</code> is a predefined attribute name, which is the position of the vertices to avoid typo. You can also use a string to represent the attribute name.</p> <p>Note that, till now, we just get a handle of the attribute <code>position</code>. To access the data, we need to create a view of the attribute.</p> C++Python <p></p><pre><code>span&lt;const Vector3&gt; const_view = pos-&gt;view();\n</code></pre> The view of the <code>position</code> is a <code>span&lt;const Vector3&gt;</code> (we explicitly define it here, but you can use <code>auto</code>), which is a const view of the position data. You can not modify the data through the view.  <p></p><pre><code>const_view = pos.view()\n</code></pre> The view of the <code>position</code> is a <code>numpy.ndarray</code>, which is a const view of the position data. You can not modify the data through the view.  <p>If you want to modify the position data, you can create a non-const view of the attribute.</p> C++Python <pre><code>span&lt;Vector3&gt; non_const_view = view(*pos);\n</code></pre> <pre><code>non_const_view = view(pos)\n</code></pre> <p>You find that, it need more effort to create a non-const view of the attribute (calling the global function <code>view</code>) than creating a const view(calling the member function <code>view</code> of the attribute). This is because we want to make sure that the user is aware of the potential clone of the geometry when they modify the data. The non-const view assumes that you will modify the data later, which may trigger a clone of the geometry according to <code>libuipc</code>'s Clone on Write strategy.</p> <p>You may want to access the tetrahedra topology of the cube, which is similar to the positions.</p> C++Python <pre><code>auto TA = cube.tetrahedra();\nspan&lt;Vector4i&gt; tet_view = view(TA.topo());\nspan&lt;const Vector4i&gt; ctet_view = TA.topo().view();\n</code></pre> <pre><code>TA = cube.tetrahedra()\ntet_view = view(TA.topo())\nctet_view = TA.topo().view()\n</code></pre> <p>But because the topology is already there, we don't need to <code>find</code> anything. Also, if you just want to read the topology, it's better to use the const view.</p> <p>To create a new attribute, you can call the <code>create</code> function, with the attribute name and the default value.</p> C++Python <pre><code>auto vel = VA.create&lt;Vector3&gt;(\"velocity\", Vector3::Zero());\n</code></pre> <pre><code>vel = VA.create(\"velocity\", Vector3.Zero())\n</code></pre> <p>Then we will have a new attribute named \"velocity\" with the default value, the size of the attribute is the same as the number of vertices.</p> <p>To remove an attribute, you can call the <code>destroy</code> function with the attribute name.</p> C++Python <pre><code>VA.destroy(\"velocity\");\n</code></pre> <pre><code>VA.destroy(\"velocity\")\n</code></pre> <p>Danger</p> <p>Accessing the removed attribute slot will cause the program to crash.</p> <p>If you are not sure whether the attribute slot is valid, you should check it by:</p> C++Python <pre><code>if(vel)\n{\n    // do something\n}\n</code></pre> <pre><code>if vel is not None:\n    # do something\n</code></pre> <p>Ok, now you have a basic idea of how to access the geometry information. Let's move on to the next section. I think it's high time to show the so called <code>Clone on Write</code> strategy.</p>"},{"location":"tutorial/geometry/#clone-on-write","title":"Clone on Write","text":"<p>Geometries in <code>libuipc</code> are implemented with the <code>Clone on Write</code> strategy. Any inital copy of a geometry is a shallow copy, which means, the data of the geometry is shared. Any creation of a non-const view of the geometry will trigger a minimal clone of the modified part of the geometry.</p> <p>A simple example is shown below:</p> C++Python <pre><code>auto foo = tetmesh(Vs,Ts);\nauto bar = foo;\n</code></pre> <pre><code>foo = tetmesh(Vs,Ts)\nbar = foo.copy()\n</code></pre> <p>Here, <code>bar</code> is just a special shallow copy of the <code>foo</code>. No matter <code>bar</code> or <code>foo</code> is modified, the related internal part of the data will be cloned.</p> <p>For example, we create a non-const view of the positions of the mesh <code>bar</code>:</p> C++Python <pre><code>auto VA  = bar.vertices();\nauto pos = VA.find&lt;Vector3&gt;(builtin::position);\npos-&gt;is_shared(); // true\nauto non_const_view = view(*pos);\npos-&gt;is_shared(); // false\n</code></pre> <p>Here, <code>pos-&gt;is_shared()</code> first return <code>true</code>, which means the position data is shared. After we create a non-const view of the position data, <code>pos-&gt;is_shared()</code> will return <code>false</code>, which means, <code>pos</code> is exclusively belong to <code>bar</code>.</p> <pre><code>TA = bar.tetrahedra();\nTA.topo().is_shared(); // true\n</code></pre> <p>Here, <code>TA.topo().is_shared()</code> will return <code>true</code>, because we don't modify the topology, so the topology of <code>foo</code> and <code>bar</code> is still shared.</p> <pre><code>VA = bar.vertices()\npos = VA.find(builtin.position)\npos.is_shared() # True\nnon_const_view = view(pos)\npos.is_shared() # False\n</code></pre> <p>Here, <code>pos.is_shared()</code> first return <code>True</code>, which means the position data is shared. After we create a non-const view of the position data, <code>pos.is_shared()</code> will return <code>False</code>, which means, <code>pos</code> is exclusively belong to <code>bar</code>.</p> <pre><code>TA = bar.tetrahedra()\nTA.topo().is_shared() # True\n</code></pre> <p>Here, <code>TA.topo().is_shared()</code> will return <code>True</code>, because we don't modify the topology, so the topology of <code>foo</code> and <code>bar</code> is still shared.</p> <p>Such a design minimizes the geometry memory usage and offloads users' concern about the geometry copy cost.</p> <p>Warning</p> <p>Be careful when you create a view of a geometry, Always use a const view if you don't want to modify the data to gain higher performance.</p> <p>Danger</p> <p>Never store a view of any attribute, because the view may become invalid after the attribute is modified. Always create a new view when you need it.</p>"},{"location":"tutorial/geometry/#instancing-and-meta-information","title":"Instancing and Meta Information","text":"<p>In the field of rendering, instancing is a common technique to render multiple instances of the same geometry with different transformations, which is very efficient to desribe the scene with many similar objects.</p> <p>To get the instance information of the geometry, you can call the <code>instances()</code> function of the geometry, almost the same as the <code>vertices()</code> and <code>tetrahedra()</code> functions.</p> C++Python <pre><code>SimplicialComplexIO io;\nauto cube = io.read(\"cube.msh\");\nauto Is = cube.instances();\nIs.size(); // 1\n</code></pre> <pre><code>io = SimplicialComplexIO()\ncube = io.read(\"cube.msh\")\nIs = cube.instances()\nIs.size() # 1\n</code></pre> <p>A geometry is initally a single instance, so the size of <code>Is</code> is excatly 1.</p> <p>To create instances, you just resize it.</p> C++Python <pre><code>Is.resize(5);\nIs.size(); // 5\n</code></pre> <pre><code>Is.resize(5)\nIs.size() # 5\n</code></pre> <p>Now, you have 5 instances of the cube.</p> <p>You may ask for the transformation of the instances, the answer is the same as the positions and the tetrahedra.</p> C++Python <pre><code>auto trans = Is.find&lt;Matrix4x4&gt;(builtin::transform);\nauto trans_view = trans-&gt;view();\nfor(auto&amp;&amp; t : trans_view) std::cout &lt;&lt; t &lt;&lt; std::endl;\n</code></pre> <pre><code>trans = Is.find(builtin.transform)\ntrans_view = trans.view()\nprint(trans_view)\n</code></pre> <p>There are some short-cut you can take to access some common attributes of the geometry, such as the positions, the transforms, etc.</p> C++Python <pre><code>auto&amp; short_cut_trans = Is.transforms();\nauto&amp; short_cut_pos = cube.positions();\n</code></pre> <pre><code>short_cut_trans = Is.transforms()\nshort_cut_pos = cube.positions()\n</code></pre> <p>The naming convention of the short-cut is the plural form of the attribute name, which is more readable and more intuitive.</p> <p>Destroying the short-cut is not allowed, if you do so, <code>libuipc</code> will throw an exception.</p> C++Python <pre><code>Is.destroy(\"transform\"); // throw AttributeDontAllowDestroy\n</code></pre> <pre><code>Is.destroy(\"transform\") # raise AttributeDontAllowDestroy\n</code></pre> <p>Meta is used to store the root information of the geometry with a fixed size of 1. For example, constituitive model and contact model information will be stored in the meta information according to the specification of the <code>libuipc</code>. Of course, you can create and access any meta information you need.</p> <p>To get the meta information of the geometry, you call the <code>meta()</code> function of the </p> C++Python <pre><code>auto&amp; meta = cube.meta();\n</code></pre> <pre><code>meta = cube.meta()\n</code></pre> <p>The way to access the meta information is the same as all the other attributes. The only difference is that the meta information always has a size of 1, you can create attributes, but you can not resize it. The the meta describes the root information of the </p> <p>For example, you can create a meta attribute to store the name of the </p> C++Python <pre><code>auto name = meta.create&lt;std::string&gt;(\"name\", \"some cubes\");\n</code></pre> <pre><code>name = meta.create(\"name\", \"some cubes\")\n</code></pre>"},{"location":"tutorial/geometry/#spreadsheets","title":"Spreadsheets","text":"<p><code>Libuipc</code> provides a handy way to visualize the geometry information, which is called <code>spreadsheets</code> (the same idea as the <code>Geometry Spreadsheet</code> in the <code>Houdini</code> software).</p> <p>All the attributes of the geometry can be described as serveral tables, which are called <code>spreadsheets</code>. </p> C++Python <p>To use the <code>spreadsheets</code>, you need to include the header file <code>#include &lt;uipc/geometry/utils/spreadsheet_io.h&gt;</code>.</p> <p></p><pre><code>SimplicialComplexIO io;\nauto mesh = io.read(\"cube.msh\");\nSpreadSheetIO sio;\n// dump to csv\nsio.write_csv(\"spreadsheet\", mesh);\n// dump to json\nsio.write_json(\"spreadsheet\", mesh);\n</code></pre> See also the SimplicialComplexIO.  <pre><code>io = SimplicialComplexIO()\nmesh = io.read(\"cube.msh\")\nsio = SpreadSheetIO()\n# dump to csv\nsio.write_csv(\"spreadsheet\", mesh)\n# dump to json\nsio.write_json(\"spreadsheet\", mesh)\n</code></pre> <p>After writing the spreadsheets to the disk, you can open them with any spreadsheet or json viewer you like.</p> <p>The following figures using the VSCode extensions:</p> CSV Json Excel Viewer Json Grid <p>It's a very convenient way to check the geometry information. If you are interested in some geometry operations, you can write the results to the spreadsheets and check them with the viewer.</p>"},{"location":"tutorial/geometry/#implicit-geometry","title":"Implicit Geometry","text":"<p>Implicit geometry is a kind of geometry that is represented using certain equations. There is no general data structure for such kind of geometry. In <code>libuipc</code>, we asign a unique id to each kind of implicit geometry.</p> <p>For example, the <code>HalfPlane</code> in <code>libuipc</code> has an UID of <code>1</code>, which is represented by a point \\(\\mathbf{P}\\) and a normal vector \\(\\mathbf{N}\\).</p> <p>The way to access/modify the implicit geometry is the same as the explicit geometry. While the basic attributes may vary according to the geometry type.</p> <p>For example, the <code>HalfPlane</code> places the \\(\\mathbf{P}\\) and \\(\\mathbf{N}\\) in the <code>instances</code> with the attribute name <code>P</code> and <code>N</code> respectively.</p> <p>Later, there may be more implicit geometries in the <code>libuipc</code>, such as the <code>Sphere</code>, <code>Cylinder</code>, etc.</p>"},{"location":"Libuipc/annotated/","title":"Class List","text":""},{"location":"Libuipc/annotated/#class-list","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>class UIPCModuleInitInfo </li> <li>namespace fmt <ul> <li>struct formatter&lt; uipc::core::Animation &gt; </li> <li>struct formatter&lt; uipc::core::Animator &gt; </li> <li>struct formatter&lt; uipc::core::Object &gt; </li> <li>struct formatter&lt; uipc::core::ObjectCollection &gt; </li> <li>struct formatter&lt; uipc::core::Scene &gt; </li> <li>struct formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt; </li> <li>struct formatter&lt; uipc::geometry::AttributeCollection &gt; </li> <li>struct formatter&lt; uipc::geometry::Geometry &gt; </li> <li>struct formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt; </li> <li>struct formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt; </li> <li>struct formatter&lt; uipc::geometry::ImplicitGeometry &gt; </li> <li>struct formatter&lt; uipc::geometry::SimplicialComplex &gt; </li> <li>struct formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt; </li> </ul> </li> <li>namespace nlohmann <ul> <li>struct adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; </li> </ul> </li> <li>namespace std </li> <li>namespace uipc <ul> <li>class BufferInfo </li> <li>class Exception </li> <li>class GlobalTimer </li> <li>class JsonIOError </li> <li>class LogPatternGuard </li> <li>struct PmrDeleter </li> <li>class Timer </li> <li>namespace backend <ul> <li>class AnimatorVisitor </li> <li>class Buffer </li> <li>class BufferView </li> <li>class ContactTabularVisitor </li> <li>class DiffSimVisitor </li> <li>class EngineCreateInfo </li> <li>class GeometryVisitor </li> <li>class SanityCheckMessageVisitor </li> <li>class SceneVisitor </li> <li>class WorldVisitor </li> </ul> </li> <li>namespace builtin <ul> <li>class ConstitutionUIDAutoRegister </li> <li>class ConstitutionUIDCollection </li> <li>class ImplicitGeometryUIDAutoRegister </li> <li>class ImplicitGeometryUIDCollection </li> <li>struct UIDInfo </li> <li>namespace details <ul> <li>class UIDRegister </li> </ul> </li> </ul> </li> <li>namespace constitution <ul> <li>class ARAP </li> <li>class AffineBodyConstitution </li> <li>class AffineBodyMaterial </li> <li>class Constraint </li> <li>class DiscreteShellBending </li> <li>class ElasticModuli </li> <li>class Empty </li> <li>class FiniteElementConstitution </li> <li>class FiniteElementExtraConstitution </li> <li>class HookeanSpring </li> <li>class IConstitution </li> <li>class KirchhoffRodBending </li> <li>class LinearMotor </li> <li>class NeoHookeanShell </li> <li>class Particle </li> <li>class RotatingMotor </li> <li>class SoftPositionConstraint </li> <li>class SoftTransformConstraint </li> <li>class StableNeoHookean </li> </ul> </li> <li>namespace core <ul> <li>class Animation <ul> <li>class UpdateHint </li> <li>class UpdateInfo </li> </ul> </li> <li>class Animator </li> <li>class ConstitutionTabular </li> <li>class ContactElement </li> <li>class ContactModel </li> <li>class ContactModelCollectionT </li> <li>class ContactTabular </li> <li>class DiffSim </li> <li>class Engine </li> <li>class EngineException </li> <li>class EngineStatus </li> <li>class EngineStatusCollection </li> <li>class Feature </li> <li>class FeatureCollection </li> <li>class IEngine </li> <li>class IFeature </li> <li>class IObject </li> <li>class IObjectCollection </li> <li>class ISanityChecker </li> <li>class ISanityCheckerCollection </li> <li>class Object <ul> <li>class CGeometries </li> <li>class Geometries </li> </ul> </li> <li>class ObjectCollection </li> <li>class ObjectCollectionSnapshot </li> <li>class ObjectGeometrySlots </li> <li>class ObjectGeometrySlots&lt; const geometry::Geometry &gt; </li> <li>class ObjectGeometrySlots&lt; geometry::Geometry &gt; </li> <li>class ObjectSnapshot </li> <li>class SanityCheckMessage </li> <li>class SanityCheckMessageCollection </li> <li>class SanityChecker </li> <li>class SanityCheckerCollectionCreateInfo </li> <li>class Scene <ul> <li>class CGeometries </li> <li>class CObjects </li> <li>class Geometries </li> <li>class Objects </li> </ul> </li> <li>class SceneFactory </li> <li>class SceneIO </li> <li>class SceneIOError </li> <li>class SceneSnapshot </li> <li>class SceneSnapshotCommit </li> <li>class World </li> <li>namespace internal <ul> <li>class Engine </li> <li>class Scene </li> <li>class World </li> </ul> </li> </ul> </li> <li>namespace details <ul> <li>class ScopedTimer </li> </ul> </li> <li>namespace diff_sim <ul> <li>class AdjointMethodFeature </li> <li>class AdjointMethodFeatureOverrider </li> <li>class EnableGradFeature </li> <li>class EnableGradFeatureOverrider </li> <li>class ParameterCollection </li> <li>class SparseCOOView </li> </ul> </li> <li>namespace geometry <ul> <li>class AbstractSimplicialComplex Represents an abstract simplicial complex, containing vertices, edges, triangles, and tetrahedra. </li> <li>class Attribute Template class to represent a geometries attribute of type T. </li> <li>class AttributeCollection A collection of geometries attributes. </li> <li>class AttributeCollectionCommit </li> <li>class AttributeCollectionError </li> <li>class AttributeCollectionFactory </li> <li>class AttributeCopy </li> <li>class AttributeFactory </li> <li>class AttributeFriend </li> <li>class AttributeIO </li> <li>class AttributeIOError </li> <li>class AttributeSlot Template class to represent a geometries attribute slot of type T in a geometries attribute collection. </li> <li>class BVH </li> <li>class DeserialSharedAttributeContext </li> <li>class Geometry A base geometries class that contains the instance attributes and the meta attributes. <ul> <li>class InstanceAttributesT A wrapper class for the instance attributes of a geometries. </li> <li>class MetaAttributesT A wrapper class for the meta attributes of a geometries. </li> </ul> </li> <li>class GeometryAtlas </li> <li>class GeometryAtlasCommit </li> <li>class GeometryCollection </li> <li>class GeometryCollectionCommit </li> <li>class GeometryCommit </li> <li>class GeometryFactory </li> <li>class GeometryFriend </li> <li>class GeometryIOError </li> <li>class GeometrySlot </li> <li>class GeometrySlotT </li> <li>class GeometrySlotT&lt; Geometry &gt; </li> <li>class IAttribute An abstract class to represent a geometries attribute. </li> <li>class IAttributeSlot An abstract class to represent a geometries attribute slot in a geometries attribute collection. </li> <li>class IGeometry An abstract class for geometries. </li> <li>class IGeometryCollection </li> <li>class ImplicitGeometry </li> <li>class Octree </li> <li>class SerialSharedAttributeContext </li> <li>class SimplexUtils </li> <li>class SimplicialComplex A simplicial complex is a collection of simplices. </li> <li>class SimplicialComplexAttributes </li> <li>class SimplicialComplexIO A class for reading and writing simplicial complex. </li> <li>class SpreadSheetIO A class for writing geometry spreadsheet. </li> <li>namespace affine_body </li> </ul> </li> <li>namespace gui </li> <li>class is_matrix </li> <li>class is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; </li> <li>namespace pmr </li> <li>struct propagate_const </li> <li>namespace sanity_check </li> <li>struct signature </li> <li>struct signature&lt; R(&amp;)(Args...)&gt; </li> <li>struct signature&lt; R(*)(Args...)&gt; </li> <li>struct signature&lt; R(Args...)&gt; </li> <li>struct signature&lt; R(C::*)(Args...) &amp;&amp; &gt; </li> <li>struct signature&lt; R(C::*)(Args...) const &gt; </li> <li>struct signature&lt; R(C::*)(Args...) const volatile &gt; </li> <li>struct signature&lt; R(C::*)(Args...) volatile &gt; </li> <li>struct signature&lt; R(C::*)(Args...)&gt; </li> </ul> </li> <li>struct MergeResult </li> </ul>"},{"location":"Libuipc/files/","title":"Files","text":""},{"location":"Libuipc/files/#file-list","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir include <ul> <li>dir uipc <ul> <li>file core.h </li> <li>file geometry.h </li> <li>dir backend <ul> <li>file buffer.h </li> <li>file buffer_view.h </li> <li>file engine_create_info.h </li> <li>dir visitors <ul> <li>file animator_visitor.h </li> <li>file contact_tabular_visitor.h </li> <li>file diff_sim_visitor.h </li> <li>file geometry_visitor.h </li> <li>file sanity_check_message_visitor.h </li> <li>file scene_visitor.h </li> <li>file world_visitor.h </li> </ul> </li> <li>file macro.h </li> <li>file module_init_info.h </li> <li>file type_define.h </li> </ul> </li> <li>dir builtin <ul> <li>file attribute_name.h </li> <li>file constitution_type.h </li> <li>file constitution_uid_auto_register.h </li> <li>file constitution_uid_collection.h </li> <li>file factory_keyword.h </li> <li>file geometry_type.h </li> <li>file implicit_geometry_uid_auto_register.h </li> <li>file implicit_geometry_uid_collection.h </li> <li>dir details <ul> <li>file attribute_name.h This file records all the built-in attribute names in the libuipc specification. </li> <li>file backend_name.h This file records all the built-in backend names in the libuipc specification. </li> </ul> </li> <li>file uid_info.h </li> <li>file uid_register.h </li> </ul> </li> <li>dir common <ul> <li>file allocator.h </li> <li>file buffer_info.h </li> <li>file config.h </li> <li>file dllexport.h </li> <li>file enumerate.h </li> <li>file exception.h </li> <li>file fmt_eigen.h </li> <li>file format.h </li> <li>dir algorithm <ul> <li>file run_length_encode.h </li> </ul> </li> <li>file json.h </li> <li>file json_eigen.h </li> <li>file list.h </li> <li>file log.h </li> <li>file log_pattern_guard.h </li> <li>file macro.h </li> <li>file map.h </li> <li>file range.h </li> <li>file readable_type_name.h </li> <li>file set.h </li> <li>file smart_pointer.h </li> <li>file span.h </li> <li>file span_as_eigen.h </li> <li>file stack.h </li> <li>file string.h </li> <li>file timer.h </li> <li>file type_define.h </li> <li>file type_traits.h </li> <li>file uipc.h </li> <li>file unit.h </li> <li>file unordered_map.h </li> <li>file vector.h </li> <li>file zip.h </li> </ul> </li> <li>dir constitution <ul> <li>file affine_body_constitution.h </li> <li>file arap.h </li> <li>file baraff_witkin_shell.h </li> <li>file constitution.h </li> <li>file constraint.h </li> <li>file conversion.h </li> <li>file discrete_shell_bending.h </li> <li>file elastic_moduli.h </li> <li>file empty.h </li> <li>file finite_element_constitution.h </li> <li>file finite_element_extra_constitution.h </li> <li>file hookean_spring.h </li> <li>file kirchhoff_rod_bending.h </li> <li>file neo_hookean_shell.h </li> <li>file particle.h </li> <li>file soft_position_constraint.h </li> <li>file soft_transform_constraint.h </li> <li>file stable_neo_hookean.h </li> </ul> </li> <li>dir core <ul> <li>file animation.h </li> <li>file animator.h </li> <li>file constitution_tabular.h </li> <li>file contact_element.h </li> <li>file contact_model.h </li> <li>file contact_model_collection.h </li> <li>file contact_tabular.h </li> <li>file diff_sim.h </li> <li>file engine.h </li> <li>file engine_status.h </li> <li>file feature.h </li> <li>file feature_collection.h </li> <li>file i_engine.h </li> <li>file i_sanity_checker.h </li> <li>dir internal <ul> <li>file engine.h </li> <li>file scene.h </li> <li>file world.h </li> </ul> </li> <li>file object.h </li> <li>file object_collection.h </li> <li>file object_snapshot.h </li> <li>file sanity_checker.h </li> <li>file scene.h </li> <li>file scene_archieve.h </li> <li>file scene_factory.h </li> <li>file scene_snapshot.h </li> <li>file world.h </li> </ul> </li> <li>dir diff_sim <ul> <li>file adjoint_method_feature.h </li> <li>file enable_grad_feature.h </li> <li>file parameter_collection.h </li> <li>file sparse_coo_view.h </li> </ul> </li> <li>dir geometry <ul> <li>file abstract_simplicial_complex.h </li> <li>file attribute.h </li> <li>file attribute_collection.h </li> <li>file attribute_collection_commit.h </li> <li>file attribute_collection_factory.h </li> <li>file attribute_copy.h </li> <li>file attribute_factory.h </li> <li>file attribute_friend.h </li> <li>file attribute_slot.h </li> <li>file geometry.h </li> <li>file geometry_atlas.h </li> <li>file geometry_collection.h </li> <li>file geometry_collection_commit.h </li> <li>file geometry_commit.h </li> <li>file geometry_factory.h </li> <li>file geometry_friend.h </li> <li>file geometry_slot.h </li> <li>file implicit_geometry.h </li> <li>file implicit_geometry_slot.h </li> <li>dir utils <ul> <li>file apply_region.h </li> <li>file apply_transform.h </li> <li>file bvh.h </li> <li>file closure.h </li> <li>file compute_instance_volume.h </li> <li>file compute_vertex_volume.h </li> <li>file distance.h </li> <li>file extract_surface.h </li> <li>file factory.h </li> <li>file flip_inward_triangles.h </li> <li>dir affine_body <ul> <li>file compute_body_force.h </li> <li>file compute_dyadic_mass.h </li> </ul> </li> <li>file intersection.h </li> <li>file is_trimesh_closed.h </li> <li>file label_connected_vertices.h </li> <li>file label_region.h </li> <li>file label_surface.h </li> <li>file label_triangle_orient.h </li> <li>file merge.h </li> <li>file mesh_partition.h </li> <li>file octree.h </li> <li>file optimal_transform.h </li> <li>file simplex_utils.h </li> <li>file tetrahedralize.h </li> </ul> </li> <li>file shared_attribute_context.h </li> <li>file simplicial_complex.h </li> <li>file simplicial_complex_attributes.h </li> <li>file simplicial_complex_slot.h </li> <li>file utils.h </li> </ul> </li> <li>dir io <ul> <li>file attribute_io.h </li> <li>file gltf_io.h </li> <li>file scene_io.h </li> <li>file simplicial_complex_io.h </li> <li>file spread_sheet_io.h </li> <li>file urdf_io.h </li> </ul> </li> <li>file io.h </li> <li>file uipc.h </li> </ul> </li> <li>dir uipc_gui <ul> <li>dir common <ul> <li>file platform_handle.h </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Libuipc/class_u_i_p_c_module_init_info/","title":"Class UIPCModuleInitInfo","text":""},{"location":"Libuipc/class_u_i_p_c_module_init_info/#class-uipcmoduleinitinfo","title":"Class UIPCModuleInitInfo","text":"<p>ClassList &gt; UIPCModuleInitInfo</p>"},{"location":"Libuipc/class_u_i_p_c_module_init_info/#public-attributes","title":"Public Attributes","text":"Type Name std::pmr::memory_resource * memory_resource   = <code>nullptr</code> std::string_view module_name"},{"location":"Libuipc/class_u_i_p_c_module_init_info/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/class_u_i_p_c_module_init_info/#variable-memory_resource","title":"variable memory_resource","text":"<pre><code>std::pmr::memory_resource* UIPCModuleInitInfo::memory_resource;\n</code></pre>"},{"location":"Libuipc/class_u_i_p_c_module_init_info/#variable-module_name","title":"variable module_name","text":"<pre><code>std::string_view UIPCModuleInitInfo::module_name;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/module_init_info.h</code></p>"},{"location":"Libuipc/namespacefmt/","title":"Namespace fmt","text":""},{"location":"Libuipc/namespacefmt/#namespace-fmt","title":"Namespace fmt","text":"<p>Namespace List &gt; fmt</p>"},{"location":"Libuipc/namespacefmt/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::core::Animation &gt; &lt;&gt; struct formatter&lt; uipc::core::Animator &gt; &lt;&gt; struct formatter&lt; uipc::core::Object &gt; &lt;&gt; struct formatter&lt; uipc::core::ObjectCollection &gt; &lt;&gt; struct formatter&lt; uipc::core::Scene &gt; &lt;&gt; struct formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt; &lt;&gt; struct formatter&lt; uipc::geometry::AttributeCollection &gt; &lt;&gt; struct formatter&lt; uipc::geometry::Geometry &gt; &lt;&gt; struct formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt; &lt;IsConst&gt; struct formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt; &lt;IsConst&gt; struct formatter&lt; uipc::geometry::ImplicitGeometry &gt; &lt;&gt; struct formatter&lt; uipc::geometry::SimplicialComplex &gt; &lt;&gt; struct formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt; &lt;IsConst, N&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/core/animation.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animation_01_4/","title":"Struct fmt::formatter&lt; uipc::core::Animation &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animation_01_4/#struct-fmtformatter-uipccoreanimation","title":"Struct fmt::formatter&lt; uipc::core::Animation &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::core::Animation &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animation_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::core::Animation &amp; c, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animation_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animation_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::core::Animation &gt;::format (\n    const uipc::core::Animation &amp; c,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/animation.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animator_01_4/","title":"Struct fmt::formatter&lt; uipc::core::Animator &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animator_01_4/#struct-fmtformatter-uipccoreanimator","title":"Struct fmt::formatter&lt; uipc::core::Animator &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::core::Animator &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animator_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::core::Animator &amp; c, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animator_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_animator_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::core::Animator &gt;::format (\n    const uipc::core::Animator &amp; c,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/animator.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_01_4/","title":"Struct fmt::formatter&lt; uipc::core::Object &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_01_4/#struct-fmtformatter-uipccoreobject","title":"Struct fmt::formatter&lt; uipc::core::Object &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::core::Object &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::core::Object &amp; c, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::core::Object &gt;::format (\n    const uipc::core::Object &amp; c,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_collection_01_4/","title":"Struct fmt::formatter&lt; uipc::core::ObjectCollection &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_collection_01_4/#struct-fmtformatter-uipccoreobjectcollection","title":"Struct fmt::formatter&lt; uipc::core::ObjectCollection &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::core::ObjectCollection &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_collection_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::core::ObjectCollection &amp; c, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_collection_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_object_collection_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::core::ObjectCollection &gt;::format (\n    const uipc::core::ObjectCollection &amp; c,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object_collection.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_scene_01_4/","title":"Struct fmt::formatter&lt; uipc::core::Scene &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_scene_01_4/#struct-fmtformatter-uipccorescene","title":"Struct fmt::formatter&lt; uipc::core::Scene &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::core::Scene &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_scene_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::core::Scene &amp; c, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_scene_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1core_1_1_scene_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::core::Scene &gt;::format (\n    const uipc::core::Scene &amp; c,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_abstract_simplicial_complex_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_abstract_simplicial_complex_01_4/#struct-fmtformatter-uipcgeometryabstractsimplicialcomplex","title":"Struct fmt::formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_abstract_simplicial_complex_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::geometry::AbstractSimplicialComplex &amp; c, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_abstract_simplicial_complex_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_abstract_simplicial_complex_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt;::format (\n    const uipc::geometry::AbstractSimplicialComplex &amp; c,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/abstract_simplicial_complex.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_attribute_collection_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::AttributeCollection &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_attribute_collection_01_4/#struct-fmtformatter-uipcgeometryattributecollection","title":"Struct fmt::formatter&lt; uipc::geometry::AttributeCollection &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::AttributeCollection &gt;</p> <p>Inherits the following classes: formatter&lt; std::string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_attribute_collection_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::geometry::AttributeCollection &amp; collection, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_attribute_collection_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_attribute_collection_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::geometry::AttributeCollection &gt;::format (\n    const uipc::geometry::AttributeCollection &amp; collection,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::Geometry &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_01_4/#struct-fmtformatter-uipcgeometrygeometry","title":"Struct fmt::formatter&lt; uipc::geometry::Geometry &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::Geometry &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::geometry::Geometry &amp; geo, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::geometry::Geometry &gt;::format (\n    const uipc::geometry::Geometry &amp; geo,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t_3_01_is_const_01_4_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t_3_01_is_const_01_4_01_4/#struct-fmtformatter-uipcgeometrygeometryinstanceattributest-isconst","title":"Struct fmt::formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt;","text":"<p>template &lt;bool IsConst&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t_3_01_is_const_01_4_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &amp; attr, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t_3_01_is_const_01_4_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t_3_01_is_const_01_4_01_4/#function-format","title":"function format","text":"<pre><code>inline auto fmt::formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt;::format (\n    const uipc::geometry::Geometry::InstanceAttributesT &lt; IsConst &gt; &amp; attr,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t_3_01_is_const_01_4_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t_3_01_is_const_01_4_01_4/#struct-fmtformatter-uipcgeometrygeometrymetaattributest-isconst","title":"Struct fmt::formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt;","text":"<p>template &lt;bool IsConst&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t_3_01_is_const_01_4_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &amp; attr, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t_3_01_is_const_01_4_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t_3_01_is_const_01_4_01_4/#function-format","title":"function format","text":"<pre><code>inline auto fmt::formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt;::format (\n    const uipc::geometry::Geometry::MetaAttributesT &lt; IsConst &gt; &amp; attr,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_implicit_geometry_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::ImplicitGeometry &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_implicit_geometry_01_4/#struct-fmtformatter-uipcgeometryimplicitgeometry","title":"Struct fmt::formatter&lt; uipc::geometry::ImplicitGeometry &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::ImplicitGeometry &gt;</p> <p>Inherits the following classes: formatter&lt; std::string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_implicit_geometry_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::geometry::ImplicitGeometry &amp; geometry, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_implicit_geometry_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_implicit_geometry_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::geometry::ImplicitGeometry &gt;::format (\n    const uipc::geometry::ImplicitGeometry &amp; geometry,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/implicit_geometry.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::SimplicialComplex &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_01_4/#struct-fmtformatter-uipcgeometrysimplicialcomplex","title":"Struct fmt::formatter&lt; uipc::geometry::SimplicialComplex &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::SimplicialComplex &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::geometry::SimplicialComplex &amp; c, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_01_4/#function-format","title":"function format","text":"<pre><code>appender fmt::formatter&lt; uipc::geometry::SimplicialComplex &gt;::format (\n    const uipc::geometry::SimplicialComplex &amp; c,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/simplicial_complex.h</code></p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_attributes_3_01_is_const_00_01_n_01_4_01_4/","title":"Struct fmt::formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt;","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_attributes_3_01_is_const_00_01_n_01_4_01_4/#struct-fmtformatter-uipcgeometrysimplicialcomplexattributes-isconst-n","title":"Struct fmt::formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt;","text":"<p>template &lt;bool IsConst, uipc::IndexT N&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt;</p> <p>Inherits the following classes: formatter&lt; std::string_view &gt;</p>"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_attributes_3_01_is_const_00_01_n_01_4_01_4/#public-functions","title":"Public Functions","text":"Type Name appender format (const uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &amp; attributes, format_context &amp; ctx) const"},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_attributes_3_01_is_const_00_01_n_01_4_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structfmt_1_1formatter_3_01uipc_1_1geometry_1_1_simplicial_complex_attributes_3_01_is_const_00_01_n_01_4_01_4/#function-format","title":"function format","text":"<pre><code>inline appender fmt::formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt;::format (\n    const uipc::geometry::SimplicialComplexAttributes &lt; IsConst, N &gt; &amp; attributes,\n    format_context &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/simplicial_complex_attributes.h</code></p>"},{"location":"Libuipc/namespacenlohmann/","title":"Namespace nlohmann","text":""},{"location":"Libuipc/namespacenlohmann/#namespace-nlohmann","title":"Namespace nlohmann","text":"<p>Namespace List &gt; nlohmann</p>"},{"location":"Libuipc/namespacenlohmann/#classes","title":"Classes","text":"Type Name struct adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; &lt;typename Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/common/json_eigen.h</code></p>"},{"location":"Libuipc/structnlohmann_1_1adl__serializer_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_761cd29d85d72c4c15331d22893c1439/","title":"Struct nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;","text":""},{"location":"Libuipc/structnlohmann_1_1adl__serializer_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_761cd29d85d72c4c15331d22893c1439/#struct-nlohmannadl_serializer-eigenmatrix-scalar-rows-cols-options-maxrows-maxcols","title":"Struct nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;","text":"<p>template &lt;typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols&gt;</p> <p>ClassList &gt; nlohmann &gt; adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;</p>"},{"location":"Libuipc/structnlohmann_1_1adl__serializer_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_761cd29d85d72c4c15331d22893c1439/#public-static-functions","title":"Public Static Functions","text":"Type Name void from_json (const json &amp; j, Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &amp; m)  void to_json (json &amp; j, const Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &amp; m)"},{"location":"Libuipc/structnlohmann_1_1adl__serializer_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_761cd29d85d72c4c15331d22893c1439/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/structnlohmann_1_1adl__serializer_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_761cd29d85d72c4c15331d22893c1439/#function-from_json","title":"function from_json","text":"<pre><code>static void nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;::from_json (\n    const json &amp; j,\n    Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &amp; m\n) \n</code></pre>"},{"location":"Libuipc/structnlohmann_1_1adl__serializer_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_761cd29d85d72c4c15331d22893c1439/#function-to_json","title":"function to_json","text":"<pre><code>static void nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;::to_json (\n    json &amp; j,\n    const Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &amp; m\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/json_eigen.h</code></p>"},{"location":"Libuipc/namespacestd/","title":"Namespace std","text":""},{"location":"Libuipc/namespacestd/#namespace-std","title":"Namespace std","text":"<p>Namespace List &gt; std</p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_slot.h</code></p>"},{"location":"Libuipc/namespaceuipc/","title":"Namespace uipc","text":""},{"location":"Libuipc/namespaceuipc/#namespace-uipc","title":"Namespace uipc","text":"<p>Namespace List &gt; uipc</p>"},{"location":"Libuipc/namespaceuipc/#namespaces","title":"Namespaces","text":"Type Name namespace backend namespace builtin namespace constitution namespace core namespace details namespace diff_sim namespace geometry namespace gui namespace pmr namespace sanity_check"},{"location":"Libuipc/namespaceuipc/#classes","title":"Classes","text":"Type Name class BufferInfo class Exception class GlobalTimer class JsonIOError class LogPatternGuard struct PmrDeleter &lt;typename T&gt; class Timer class is_matrix &lt;typename MatrixT&gt; class is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; &lt;typename Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt; struct propagate_const &lt;typename T, typename DstT&gt; struct signature &lt;typename Sig&gt; struct signature&lt; R(&amp;)(Args...)&gt; &lt;typename R, Args&gt; struct signature&lt; R(*)(Args...)&gt; &lt;typename R, Args&gt; struct signature&lt; R(Args...)&gt; &lt;typename R, Args&gt; struct signature&lt; R(C::*)(Args...) &amp;&amp; &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...) const &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...) const volatile &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...) volatile &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...)&gt; &lt;typename R, typename C, Args&gt;"},{"location":"Libuipc/namespaceuipc/#public-types","title":"Public Types","text":"Type Name typedef std::pmr::polymorphic_allocator&lt; T &gt; Allocator typedef double Float typedef int32_t I32 typedef int64_t I64 typedef int32_t IndexT typedef nlohmann::json Json typedef Matrix&lt; Float, 12, 12 &gt; Matrix12x12 typedef Matrix&lt; Float, 2, 2 &gt; Matrix2x2 typedef Matrix&lt; Float, 3, 3 &gt; Matrix3x3 typedef Matrix&lt; Float, 4, 4 &gt; Matrix4x4 typedef Matrix&lt; Float, 6, 6 &gt; Matrix6x6 typedef Matrix&lt; Float, 9, 9 &gt; Matrix9x9 typedef std::shared_ptr&lt; T &gt; S typedef std::size_t SizeT typedef Eigen::Transform&lt; Float, 3, Eigen::Affine &gt; Transform typedef Eigen::Translation&lt; Float, 3 &gt; Translation typedef std::unique_ptr&lt; T, PmrDeleter&lt; T &gt; &gt; U typedef uint32_t U32 typedef uint64_t U64 typedef Vector&lt; Float, 12 &gt; Vector12 typedef Vector&lt; Float, 2 &gt; Vector2 typedef Vector&lt; IndexT, 2 &gt; Vector2i typedef Vector&lt; Float, 3 &gt; Vector3 typedef Vector&lt; IndexT, 3 &gt; Vector3i typedef Vector&lt; Float, 4 &gt; Vector4 typedef Vector&lt; IndexT, 4 &gt; Vector4i typedef Vector&lt; Float, 6 &gt; Vector6 typedef Vector&lt; Float, 9 &gt; Vector9 typedef Eigen::VectorX&lt; Float &gt; VectorX typedef Eigen::VectorX&lt; IndexT &gt; VectorXi typedef Eigen::VectorX&lt; I64 &gt; VectorXi64 typedef Eigen::VectorX&lt; U32 &gt; VectorXu typedef Eigen::VectorX&lt; U64 &gt; VectorXu64 typedef std::weak_ptr&lt; T &gt; W typedef typename propagate_const&lt; T, DstT &gt;::type propagate_const_t typedef typename signature&lt; Sig &gt;::type signature_t typedef std::stack&lt; T, std::pmr::deque&lt; T &gt; &gt; stack"},{"location":"Libuipc/namespaceuipc/#public-attributes","title":"Public Attributes","text":"Type Name bool RUNTIME_CHECK   = <code>false</code> bool is_matrix_v   = <code>[**is\\_matrix**](classuipc_1_1is__matrix.md)&amp;lt;MatrixT&amp;gt;::value</code>"},{"location":"Libuipc/namespaceuipc/#public-functions","title":"Public Functions","text":"Type Name READABLE_TYPE_NAME_AS_ALIAS (Vector2)  READABLE_TYPE_NAME_AS_ALIAS (Vector3)  READABLE_TYPE_NAME_AS_ALIAS (Vector4)  READABLE_TYPE_NAME_AS_ALIAS (Vector2i)  READABLE_TYPE_NAME_AS_ALIAS (Vector3i)  READABLE_TYPE_NAME_AS_ALIAS (Vector4i)  READABLE_TYPE_NAME_AS_ALIAS (Vector6)  READABLE_TYPE_NAME_AS_ALIAS (Vector9)  READABLE_TYPE_NAME_AS_ALIAS (Vector12)  READABLE_TYPE_NAME_AS_ALIAS (Matrix2x2)  READABLE_TYPE_NAME_AS_ALIAS (Matrix3x3)  READABLE_TYPE_NAME_AS_ALIAS (Matrix4x4)  READABLE_TYPE_NAME_AS_ALIAS (Matrix6x6)  READABLE_TYPE_NAME_AS_ALIAS (Matrix9x9)  READABLE_TYPE_NAME_AS_ALIAS (Matrix12x12)  READABLE_TYPE_NAME_AS_ALIAS (VectorX)  READABLE_TYPE_NAME_AS_ALIAS (VectorXi)  READABLE_TYPE_NAME_AS_ALIAS (VectorXi64)  READABLE_TYPE_NAME_AS_ALIAS (VectorXu)  READABLE_TYPE_NAME_AS_ALIAS (VectorXu64)  auto as_eigen (span&lt; T &gt; s)  UIPC_CORE_API const Json &amp; config ()  UIPC_CORE_API Json default_config ()  size_t encode_offset_count (RandIt first, RandIt last, OffsetCountIt offsets, OffsetCountIt counts, Pred &amp;&amp; pred)  auto encode_offset_count (RandIt first, RandIt last, OffsetCountIt offset, OffsetCountIt count)  UIPC_CORE_API void init (const Json &amp; config)  S&lt; T &gt; make_shared (Args &amp;&amp;... args)  U&lt; T &gt; make_unique (Args &amp;&amp;... args)  long double operator\"\"_GPa (long double value) Pascal literal operator (GPa) long double operator\"\"_MPa (long double value) Pascal literal operator (MPa) long double operator\"\"_N (long double value) Newton literal operator. long double operator\"\"_Pa (long double value) Pascal literal operator. long double operator\"\"_kPa (long double value) Pascal literal operator (kPa) long double operator\"\"_km (long double value) Meter literal operator (km) long double operator\"\"_m (long double value) Meter literal operator. long double operator\"\"_mm (long double value) Meter literal operator (mm) long double operator\"\"_ms (long double value) Second literal operator (ms) long double operator\"\"_s (long double value) Second literal operator. std::string readable_type_name () noexcept std::size_t run_length_encode (InputIt in_first, InputIt in_last, OutputIt out_unique, OutputCountIt out_counts, Pred &amp;&amp; pred) Run-length encode the input range, the input range must be sorted. auto run_length_encode (InputIt in_first, InputIt in_last, OutputIt out_unique, OutputCountIt out_counts)  U&lt; DstT &gt; static_pointer_cast (U&lt; SrcT &gt; &amp;&amp; src)  UIPC_IO_API int test_gltf (std::string_view path)"},{"location":"Libuipc/namespaceuipc/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/namespaceuipc/#typedef-allocator","title":"typedef Allocator","text":"<pre><code>using uipc::Allocator =  std::pmr::polymorphic_allocator&lt;T&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-float","title":"typedef Float","text":"<pre><code>using uipc::Float =  double;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-i32","title":"typedef I32","text":"<pre><code>using uipc::I32 =  int32_t;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-i64","title":"typedef I64","text":"<pre><code>using uipc::I64 =  int64_t;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-indext","title":"typedef IndexT","text":"<pre><code>using uipc::IndexT =  int32_t;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-json","title":"typedef Json","text":"<pre><code>using uipc::Json =  nlohmann::json;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-matrix12x12","title":"typedef Matrix12x12","text":"<pre><code>using uipc::Matrix12x12 =  Matrix&lt;Float, 12, 12&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-matrix2x2","title":"typedef Matrix2x2","text":"<pre><code>using uipc::Matrix2x2 =  Matrix&lt;Float, 2, 2&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-matrix3x3","title":"typedef Matrix3x3","text":"<pre><code>using uipc::Matrix3x3 =  Matrix&lt;Float, 3, 3&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-matrix4x4","title":"typedef Matrix4x4","text":"<pre><code>using uipc::Matrix4x4 =  Matrix&lt;Float, 4, 4&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-matrix6x6","title":"typedef Matrix6x6","text":"<pre><code>using uipc::Matrix6x6 =  Matrix&lt;Float, 6, 6&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-matrix9x9","title":"typedef Matrix9x9","text":"<pre><code>using uipc::Matrix9x9 =  Matrix&lt;Float, 9, 9&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-s","title":"typedef S","text":"<pre><code>using uipc::S =  std::shared_ptr&lt;T&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-sizet","title":"typedef SizeT","text":"<pre><code>using uipc::SizeT =  std::size_t;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-transform","title":"typedef Transform","text":"<pre><code>using uipc::Transform =  Eigen::Transform&lt;Float, 3, Eigen::Affine&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-translation","title":"typedef Translation","text":"<pre><code>using uipc::Translation =  Eigen::Translation&lt;Float, 3&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-u","title":"typedef U","text":"<pre><code>using uipc::U =  std::unique_ptr&lt;T, PmrDeleter&lt;T&gt;&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-u32","title":"typedef U32","text":"<pre><code>using uipc::U32 =  uint32_t;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-u64","title":"typedef U64","text":"<pre><code>using uipc::U64 =  uint64_t;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector12","title":"typedef Vector12","text":"<pre><code>using uipc::Vector12 =  Vector&lt;Float, 12&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector2","title":"typedef Vector2","text":"<pre><code>using uipc::Vector2 =  Vector&lt;Float, 2&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector2i","title":"typedef Vector2i","text":"<pre><code>using uipc::Vector2i =  Vector&lt;IndexT, 2&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector3","title":"typedef Vector3","text":"<pre><code>using uipc::Vector3 =  Vector&lt;Float, 3&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector3i","title":"typedef Vector3i","text":"<pre><code>using uipc::Vector3i =  Vector&lt;IndexT, 3&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector4","title":"typedef Vector4","text":"<pre><code>using uipc::Vector4 =  Vector&lt;Float, 4&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector4i","title":"typedef Vector4i","text":"<pre><code>using uipc::Vector4i =  Vector&lt;IndexT, 4&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector6","title":"typedef Vector6","text":"<pre><code>using uipc::Vector6 =  Vector&lt;Float, 6&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vector9","title":"typedef Vector9","text":"<pre><code>using uipc::Vector9 =  Vector&lt;Float, 9&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vectorx","title":"typedef VectorX","text":"<pre><code>using uipc::VectorX =  Eigen::VectorX&lt;Float&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vectorxi","title":"typedef VectorXi","text":"<pre><code>using uipc::VectorXi =  Eigen::VectorX&lt;IndexT&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vectorxi64","title":"typedef VectorXi64","text":"<pre><code>using uipc::VectorXi64 =  Eigen::VectorX&lt;I64&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vectorxu","title":"typedef VectorXu","text":"<pre><code>using uipc::VectorXu =  Eigen::VectorX&lt;U32&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-vectorxu64","title":"typedef VectorXu64","text":"<pre><code>using uipc::VectorXu64 =  Eigen::VectorX&lt;U64&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-w","title":"typedef W","text":"<pre><code>using uipc::W =  std::weak_ptr&lt;T&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-propagate_const_t","title":"typedef propagate_const_t","text":"<pre><code>using uipc::propagate_const_t =  typename propagate_const&lt;T, DstT&gt;::type;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-signature_t","title":"typedef signature_t","text":"<pre><code>using uipc::signature_t =  typename signature&lt;Sig&gt;::type;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#typedef-stack","title":"typedef stack","text":"<pre><code>using uipc::stack =  std::stack&lt;T, std::pmr::deque&lt;T&gt;&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/namespaceuipc/#variable-runtime_check","title":"variable RUNTIME_CHECK","text":"<pre><code>bool uipc::RUNTIME_CHECK;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#variable-is_matrix_v","title":"variable is_matrix_v","text":"<pre><code>bool uipc::is_matrix_v;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector2\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_1","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector3\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_2","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector4\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_3","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector2i\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_4","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector3i\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_5","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector4i\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_6","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector6\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_7","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector9\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_8","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Vector12\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_9","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Matrix2x2\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_10","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Matrix3x3\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_11","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Matrix4x4\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_12","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Matrix6x6\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_13","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Matrix9x9\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_14","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    Matrix12x12\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_15","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    VectorX\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_16","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    VectorXi\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_17","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    VectorXi64\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_18","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    VectorXu\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name_as_alias_19","title":"function READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>uipc::READABLE_TYPE_NAME_AS_ALIAS (\n    VectorXu64\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-as_eigen","title":"function as_eigen","text":"<pre><code>template&lt;std::floating_point T&gt;\ninline auto uipc::as_eigen (\n    span&lt; T &gt; s\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-config","title":"function config","text":"<pre><code>UIPC_CORE_API const Json &amp; uipc::config () \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-default_config","title":"function default_config","text":"<pre><code>UIPC_CORE_API Json uipc::default_config () \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-encode_offset_count","title":"function encode_offset_count","text":"<pre><code>template&lt;typename RandIt, typename OffsetCountIt, typename Pred&gt;\nsize_t uipc::encode_offset_count (\n    RandIt first,\n    RandIt last,\n    OffsetCountIt offsets,\n    OffsetCountIt counts,\n    Pred &amp;&amp; pred\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-encode_offset_count_1","title":"function encode_offset_count","text":"<pre><code>template&lt;typename RandIt, typename OffsetCountIt&gt;\nauto uipc::encode_offset_count (\n    RandIt first,\n    RandIt last,\n    OffsetCountIt offset,\n    OffsetCountIt count\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-init","title":"function init","text":"<pre><code>UIPC_CORE_API void uipc::init (\n    const Json &amp; config\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-make_shared","title":"function make_shared","text":"<pre><code>template&lt;typename T, typename... Args&gt;\nS&lt; T &gt; uipc::make_shared (\n    Args &amp;&amp;... args\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-make_unique","title":"function make_unique","text":"<pre><code>template&lt;typename T, typename... Args&gt;\nU&lt; T &gt; uipc::make_unique (\n    Args &amp;&amp;... args\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_gpa","title":"function operator\"\"_GPa","text":"<p>Pascal literal operator (GPa) </p><pre><code>long double uipc::operator\"\"_GPa (\n    long double value\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_mpa","title":"function operator\"\"_MPa","text":"<p>Pascal literal operator (MPa) </p><pre><code>long double uipc::operator\"\"_MPa (\n    long double value\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_n","title":"function operator\"\"_N","text":"<p>Newton literal operator. </p><pre><code>long double uipc::operator\"\"_N (\n    long double value\n) \n</code></pre> <pre><code>auto force = 1.0_N;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_pa","title":"function operator\"\"_Pa","text":"<p>Pascal literal operator. </p><pre><code>long double uipc::operator\"\"_Pa (\n    long double value\n) \n</code></pre> <pre><code>auto pressure = 1.0_Pa;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_kpa","title":"function operator\"\"_kPa","text":"<p>Pascal literal operator (kPa) </p><pre><code>long double uipc::operator\"\"_kPa (\n    long double value\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_km","title":"function operator\"\"_km","text":"<p>Meter literal operator (km) </p><pre><code>long double uipc::operator\"\"_km (\n    long double value\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_m","title":"function operator\"\"_m","text":"<p>Meter literal operator. </p><pre><code>long double uipc::operator\"\"_m (\n    long double value\n) \n</code></pre> <pre><code>auto length = 1.0_m;\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_mm","title":"function operator\"\"_mm","text":"<p>Meter literal operator (mm) </p><pre><code>long double uipc::operator\"\"_mm (\n    long double value\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_ms","title":"function operator\"\"_ms","text":"<p>Second literal operator (ms) </p><pre><code>long double uipc::operator\"\"_ms (\n    long double value\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-operator_s","title":"function operator\"\"_s","text":"<p>Second literal operator. </p><pre><code>long double uipc::operator\"\"_s (\n    long double value\n) \n</code></pre> <ul> <li> <li><code>cpp</code></li> <li><code>auto time = 1.0_s; *</code> </li>"},{"location":"Libuipc/namespaceuipc/#function-readable_type_name","title":"function readable_type_name","text":"<pre><code>template&lt;typename T&gt;\ninline std::string uipc::readable_type_name () noexcept\n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-run_length_encode","title":"function run_length_encode","text":"<p>Run-length encode the input range, the input range must be sorted. </p><pre><code>template&lt;typename InputIt, typename OutputIt, typename OutputCountIt, typename Pred&gt;\nstd::size_t uipc::run_length_encode (\n    InputIt in_first,\n    InputIt in_last,\n    OutputIt out_unique,\n    OutputCountIt out_counts,\n    Pred &amp;&amp; pred\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>in_first</code> Input iterator to the beginning of the input range </li> <li><code>in_last</code> Input iterator to the end of the input range </li> <li><code>out_unique</code> Output iterator to the beginning of the unique values </li> <li><code>out_counts</code> Output iterator to the beginning of the counts of the unique values</li> </ul> <p>Returns:</p> <p>std::size_t The number of unique values </p>"},{"location":"Libuipc/namespaceuipc/#function-run_length_encode_1","title":"function run_length_encode","text":"<pre><code>template&lt;typename InputIt, typename OutputIt, typename OutputCountIt&gt;\nauto uipc::run_length_encode (\n    InputIt in_first,\n    InputIt in_last,\n    OutputIt out_unique,\n    OutputCountIt out_counts\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-static_pointer_cast","title":"function static_pointer_cast","text":"<pre><code>template&lt;typename DstT, typename SrcT&gt;\nU&lt; DstT &gt; uipc::static_pointer_cast (\n    U&lt; SrcT &gt; &amp;&amp; src\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc/#function-test_gltf","title":"function test_gltf","text":"<pre><code>UIPC_IO_API int uipc::test_gltf (\n    std::string_view path\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/buffer.h</code></p>"},{"location":"Libuipc/classuipc_1_1_buffer_info/","title":"Class uipc::BufferInfo","text":""},{"location":"Libuipc/classuipc_1_1_buffer_info/#class-uipcbufferinfo","title":"Class uipc::BufferInfo","text":"<p>ClassList &gt; uipc &gt; BufferInfo</p>"},{"location":"Libuipc/classuipc_1_1_buffer_info/#public-attributes","title":"Public Attributes","text":"Type Name void * data size_t itemsize vector&lt; int64_t &gt; shape vector&lt; int64_t &gt; strides"},{"location":"Libuipc/classuipc_1_1_buffer_info/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1_buffer_info/#variable-data","title":"variable data","text":"<pre><code>void* uipc::BufferInfo::data;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1_buffer_info/#variable-itemsize","title":"variable itemsize","text":"<pre><code>size_t uipc::BufferInfo::itemsize;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1_buffer_info/#variable-shape","title":"variable shape","text":"<pre><code>vector&lt;int64_t&gt; uipc::BufferInfo::shape;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1_buffer_info/#variable-strides","title":"variable strides","text":"<pre><code>vector&lt;int64_t&gt; uipc::BufferInfo::strides;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/buffer_info.h</code></p>"},{"location":"Libuipc/classuipc_1_1_exception/","title":"Class uipc::Exception","text":""},{"location":"Libuipc/classuipc_1_1_exception/#class-uipcexception","title":"Class uipc::Exception","text":"<p>ClassList &gt; uipc &gt; Exception</p> <p>Inherits the following classes: std::exception</p> <p>Inherited by the following classes: uipc::JsonIOError,  uipc::core::EngineException,  uipc::core::SceneIOError,  uipc::geometry::AttributeCollectionError,  uipc::geometry::AttributeIOError,  uipc::geometry::GeometryIOError</p>"},{"location":"Libuipc/classuipc_1_1_exception/#public-functions","title":"Public Functions","text":"Type Name Exception (const string &amp; msg)  virtual const char * what () noexcept override const"},{"location":"Libuipc/classuipc_1_1_exception/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1_exception/#function-exception","title":"function Exception","text":"<pre><code>uipc::Exception::Exception (\n    const string &amp; msg\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_exception/#function-what","title":"function what","text":"<pre><code>virtual const char * uipc::Exception::what () noexcept override const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/exception.h</code></p>"},{"location":"Libuipc/classuipc_1_1_global_timer/","title":"Class uipc::GlobalTimer","text":""},{"location":"Libuipc/classuipc_1_1_global_timer/#class-uipcglobaltimer","title":"Class uipc::GlobalTimer","text":"<p>ClassList &gt; uipc &gt; GlobalTimer</p>"},{"location":"Libuipc/classuipc_1_1_global_timer/#public-functions","title":"Public Functions","text":"Type Name GlobalTimer (std::string_view name=\"GlobalTimer\")  GlobalTimer (const GlobalTimer &amp;) = delete void clear ()  GlobalTimer &amp; operator= (const GlobalTimer &amp;) = delete void print_merged_timings (std::ostream &amp; o=std::cout)  void print_timings (std::ostream &amp; o=std::cout)  Json report_as_json ()  Json report_merged_as_json ()  void set_as_current ()  ~GlobalTimer ()"},{"location":"Libuipc/classuipc_1_1_global_timer/#public-static-functions","title":"Public Static Functions","text":"Type Name GlobalTimer * current ()"},{"location":"Libuipc/classuipc_1_1_global_timer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1_global_timer/#function-globaltimer-12","title":"function GlobalTimer [1/2]","text":"<pre><code>uipc::GlobalTimer::GlobalTimer (\n    std::string_view name=\"GlobalTimer\"\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-globaltimer-22","title":"function GlobalTimer [2/2]","text":"<pre><code>uipc::GlobalTimer::GlobalTimer (\n    const GlobalTimer &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-clear","title":"function clear","text":"<pre><code>void uipc::GlobalTimer::clear () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-operator","title":"function operator=","text":"<pre><code>GlobalTimer &amp; uipc::GlobalTimer::operator= (\n    const GlobalTimer &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-print_merged_timings","title":"function print_merged_timings","text":"<pre><code>void uipc::GlobalTimer::print_merged_timings (\n    std::ostream &amp; o=std::cout\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-print_timings","title":"function print_timings","text":"<pre><code>void uipc::GlobalTimer::print_timings (\n    std::ostream &amp; o=std::cout\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-report_as_json","title":"function report_as_json","text":"<pre><code>Json uipc::GlobalTimer::report_as_json () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-report_merged_as_json","title":"function report_merged_as_json","text":"<pre><code>Json uipc::GlobalTimer::report_merged_as_json () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-set_as_current","title":"function set_as_current","text":"<pre><code>void uipc::GlobalTimer::set_as_current () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#function-globaltimer","title":"function ~GlobalTimer","text":"<pre><code>uipc::GlobalTimer::~GlobalTimer () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_global_timer/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1_global_timer/#function-current","title":"function current","text":"<pre><code>static GlobalTimer * uipc::GlobalTimer::current () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/timer.h</code></p>"},{"location":"Libuipc/classuipc_1_1_json_i_o_error/","title":"Class uipc::JsonIOError","text":""},{"location":"Libuipc/classuipc_1_1_json_i_o_error/#class-uipcjsonioerror","title":"Class uipc::JsonIOError","text":"<p>ClassList &gt; uipc &gt; JsonIOError</p> <p>Inherits the following classes: uipc::Exception</p>"},{"location":"Libuipc/classuipc_1_1_json_i_o_error/#public-functions","title":"Public Functions","text":"Type Name Exception (const string &amp; msg)"},{"location":"Libuipc/classuipc_1_1_json_i_o_error/#public-functions-inherited-from-uipcexception","title":"Public Functions inherited from uipc::Exception","text":"<p>See uipc::Exception</p> Type Name Exception (const string &amp; msg)  virtual const char * what () noexcept override const"},{"location":"Libuipc/classuipc_1_1_json_i_o_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1_json_i_o_error/#function-exception","title":"function Exception","text":"<pre><code>uipc::JsonIOError::Exception (\n    const string &amp; msg\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/json_eigen.h</code></p>"},{"location":"Libuipc/classuipc_1_1_log_pattern_guard/","title":"Class uipc::LogPatternGuard","text":""},{"location":"Libuipc/classuipc_1_1_log_pattern_guard/#class-uipclogpatternguard","title":"Class uipc::LogPatternGuard","text":"<p>ClassList &gt; uipc &gt; LogPatternGuard</p>"},{"location":"Libuipc/classuipc_1_1_log_pattern_guard/#public-functions","title":"Public Functions","text":"Type Name LogPatternGuard (std::string_view pattern) noexcept ~LogPatternGuard () noexcept"},{"location":"Libuipc/classuipc_1_1_log_pattern_guard/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1_log_pattern_guard/#function-logpatternguard","title":"function LogPatternGuard","text":"<pre><code>uipc::LogPatternGuard::LogPatternGuard (\n    std::string_view pattern\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1_log_pattern_guard/#function-logpatternguard_1","title":"function ~LogPatternGuard","text":"<pre><code>uipc::LogPatternGuard::~LogPatternGuard () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/log_pattern_guard.h</code></p>"},{"location":"Libuipc/structuipc_1_1_pmr_deleter/","title":"Struct uipc::PmrDeleter","text":""},{"location":"Libuipc/structuipc_1_1_pmr_deleter/#struct-uipcpmrdeleter","title":"Struct uipc::PmrDeleter","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; uipc &gt; PmrDeleter</p>"},{"location":"Libuipc/structuipc_1_1_pmr_deleter/#public-types","title":"Public Types","text":"Type Name typedef uipc::Allocator&lt; T &gt; Allocator"},{"location":"Libuipc/structuipc_1_1_pmr_deleter/#public-functions","title":"Public Functions","text":"Type Name void operator() (T * ptr) const"},{"location":"Libuipc/structuipc_1_1_pmr_deleter/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/structuipc_1_1_pmr_deleter/#typedef-allocator","title":"typedef Allocator","text":"<pre><code>using uipc::PmrDeleter&lt; T &gt;::Allocator =  uipc::Allocator&lt;T&gt;;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1_pmr_deleter/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structuipc_1_1_pmr_deleter/#function-operator","title":"function operator()","text":"<pre><code>void uipc::PmrDeleter::operator() (\n    T * ptr\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/smart_pointer.h</code></p>"},{"location":"Libuipc/classuipc_1_1_timer/","title":"Class uipc::Timer","text":""},{"location":"Libuipc/classuipc_1_1_timer/#class-uipctimer","title":"Class uipc::Timer","text":"<p>ClassList &gt; uipc &gt; Timer</p>"},{"location":"Libuipc/classuipc_1_1_timer/#public-functions","title":"Public Functions","text":"Type Name Timer (std::string_view blockName, bool force_on=false)  double elapsed () const ~Timer ()"},{"location":"Libuipc/classuipc_1_1_timer/#public-static-functions","title":"Public Static Functions","text":"Type Name void disable_all ()  void enable_all ()  void report (std::ostream &amp; o=std::cout)  Json report_as_json ()  void set_sync_func (std::function&lt; void()&gt; sync)"},{"location":"Libuipc/classuipc_1_1_timer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1_timer/#function-timer","title":"function Timer","text":"<pre><code>uipc::Timer::Timer (\n    std::string_view blockName,\n    bool force_on=false\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_timer/#function-elapsed","title":"function elapsed","text":"<pre><code>double uipc::Timer::elapsed () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1_timer/#function-timer_1","title":"function ~Timer","text":"<pre><code>uipc::Timer::~Timer () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_timer/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1_timer/#function-disable_all","title":"function disable_all","text":"<pre><code>static inline void uipc::Timer::disable_all () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_timer/#function-enable_all","title":"function enable_all","text":"<pre><code>static inline void uipc::Timer::enable_all () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_timer/#function-report","title":"function report","text":"<pre><code>static void uipc::Timer::report (\n    std::ostream &amp; o=std::cout\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_timer/#function-report_as_json","title":"function report_as_json","text":"<pre><code>static Json uipc::Timer::report_as_json () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1_timer/#function-set_sync_func","title":"function set_sync_func","text":"<pre><code>static inline void uipc::Timer::set_sync_func (\n    std::function&lt; void()&gt; sync\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/timer.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1backend/","title":"Namespace uipc::backend","text":""},{"location":"Libuipc/namespaceuipc_1_1backend/#namespace-uipcbackend","title":"Namespace uipc::backend","text":"<p>Namespace List &gt; uipc &gt; backend</p>"},{"location":"Libuipc/namespaceuipc_1_1backend/#classes","title":"Classes","text":"Type Name class AnimatorVisitor class Buffer class BufferView class ContactTabularVisitor class DiffSimVisitor class EngineCreateInfo class GeometryVisitor class SanityCheckMessageVisitor class SceneVisitor class WorldVisitor"},{"location":"Libuipc/namespaceuipc_1_1backend/#public-types","title":"Public Types","text":"Type Name typedef std::uint64_t HandleT"},{"location":"Libuipc/namespaceuipc_1_1backend/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1backend/#typedef-handlet","title":"typedef HandleT","text":"<pre><code>using uipc::backend::HandleT =  std::uint64_t;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/buffer.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/","title":"Class uipc::backend::AnimatorVisitor","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/#class-uipcbackendanimatorvisitor","title":"Class uipc::backend::AnimatorVisitor","text":"<p>ClassList &gt; uipc &gt; backend &gt; AnimatorVisitor</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/#public-functions","title":"Public Functions","text":"Type Name AnimatorVisitor (core::Animator &amp; animator) noexcept void init ()  SizeT substep () noexcept void update ()"},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/#function-animatorvisitor","title":"function AnimatorVisitor","text":"<pre><code>uipc::backend::AnimatorVisitor::AnimatorVisitor (\n    core::Animator &amp; animator\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/#function-init","title":"function init","text":"<pre><code>void uipc::backend::AnimatorVisitor::init () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/#function-substep","title":"function substep","text":"<pre><code>SizeT uipc::backend::AnimatorVisitor::substep () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_animator_visitor/#function-update","title":"function update","text":"<pre><code>void uipc::backend::AnimatorVisitor::update () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/animator_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer/","title":"Class uipc::backend::Buffer","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer/#class-uipcbackendbuffer","title":"Class uipc::backend::Buffer","text":"<p>ClassList &gt; uipc &gt; backend &gt; Buffer</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer/#public-functions","title":"Public Functions","text":"Type Name Buffer (std::function&lt; void(SizeT)&gt; resize_func, std::function&lt; BufferView()&gt; get_buffer_view_func)  void resize (SizeT size)  BufferView view () const"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer/#function-buffer","title":"function Buffer","text":"<pre><code>uipc::backend::Buffer::Buffer (\n    std::function&lt; void(SizeT)&gt; resize_func,\n    std::function&lt; BufferView ()&gt; get_buffer_view_func\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer/#function-resize","title":"function resize","text":"<pre><code>void uipc::backend::Buffer::resize (\n    SizeT size\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer/#function-view","title":"function view","text":"<pre><code>BufferView uipc::backend::Buffer::view () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/buffer.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/","title":"Class uipc::backend::BufferView","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#class-uipcbackendbufferview","title":"Class uipc::backend::BufferView","text":"<p>ClassList &gt; uipc &gt; backend &gt; BufferView</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#public-functions","title":"Public Functions","text":"Type Name BufferView () = default BufferView (HandleT handle, SizeT element_offset, SizeT element_count, SizeT element_size, SizeT element_stride, std::string_view backend_name) noexcept std::string_view backend () noexcept const SizeT element_size () noexcept const SizeT element_stride () noexcept const HandleT handle () noexcept const SizeT offset () noexcept const operator bool () noexcept const SizeT size () noexcept const SizeT size_in_bytes () noexcept const BufferView subview (SizeT offset, SizeT element_count) noexcept const"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-bufferview-12","title":"function BufferView [1/2]","text":"<pre><code>uipc::backend::BufferView::BufferView () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-bufferview-22","title":"function BufferView [2/2]","text":"<pre><code>uipc::backend::BufferView::BufferView (\n    HandleT handle,\n    SizeT element_offset,\n    SizeT element_count,\n    SizeT element_size,\n    SizeT element_stride,\n    std::string_view backend_name\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-backend","title":"function backend","text":"<pre><code>std::string_view uipc::backend::BufferView::backend () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-element_size","title":"function element_size","text":"<pre><code>SizeT uipc::backend::BufferView::element_size () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-element_stride","title":"function element_stride","text":"<pre><code>SizeT uipc::backend::BufferView::element_stride () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-handle","title":"function handle","text":"<pre><code>HandleT uipc::backend::BufferView::handle () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-offset","title":"function offset","text":"<pre><code>SizeT uipc::backend::BufferView::offset () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-operator-bool","title":"function operator bool","text":"<pre><code>uipc::backend::BufferView::operator bool () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-size","title":"function size","text":"<pre><code>SizeT uipc::backend::BufferView::size () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-size_in_bytes","title":"function size_in_bytes","text":"<pre><code>SizeT uipc::backend::BufferView::size_in_bytes () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_buffer_view/#function-subview","title":"function subview","text":"<pre><code>BufferView uipc::backend::BufferView::subview (\n    SizeT offset,\n    SizeT element_count\n) noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/buffer_view.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_contact_tabular_visitor/","title":"Class uipc::backend::ContactTabularVisitor","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_contact_tabular_visitor/#class-uipcbackendcontacttabularvisitor","title":"Class uipc::backend::ContactTabularVisitor","text":"<p>ClassList &gt; uipc &gt; backend &gt; ContactTabularVisitor</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_contact_tabular_visitor/#public-functions","title":"Public Functions","text":"Type Name ContactTabularVisitor (core::ContactTabular &amp; contact_tabular) noexcept geometry::AttributeCollection &amp; contact_models () noexcept"},{"location":"Libuipc/classuipc_1_1backend_1_1_contact_tabular_visitor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_contact_tabular_visitor/#function-contacttabularvisitor","title":"function ContactTabularVisitor","text":"<pre><code>inline uipc::backend::ContactTabularVisitor::ContactTabularVisitor (\n    core::ContactTabular &amp; contact_tabular\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_contact_tabular_visitor/#function-contact_models","title":"function contact_models","text":"<pre><code>geometry::AttributeCollection &amp; uipc::backend::ContactTabularVisitor::contact_models () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/contact_tabular_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/","title":"Class uipc::backend::DiffSimVisitor","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#class-uipcbackenddiffsimvisitor","title":"Class uipc::backend::DiffSimVisitor","text":"<p>ClassList &gt; uipc &gt; backend &gt; DiffSimVisitor</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#public-functions","title":"Public Functions","text":"Type Name DiffSimVisitor (core::DiffSim &amp; diff_sim)  diff_sim::ParameterCollection &amp; parameters ()  const diff_sim::ParameterCollection &amp; parameters () const core::DiffSim &amp; ref ()  ~DiffSimVisitor ()"},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#function-diffsimvisitor","title":"function DiffSimVisitor","text":"<pre><code>uipc::backend::DiffSimVisitor::DiffSimVisitor (\n    core::DiffSim &amp; diff_sim\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#function-parameters-12","title":"function parameters [1/2]","text":"<pre><code>diff_sim::ParameterCollection &amp; uipc::backend::DiffSimVisitor::parameters () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#function-parameters-22","title":"function parameters [2/2]","text":"<pre><code>const diff_sim::ParameterCollection &amp; uipc::backend::DiffSimVisitor::parameters () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#function-ref","title":"function ref","text":"<pre><code>core::DiffSim &amp; uipc::backend::DiffSimVisitor::ref () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_diff_sim_visitor/#function-diffsimvisitor_1","title":"function ~DiffSimVisitor","text":"<pre><code>uipc::backend::DiffSimVisitor::~DiffSimVisitor () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/diff_sim_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_engine_create_info/","title":"Class uipc::backend::EngineCreateInfo","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_engine_create_info/#class-uipcbackendenginecreateinfo","title":"Class uipc::backend::EngineCreateInfo","text":"<p>ClassList &gt; uipc &gt; backend &gt; EngineCreateInfo</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_engine_create_info/#public-attributes","title":"Public Attributes","text":"Type Name Json config std::string_view workspace"},{"location":"Libuipc/classuipc_1_1backend_1_1_engine_create_info/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_engine_create_info/#variable-config","title":"variable config","text":"<pre><code>Json uipc::backend::EngineCreateInfo::config;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_engine_create_info/#variable-workspace","title":"variable workspace","text":"<pre><code>std::string_view uipc::backend::EngineCreateInfo::workspace;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/engine_create_info.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_geometry_visitor/","title":"Class uipc::backend::GeometryVisitor","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_geometry_visitor/#class-uipcbackendgeometryvisitor","title":"Class uipc::backend::GeometryVisitor","text":"<p>ClassList &gt; uipc &gt; backend &gt; GeometryVisitor</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_geometry_visitor/#public-functions","title":"Public Functions","text":"Type Name GeometryVisitor (geometry::IGeometry &amp; geometry)  void collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; geometry::AttributeCollection * &gt; &amp; collections)"},{"location":"Libuipc/classuipc_1_1backend_1_1_geometry_visitor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_geometry_visitor/#function-geometryvisitor","title":"function GeometryVisitor","text":"<pre><code>uipc::backend::GeometryVisitor::GeometryVisitor (\n    geometry::IGeometry &amp; geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_geometry_visitor/#function-collect_attribute_collections","title":"function collect_attribute_collections","text":"<pre><code>void uipc::backend::GeometryVisitor::collect_attribute_collections (\n    vector&lt; std::string &gt; &amp; names,\n    vector&lt; geometry::AttributeCollection * &gt; &amp; collections\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/geometry_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/","title":"Class uipc::backend::SanityCheckMessageVisitor","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#class-uipcbackendsanitycheckmessagevisitor","title":"Class uipc::backend::SanityCheckMessageVisitor","text":"<p>ClassList &gt; uipc &gt; backend &gt; SanityCheckMessageVisitor</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#public-functions","title":"Public Functions","text":"Type Name SanityCheckMessageVisitor (core::SanityCheckMessage &amp; msg) noexcept auto &amp; geometries () noexcept const auto &amp; id () noexcept const auto &amp; message () noexcept const auto &amp; name () noexcept const auto &amp; result () noexcept const"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#function-sanitycheckmessagevisitor","title":"function SanityCheckMessageVisitor","text":"<pre><code>uipc::backend::SanityCheckMessageVisitor::SanityCheckMessageVisitor (\n    core::SanityCheckMessage &amp; msg\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#function-geometries","title":"function geometries","text":"<pre><code>inline auto &amp; uipc::backend::SanityCheckMessageVisitor::geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#function-id","title":"function id","text":"<pre><code>inline auto &amp; uipc::backend::SanityCheckMessageVisitor::id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#function-message","title":"function message","text":"<pre><code>inline auto &amp; uipc::backend::SanityCheckMessageVisitor::message () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#function-name","title":"function name","text":"<pre><code>inline auto &amp; uipc::backend::SanityCheckMessageVisitor::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_sanity_check_message_visitor/#function-result","title":"function result","text":"<pre><code>inline auto &amp; uipc::backend::SanityCheckMessageVisitor::result () noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/sanity_check_message_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/","title":"Class uipc::backend::SceneVisitor","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#class-uipcbackendscenevisitor","title":"Class uipc::backend::SceneVisitor","text":"<p>ClassList &gt; uipc &gt; backend &gt; SceneVisitor</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#public-functions","title":"Public Functions","text":"Type Name SceneVisitor (core::Scene &amp; scene) noexcept SceneVisitor (core::internal::Scene &amp; scene) noexcept SceneVisitor (const SceneVisitor &amp;) = delete SceneVisitor (SceneVisitor &amp;&amp;) = default void begin_pending () noexcept const core::ConstitutionTabular &amp; constitution_tabular () noexcept const core::ConstitutionTabular &amp; constitution_tabular () noexcept const core::ContactTabular &amp; contact_tabular () noexcept const core::ContactTabular &amp; contact_tabular () noexcept const DiffSimVisitor &amp; diff_sim () noexcept const DiffSimVisitor &amp; diff_sim () noexcept S&lt; geometry::GeometrySlot &gt; find_geometry (IndexT id) noexcept S&lt; geometry::GeometrySlot &gt; find_rest_geometry (IndexT id) noexcept span&lt; S&lt; geometry::GeometrySlot &gt; &gt; geometries () noexcept const const Json &amp; info () noexcept const bool is_pending () noexcept const SceneVisitor &amp; operator= (const SceneVisitor &amp;) = delete SceneVisitor &amp; operator= (SceneVisitor &amp;&amp;) = default span&lt; IndexT &gt; pending_destroy_ids () noexcept const span&lt; S&lt; geometry::GeometrySlot &gt; &gt; pending_geometries () noexcept const span&lt; S&lt; geometry::GeometrySlot &gt; &gt; pending_rest_geometries () noexcept const core::Scene &amp; ref () noexcept span&lt; S&lt; geometry::GeometrySlot &gt; &gt; rest_geometries () noexcept const void solve_pending () noexcept"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-scenevisitor-14","title":"function SceneVisitor [1/4]","text":"<pre><code>uipc::backend::SceneVisitor::SceneVisitor (\n    core::Scene &amp; scene\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-scenevisitor-24","title":"function SceneVisitor [2/4]","text":"<pre><code>uipc::backend::SceneVisitor::SceneVisitor (\n    core::internal::Scene &amp; scene\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-scenevisitor-34","title":"function SceneVisitor [3/4]","text":"<pre><code>uipc::backend::SceneVisitor::SceneVisitor (\n    const SceneVisitor &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-scenevisitor-44","title":"function SceneVisitor [4/4]","text":"<pre><code>uipc::backend::SceneVisitor::SceneVisitor (\n    SceneVisitor &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-begin_pending","title":"function begin_pending","text":"<pre><code>void uipc::backend::SceneVisitor::begin_pending () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-constitution_tabular-12","title":"function constitution_tabular [1/2]","text":"<pre><code>const core::ConstitutionTabular &amp; uipc::backend::SceneVisitor::constitution_tabular () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-constitution_tabular-22","title":"function constitution_tabular [2/2]","text":"<pre><code>core::ConstitutionTabular &amp; uipc::backend::SceneVisitor::constitution_tabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-contact_tabular-12","title":"function contact_tabular [1/2]","text":"<pre><code>const core::ContactTabular &amp; uipc::backend::SceneVisitor::contact_tabular () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-contact_tabular-22","title":"function contact_tabular [2/2]","text":"<pre><code>core::ContactTabular &amp; uipc::backend::SceneVisitor::contact_tabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-diff_sim-12","title":"function diff_sim [1/2]","text":"<pre><code>const DiffSimVisitor &amp; uipc::backend::SceneVisitor::diff_sim () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-diff_sim-22","title":"function diff_sim [2/2]","text":"<pre><code>DiffSimVisitor &amp; uipc::backend::SceneVisitor::diff_sim () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-find_geometry","title":"function find_geometry","text":"<pre><code>S&lt; geometry::GeometrySlot &gt; uipc::backend::SceneVisitor::find_geometry (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-find_rest_geometry","title":"function find_rest_geometry","text":"<pre><code>S&lt; geometry::GeometrySlot &gt; uipc::backend::SceneVisitor::find_rest_geometry (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-geometries","title":"function geometries","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::backend::SceneVisitor::geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-info","title":"function info","text":"<pre><code>const Json &amp; uipc::backend::SceneVisitor::info () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-is_pending","title":"function is_pending","text":"<pre><code>bool uipc::backend::SceneVisitor::is_pending () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-operator","title":"function operator=","text":"<pre><code>SceneVisitor &amp; uipc::backend::SceneVisitor::operator= (\n    const SceneVisitor &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-operator_1","title":"function operator=","text":"<pre><code>SceneVisitor &amp; uipc::backend::SceneVisitor::operator= (\n    SceneVisitor &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-pending_destroy_ids","title":"function pending_destroy_ids","text":"<pre><code>span&lt; IndexT &gt; uipc::backend::SceneVisitor::pending_destroy_ids () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-pending_geometries","title":"function pending_geometries","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::backend::SceneVisitor::pending_geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-pending_rest_geometries","title":"function pending_rest_geometries","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::backend::SceneVisitor::pending_rest_geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-ref","title":"function ref","text":"<pre><code>core::Scene &amp; uipc::backend::SceneVisitor::ref () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-rest_geometries","title":"function rest_geometries","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::backend::SceneVisitor::rest_geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_scene_visitor/#function-solve_pending","title":"function solve_pending","text":"<pre><code>void uipc::backend::SceneVisitor::solve_pending () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/scene_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/","title":"Class uipc::backend::WorldVisitor","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#class-uipcbackendworldvisitor","title":"Class uipc::backend::WorldVisitor","text":"<p>ClassList &gt; uipc &gt; backend &gt; WorldVisitor</p>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#public-functions","title":"Public Functions","text":"Type Name WorldVisitor (core::World &amp; w) noexcept WorldVisitor (core::internal::World &amp; w) noexcept WorldVisitor (const WorldVisitor &amp;) = delete WorldVisitor (WorldVisitor &amp;&amp;) = default AnimatorVisitor animator () noexcept WorldVisitor &amp; operator= (const WorldVisitor &amp;) = delete WorldVisitor &amp; operator= (WorldVisitor &amp;&amp;) = default core::World &amp; ref () noexcept SceneVisitor scene () noexcept"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-worldvisitor-14","title":"function WorldVisitor [1/4]","text":"<pre><code>uipc::backend::WorldVisitor::WorldVisitor (\n    core::World &amp; w\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-worldvisitor-24","title":"function WorldVisitor [2/4]","text":"<pre><code>uipc::backend::WorldVisitor::WorldVisitor (\n    core::internal::World &amp; w\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-worldvisitor-34","title":"function WorldVisitor [3/4]","text":"<pre><code>uipc::backend::WorldVisitor::WorldVisitor (\n    const WorldVisitor &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-worldvisitor-44","title":"function WorldVisitor [4/4]","text":"<pre><code>uipc::backend::WorldVisitor::WorldVisitor (\n    WorldVisitor &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-animator","title":"function animator","text":"<pre><code>AnimatorVisitor uipc::backend::WorldVisitor::animator () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-operator","title":"function operator=","text":"<pre><code>WorldVisitor &amp; uipc::backend::WorldVisitor::operator= (\n    const WorldVisitor &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-operator_1","title":"function operator=","text":"<pre><code>WorldVisitor &amp; uipc::backend::WorldVisitor::operator= (\n    WorldVisitor &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-ref","title":"function ref","text":"<pre><code>core::World &amp; uipc::backend::WorldVisitor::ref () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1backend_1_1_world_visitor/#function-scene","title":"function scene","text":"<pre><code>SceneVisitor uipc::backend::WorldVisitor::scene () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/world_visitor.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1builtin/","title":"Namespace uipc::builtin","text":""},{"location":"Libuipc/namespaceuipc_1_1builtin/#namespace-uipcbuiltin","title":"Namespace uipc::builtin","text":"<p>Namespace List &gt; uipc &gt; builtin</p>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#namespaces","title":"Namespaces","text":"Type Name namespace details"},{"location":"Libuipc/namespaceuipc_1_1builtin/#classes","title":"Classes","text":"Type Name class ConstitutionUIDAutoRegister class ConstitutionUIDCollection class ImplicitGeometryUIDAutoRegister class ImplicitGeometryUIDCollection struct UIDInfo"},{"location":"Libuipc/namespaceuipc_1_1builtin/#public-attributes","title":"Public Attributes","text":"Type Name std::string_view AbstractSimplicialComplex   = <code>\"AbstractSimplicialComplex\"</code> std::string_view AffineBody   = <code>\"AffineBody\"</code> std::string_view Constraint   = <code>\"Constraint\"</code> std::string_view FiniteElement   = <code>\"FiniteElement\"</code> std::string_view Geometry   = <code>\"Geometry\"</code> std::string_view ImplicitGeometry   = <code>\"ImplicitGeometry\"</code> std::string_view SimplicialComplex   = <code>\"SimplicialComplex\"</code> std::string_view __data__   = <code>\"\\_\\_data\\_\\_\"</code> std::string_view __meta__   = <code>\"\\_\\_meta\\_\\_\"</code>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#public-functions","title":"Public Functions","text":"Type Name UIPC_BUILTIN_ATTRIBUTE (topo) <code>topo</code> attribute onvertices /edges /triangles /tetrahedra ... to indicate the topological type of the element. UIPC_BUILTIN_ATTRIBUTE (position) <code>position</code> &lt;Vector3&gt; attribute onvertices __ UIPC_BUILTIN_ATTRIBUTE (velocity) <code>velocity</code> &lt;Vector3&gt; attribute onvertices or<code>velocity</code> &lt;Matrix4x4&gt; attribute oninstances (the derivative of the transform matrix). UIPC_BUILTIN_ATTRIBUTE (aim_position) <code>aim_position</code> &lt;Vector3&gt; attribute onvertices , indicates the aim position of the vertices if the vertices are animated. UIPC_BUILTIN_ATTRIBUTE (transform) <code>transform</code> &lt;Matrix4x4&gt; attribute oninstances __ UIPC_BUILTIN_ATTRIBUTE (aim_transform) <code>aim_transform</code> &lt;Matrix4x4&gt; attribute oninstances , indicates the aim transform of the instances if the instances are animated. UIPC_BUILTIN_ATTRIBUTE (contact_element_id) <code>contact_element_id</code> &lt;IndexT&gt; attribute onmeta __ UIPC_BUILTIN_ATTRIBUTE (constitution_uid) <code>constitution_uid</code> &lt;U64&gt; attribute onmeta , uid is a unique identifier for a constitution which is defined in the libuipc specification. UIPC_BUILTIN_ATTRIBUTE (extra_constitution_uids) <code>extra_constitution_uids</code> &lt;VectorXu64&gt; attribute onmeta , extra constitutions that are applied to the geometry. UIPC_BUILTIN_ATTRIBUTE (constraint_uid) <code>constraint_uid</code> &lt;U64&gt; attribute onmeta , uid is a unique identifier for a constraint which is defined in the libuipc specification. UIPC_BUILTIN_ATTRIBUTE (implicit_geometry_uid) <code>implicit_geometry_uid</code> &lt;U64&gt; attribute onmeta , uid is a unique identifier for an implicit geometry which is defined in the libuipc specification. UIPC_BUILTIN_ATTRIBUTE (is_surf) <code>is_surf</code> &lt;IndexT&gt; attribute onvertices /edges /triangles /tetrahedra ... to indicate if the element is a surface element. UIPC_BUILTIN_ATTRIBUTE (is_facet) <code>is_facet</code> &lt;IndexT&gt; attribute onvertices /edges /triangles /tetrahedra to indicate if the element is a facet element. UIPC_BUILTIN_ATTRIBUTE (orient) <code>orient</code> &lt;IndexT&gt;[-1,0,1] attribute ontriangles to indicate the orientation of the triangle. UIPC_BUILTIN_ATTRIBUTE (parent_id) <code>parent_id</code> &lt;IndexT&gt; attribute onedges /triangles , indicates the parent simplex id UIPC_BUILTIN_ATTRIBUTE (is_fixed) <code>is_fixed</code> &lt;IndexT&gt;[0,1] attribute, indicates if theinstance orvertex is fixed. UIPC_BUILTIN_ATTRIBUTE (is_constrained) <code>is_constrained</code> &lt;IndexT&gt;[0,1] attribute, indicates if theinstance orvertex is constrained. UIPC_BUILTIN_ATTRIBUTE (is_dynamic) <code>is_dynamic</code> &lt;IndexT&gt;[0,1] attribute, indicates if theinstance orvertex is is dynamic. UIPC_BUILTIN_ATTRIBUTE (volume) <code>volume</code> &lt;Float&gt; attribute onvertices . UIPC_BUILTIN_ATTRIBUTE (mass_density) <code>mass_density</code> &lt;Float&gt; attribute onvertices ormeta . UIPC_BUILTIN_ATTRIBUTE (gravity) <code>gravity</code> &lt;Vector3&gt; attribute oninstance orvertices . UIPC_BUILTIN_ATTRIBUTE (thickness) <code>thickness</code> &lt;Float&gt; attribute onvertices to indicate the shell thickness (radius) of the vertices which is valid when dealing with codimensional geometries. UIPC_BUILTIN_ATTRIBUTE (backend_fem_vertex_offset) <code>backend_fem_vertex_offset</code> &lt;IndexT&gt; attribute onmeta to indicate the offset of the vertex in the FEM system. UIPC_BUILTIN_ATTRIBUTE (backend_abd_body_offset) <code>backend_abd_body_offset</code> &lt;IndexT&gt; attribute onmeta to indicate the offset of the body(instance) in the ABD system. UIPC_BUILTIN_ATTRIBUTE (dof_offset) <code>dof_offset</code> &lt;IndexT&gt; attribute onmeta to indicate the degree of freedom offset of this geometry in the whole system. UIPC_BUILTIN_ATTRIBUTE (dof_count) <code>dof_count</code> &lt;IndexT&gt; attribute onmeta to indicate the degree of freedom count of this geometry in the whole system."},{"location":"Libuipc/namespaceuipc_1_1builtin/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-abstractsimplicialcomplex","title":"variable AbstractSimplicialComplex","text":"<pre><code>std::string_view uipc::builtin::AbstractSimplicialComplex;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-affinebody","title":"variable AffineBody","text":"<pre><code>std::string_view uipc::builtin::AffineBody;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-constraint","title":"variable Constraint","text":"<pre><code>std::string_view uipc::builtin::Constraint;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-finiteelement","title":"variable FiniteElement","text":"<pre><code>std::string_view uipc::builtin::FiniteElement;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-geometry","title":"variable Geometry","text":"<pre><code>std::string_view uipc::builtin::Geometry;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-implicitgeometry","title":"variable ImplicitGeometry","text":"<pre><code>std::string_view uipc::builtin::ImplicitGeometry;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-simplicialcomplex","title":"variable SimplicialComplex","text":"<pre><code>std::string_view uipc::builtin::SimplicialComplex;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-__data__","title":"variable __data__","text":"<pre><code>std::string_view uipc::builtin::__data__;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#variable-__meta__","title":"variable __meta__","text":"<pre><code>std::string_view uipc::builtin::__meta__;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>topo</code> attribute onvertices /edges /triangles /tetrahedra ... to indicate the topological type of the element. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    topo\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_1","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>position</code> &lt;Vector3&gt; attribute onvertices __ </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    position\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_2","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>velocity</code> &lt;Vector3&gt; attribute onvertices or<code>velocity</code> &lt;Matrix4x4&gt; attribute oninstances (the derivative of the transform matrix). </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    velocity\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_3","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>aim_position</code> &lt;Vector3&gt; attribute onvertices , indicates the aim position of the vertices if the vertices are animated. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    aim_position\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_4","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>transform</code> &lt;Matrix4x4&gt; attribute oninstances __ </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    transform\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_5","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>aim_transform</code> &lt;Matrix4x4&gt; attribute oninstances , indicates the aim transform of the instances if the instances are animated. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    aim_transform\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_6","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>contact_element_id</code> &lt;IndexT&gt; attribute onmeta __ </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    contact_element_id\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_7","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>constitution_uid</code> &lt;U64&gt; attribute onmeta , uid is a unique identifier for a constitution which is defined in the libuipc specification. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    constitution_uid\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_8","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>extra_constitution_uids</code> &lt;VectorXu64&gt; attribute onmeta , extra constitutions that are applied to the geometry. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    extra_constitution_uids\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_9","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>constraint_uid</code> &lt;U64&gt; attribute onmeta , uid is a unique identifier for a constraint which is defined in the libuipc specification. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    constraint_uid\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_10","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>implicit_geometry_uid</code> &lt;U64&gt; attribute onmeta , uid is a unique identifier for an implicit geometry which is defined in the libuipc specification. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    implicit_geometry_uid\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_11","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>is_surf</code> &lt;IndexT&gt; attribute onvertices /edges /triangles /tetrahedra ... to indicate if the element is a surface element. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    is_surf\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_12","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>is_facet</code> &lt;IndexT&gt; attribute onvertices /edges /triangles /tetrahedra to indicate if the element is a facet element. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    is_facet\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_13","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>orient</code> &lt;IndexT&gt;[-1,0,1] attribute ontriangles to indicate the orientation of the triangle. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    orient\n) \n</code></pre> <p>1) 0 is the default value, which means the orientation is not determined, or the triangle is not a surface triangle. 2) 1 means outward the tetrahedron 3) -1 means inward the tetrahedron. </p>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_14","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>parent_id</code> &lt;IndexT&gt; attribute onedges /triangles , indicates the parent simplex id </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    parent_id\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_15","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>is_fixed</code> &lt;IndexT&gt;[0,1] attribute, indicates if theinstance orvertex is fixed. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    is_fixed\n) \n</code></pre> <p>'Fixed' means the vertices are not influenced by its constitution and kinetic, keeping the position unchanged. They may be fixed with a certain position, or they are animated with a certain aim position.</p> <p>1) 0 means the instance or vertex is not fixed. 2) 1 means the instance or vertex is fixed. </p>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_16","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>is_constrained</code> &lt;IndexT&gt;[0,1] attribute, indicates if theinstance orvertex is constrained. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    is_constrained\n) \n</code></pre> <p>'Constrained' means the instances or vertices are trying to obey the constraints.</p> <p>1) 0 means the instance or vertex is not constrained. 2) 1 means the instance or vertex is constrained. </p>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_17","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>is_dynamic</code> &lt;IndexT&gt;[0,1] attribute, indicates if theinstance orvertex is is dynamic. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    is_dynamic\n) \n</code></pre> <p>'Dynamic' means the kinetic of instances or vertices is considered.</p> <p>1) 0 means the the kinetic of the instance or vertex is not considered. 2) 1 means the the kinetic of the instance or vertex is considered. </p>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_18","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>volume</code> &lt;Float&gt; attribute onvertices . </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    volume\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_19","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>mass_density</code> &lt;Float&gt; attribute onvertices ormeta . </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    mass_density\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_20","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>gravity</code> &lt;Vector3&gt; attribute oninstance orvertices . </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    gravity\n) \n</code></pre> <p>If attribute exists, backend will take this value as the gravity of the instance or vertices, instead of the global gravity set in the scene configuration. </p>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_21","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>thickness</code> &lt;Float&gt; attribute onvertices to indicate the shell thickness (radius) of the vertices which is valid when dealing with codimensional geometries. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    thickness\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_22","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>backend_fem_vertex_offset</code> &lt;IndexT&gt; attribute onmeta to indicate the offset of the vertex in the FEM system. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    backend_fem_vertex_offset\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_23","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>backend_abd_body_offset</code> &lt;IndexT&gt; attribute onmeta to indicate the offset of the body(instance) in the ABD system. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    backend_abd_body_offset\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_24","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>dof_offset</code> &lt;IndexT&gt; attribute onmeta to indicate the degree of freedom offset of this geometry in the whole system. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    dof_offset\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1builtin/#function-uipc_builtin_attribute_25","title":"function UIPC_BUILTIN_ATTRIBUTE","text":"<p><code>dof_count</code> &lt;IndexT&gt; attribute onmeta to indicate the degree of freedom count of this geometry in the whole system. </p><pre><code>uipc::builtin::UIPC_BUILTIN_ATTRIBUTE (\n    dof_count\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/attribute_name.h</code></p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/","title":"Class uipc::builtin::ConstitutionUIDAutoRegister","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/#class-uipcbuiltinconstitutionuidautoregister","title":"Class uipc::builtin::ConstitutionUIDAutoRegister","text":"<p>ClassList &gt; uipc &gt; builtin &gt; ConstitutionUIDAutoRegister</p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; list&lt; UIDInfo &gt;()&gt; Creator"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/#public-functions","title":"Public Functions","text":"Type Name ConstitutionUIDAutoRegister (Creator creator) noexcept"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/#typedef-creator","title":"typedef Creator","text":"<pre><code>using uipc::builtin::ConstitutionUIDAutoRegister::Creator =  std::function&lt;list&lt;UIDInfo&gt;()&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_auto_register/#function-constitutionuidautoregister","title":"function ConstitutionUIDAutoRegister","text":"<pre><code>uipc::builtin::ConstitutionUIDAutoRegister::ConstitutionUIDAutoRegister (\n    Creator creator\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/constitution_uid_auto_register.h</code></p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_collection/","title":"Class uipc::builtin::ConstitutionUIDCollection","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_collection/#class-uipcbuiltinconstitutionuidcollection","title":"Class uipc::builtin::ConstitutionUIDCollection","text":"<p>ClassList &gt; uipc &gt; builtin &gt; ConstitutionUIDCollection</p> <p>Inherits the following classes: uipc::builtin::details::UIDRegister</p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_collection/#public-functions-inherited-from-uipcbuiltindetailsuidregister","title":"Public Functions inherited from uipc::builtin::details::UIDRegister","text":"<p>See uipc::builtin::details::UIDRegister</p> Type Name bool exists (U64 uid) const const UIDInfo &amp; find (U64 uid) const Json to_json () noexcept const"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_collection/#public-static-functions","title":"Public Static Functions","text":"Type Name const ConstitutionUIDCollection &amp; instance () noexcept"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_collection/#protected-functions-inherited-from-uipcbuiltindetailsuidregister","title":"Protected Functions inherited from uipc::builtin::details::UIDRegister","text":"<p>See uipc::builtin::details::UIDRegister</p> Type Name void create (const UIDInfo &amp; info)"},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_collection/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_constitution_u_i_d_collection/#function-instance","title":"function instance","text":"<pre><code>static const ConstitutionUIDCollection &amp; uipc::builtin::ConstitutionUIDCollection::instance () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/constitution_uid_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/","title":"Class uipc::builtin::ImplicitGeometryUIDAutoRegister","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/#class-uipcbuiltinimplicitgeometryuidautoregister","title":"Class uipc::builtin::ImplicitGeometryUIDAutoRegister","text":"<p>ClassList &gt; uipc &gt; builtin &gt; ImplicitGeometryUIDAutoRegister</p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; list&lt; UIDInfo &gt;()&gt; Creator"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/#public-functions","title":"Public Functions","text":"Type Name ImplicitGeometryUIDAutoRegister (Creator creator) noexcept"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/#typedef-creator","title":"typedef Creator","text":"<pre><code>using uipc::builtin::ImplicitGeometryUIDAutoRegister::Creator =  std::function&lt;list&lt;UIDInfo&gt;()&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_auto_register/#function-implicitgeometryuidautoregister","title":"function ImplicitGeometryUIDAutoRegister","text":"<pre><code>uipc::builtin::ImplicitGeometryUIDAutoRegister::ImplicitGeometryUIDAutoRegister (\n    Creator creator\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/implicit_geometry_uid_auto_register.h</code></p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_collection/","title":"Class uipc::builtin::ImplicitGeometryUIDCollection","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_collection/#class-uipcbuiltinimplicitgeometryuidcollection","title":"Class uipc::builtin::ImplicitGeometryUIDCollection","text":"<p>ClassList &gt; uipc &gt; builtin &gt; ImplicitGeometryUIDCollection</p> <p>Inherits the following classes: uipc::builtin::details::UIDRegister</p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_collection/#public-functions-inherited-from-uipcbuiltindetailsuidregister","title":"Public Functions inherited from uipc::builtin::details::UIDRegister","text":"<p>See uipc::builtin::details::UIDRegister</p> Type Name bool exists (U64 uid) const const UIDInfo &amp; find (U64 uid) const Json to_json () noexcept const"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_collection/#public-static-functions","title":"Public Static Functions","text":"Type Name const ImplicitGeometryUIDCollection &amp; instance () noexcept"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_collection/#protected-functions-inherited-from-uipcbuiltindetailsuidregister","title":"Protected Functions inherited from uipc::builtin::details::UIDRegister","text":"<p>See uipc::builtin::details::UIDRegister</p> Type Name void create (const UIDInfo &amp; info)"},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_collection/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1_implicit_geometry_u_i_d_collection/#function-instance","title":"function instance","text":"<pre><code>static const ImplicitGeometryUIDCollection &amp; uipc::builtin::ImplicitGeometryUIDCollection::instance () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/implicit_geometry_uid_collection.h</code></p>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/","title":"Struct uipc::builtin::UIDInfo","text":""},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#struct-uipcbuiltinuidinfo","title":"Struct uipc::builtin::UIDInfo","text":"<p>ClassList &gt; uipc &gt; builtin &gt; UIDInfo</p>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#public-attributes","title":"Public Attributes","text":"Type Name string author string description string email Json extras string name string type U64 uid string website"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#public-static-attributes","title":"Public Static Attributes","text":"Type Name U64 OfficialBuiltinUIDStart   = <code>0</code> U64 UserDefinedUIDStart   = <code>1ull &amp;lt;&amp;lt; 32</code>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#public-functions","title":"Public Functions","text":"Type Name bool is_official_builtin_uid (U64 uid) noexcept const bool is_user_defined_uid (U64 uid) noexcept const Json to_json () noexcept const"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-author","title":"variable author","text":"<pre><code>string uipc::builtin::UIDInfo::author;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-description","title":"variable description","text":"<pre><code>string uipc::builtin::UIDInfo::description;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-email","title":"variable email","text":"<pre><code>string uipc::builtin::UIDInfo::email;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-extras","title":"variable extras","text":"<pre><code>Json uipc::builtin::UIDInfo::extras;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-name","title":"variable name","text":"<pre><code>string uipc::builtin::UIDInfo::name;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-type","title":"variable type","text":"<pre><code>string uipc::builtin::UIDInfo::type;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-uid","title":"variable uid","text":"<pre><code>U64 uipc::builtin::UIDInfo::uid;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-website","title":"variable website","text":"<pre><code>string uipc::builtin::UIDInfo::website;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-officialbuiltinuidstart","title":"variable OfficialBuiltinUIDStart","text":"<pre><code>U64 uipc::builtin::UIDInfo::OfficialBuiltinUIDStart;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#variable-userdefineduidstart","title":"variable UserDefinedUIDStart","text":"<pre><code>U64 uipc::builtin::UIDInfo::UserDefinedUIDStart;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#function-is_official_builtin_uid","title":"function is_official_builtin_uid","text":"<pre><code>bool uipc::builtin::UIDInfo::is_official_builtin_uid (\n    U64 uid\n) noexcept const\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#function-is_user_defined_uid","title":"function is_user_defined_uid","text":"<pre><code>bool uipc::builtin::UIDInfo::is_user_defined_uid (\n    U64 uid\n) noexcept const\n</code></pre>"},{"location":"Libuipc/structuipc_1_1builtin_1_1_u_i_d_info/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::builtin::UIDInfo::to_json () noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/uid_info.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1builtin_1_1details/","title":"Namespace uipc::builtin::details","text":""},{"location":"Libuipc/namespaceuipc_1_1builtin_1_1details/#namespace-uipcbuiltindetails","title":"Namespace uipc::builtin::details","text":"<p>Namespace List &gt; uipc &gt; builtin &gt; details</p>"},{"location":"Libuipc/namespaceuipc_1_1builtin_1_1details/#classes","title":"Classes","text":"Type Name class UIDRegister <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/uid_register.h</code></p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/","title":"Class uipc::builtin::details::UIDRegister","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#class-uipcbuiltindetailsuidregister","title":"Class uipc::builtin::details::UIDRegister","text":"<p>ClassList &gt; uipc &gt; builtin &gt; details &gt; UIDRegister</p> <p>Inherited by the following classes: uipc::builtin::ConstitutionUIDCollection,  uipc::builtin::ImplicitGeometryUIDCollection</p>"},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#public-functions","title":"Public Functions","text":"Type Name bool exists (U64 uid) const const UIDInfo &amp; find (U64 uid) const Json to_json () noexcept const"},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#protected-functions","title":"Protected Functions","text":"Type Name void create (const UIDInfo &amp; info)"},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#function-exists","title":"function exists","text":"<pre><code>bool uipc::builtin::details::UIDRegister::exists (\n    U64 uid\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#function-find","title":"function find","text":"<pre><code>const UIDInfo &amp; uipc::builtin::details::UIDRegister::find (\n    U64 uid\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::builtin::details::UIDRegister::to_json () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1builtin_1_1details_1_1_u_i_d_register/#function-create","title":"function create","text":"<pre><code>void uipc::builtin::details::UIDRegister::create (\n    const UIDInfo &amp; info\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/uid_register.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1constitution/","title":"Namespace uipc::constitution","text":""},{"location":"Libuipc/namespaceuipc_1_1constitution/#namespace-uipcconstitution","title":"Namespace uipc::constitution","text":"<p>Namespace List &gt; uipc &gt; constitution</p>"},{"location":"Libuipc/namespaceuipc_1_1constitution/#classes","title":"Classes","text":"Type Name class ARAP class AffineBodyConstitution class AffineBodyMaterial class Constraint class DiscreteShellBending class ElasticModuli class Empty class FiniteElementConstitution class FiniteElementExtraConstitution class HookeanSpring class IConstitution class KirchhoffRodBending class LinearMotor class NeoHookeanShell class Particle class RotatingMotor class SoftPositionConstraint class SoftTransformConstraint class StableNeoHookean"},{"location":"Libuipc/namespaceuipc_1_1constitution/#public-functions","title":"Public Functions","text":"Type Name void EG_to_lame (Float E, Float G, Float &amp; lambda, Float &amp; mu, Float &amp; poisson)  void EG_to_poisson (Float E, Float G, Float &amp; poisson)  void EP_to_lame (Float E, Float poission, Float &amp; lambda, Float &amp; mu)  void lame_to_EG (Float lambda, Float mu, Float &amp; E, Float &amp; G, Float &amp; poisson)  void lame_to_poisson (Float lambda, Float mu, Float &amp; poisson)"},{"location":"Libuipc/namespaceuipc_1_1constitution/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1constitution/#function-eg_to_lame","title":"function EG_to_lame","text":"<pre><code>inline void uipc::constitution::EG_to_lame (\n    Float E,\n    Float G,\n    Float &amp; lambda,\n    Float &amp; mu,\n    Float &amp; poisson\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1constitution/#function-eg_to_poisson","title":"function EG_to_poisson","text":"<pre><code>inline void uipc::constitution::EG_to_poisson (\n    Float E,\n    Float G,\n    Float &amp; poisson\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1constitution/#function-ep_to_lame","title":"function EP_to_lame","text":"<pre><code>inline void uipc::constitution::EP_to_lame (\n    Float E,\n    Float poission,\n    Float &amp; lambda,\n    Float &amp; mu\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1constitution/#function-lame_to_eg","title":"function lame_to_EG","text":"<pre><code>inline void uipc::constitution::lame_to_EG (\n    Float lambda,\n    Float mu,\n    Float &amp; E,\n    Float &amp; G,\n    Float &amp; poisson\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1constitution/#function-lame_to_poisson","title":"function lame_to_poisson","text":"<pre><code>inline void uipc::constitution::lame_to_poisson (\n    Float lambda,\n    Float mu,\n    Float &amp; poisson\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/affine_body_constitution.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/","title":"Class uipc::constitution::ARAP","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#class-uipcconstitutionarap","title":"Class uipc::constitution::ARAP","text":"<p>ClassList &gt; uipc &gt; constitution &gt; ARAP</p> <p>Inherits the following classes: uipc::constitution::FiniteElementConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#public-functions","title":"Public Functions","text":"Type Name ARAP (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float kappa=1.0_MPa, Float mass_density=1e3) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#protected-functions-inherited-from-uipcconstitutionfiniteelementconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementConstitution","text":"<p>See uipc::constitution::FiniteElementConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density, Float thickness=0.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#function-arap","title":"function ARAP","text":"<pre><code>uipc::constitution::ARAP::ARAP (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::ARAP::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float kappa=1.0_MPa,\n    Float mass_density=1e3\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::ARAP::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_a_r_a_p/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::ARAP::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/arap.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/","title":"Class uipc::constitution::AffineBodyConstitution","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#class-uipcconstitutionaffinebodyconstitution","title":"Class uipc::constitution::AffineBodyConstitution","text":"<p>ClassList &gt; uipc &gt; constitution &gt; AffineBodyConstitution</p> <p>Inherits the following classes: uipc::constitution::IConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#public-functions","title":"Public Functions","text":"Type Name AffineBodyConstitution (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float kappa, Float mass_density=1e3) const AffineBodyMaterial create_material (Float kappa) noexcept const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#function-affinebodyconstitution","title":"function AffineBodyConstitution","text":"<pre><code>uipc::constitution::AffineBodyConstitution::AffineBodyConstitution (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::AffineBodyConstitution::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float kappa,\n    Float mass_density=1e3\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#function-create_material","title":"function create_material","text":"<pre><code>AffineBodyMaterial uipc::constitution::AffineBodyConstitution::create_material (\n    Float kappa\n) noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::AffineBodyConstitution::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_constitution/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::AffineBodyConstitution::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/affine_body_constitution.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_material/","title":"Class uipc::constitution::AffineBodyMaterial","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_material/#class-uipcconstitutionaffinebodymaterial","title":"Class uipc::constitution::AffineBodyMaterial","text":"<p>ClassList &gt; uipc &gt; constitution &gt; AffineBodyMaterial</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_material/#public-functions","title":"Public Functions","text":"Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_material/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_affine_body_material/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::AffineBodyMaterial::apply_to (\n    geometry::SimplicialComplex &amp; sc\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/affine_body_constitution.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/","title":"Class uipc::constitution::Constraint","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#class-uipcconstitutionconstraint","title":"Class uipc::constitution::Constraint","text":"<p>ClassList &gt; uipc &gt; constitution &gt; Constraint</p> <p>Inherits the following classes: uipc::constitution::IConstitution</p> <p>Inherited by the following classes: uipc::constitution::LinearMotor,  uipc::constitution::RotatingMotor,  uipc::constitution::SoftPositionConstraint,  uipc::constitution::SoftTransformConstraint</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#public-functions","title":"Public Functions","text":"Type Name Constraint () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#protected-functions","title":"Protected Functions","text":"Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#function-constraint","title":"function Constraint","text":"<pre><code>uipc::constitution::Constraint::Constraint () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::Constraint::apply_to (\n    geometry::SimplicialComplex &amp; sc\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_constraint/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::Constraint::get_uid () noexcept const = 0\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/constraint.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/","title":"Class uipc::constitution::DiscreteShellBending","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#class-uipcconstitutiondiscreteshellbending","title":"Class uipc::constitution::DiscreteShellBending","text":"<p>ClassList &gt; uipc &gt; constitution &gt; DiscreteShellBending</p> <p>Inherits the following classes: uipc::constitution::FiniteElementExtraConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#public-functions","title":"Public Functions","text":"Type Name DiscreteShellBending (const Json &amp; json=default_config())  void apply_to (geometry::SimplicialComplex &amp; sc, Float E=100.0_kPa)"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config ()"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#protected-functions-inherited-from-uipcconstitutionfiniteelementextraconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementExtraConstitution","text":"<p>See uipc::constitution::FiniteElementExtraConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#function-discreteshellbending","title":"function DiscreteShellBending","text":"<pre><code>uipc::constitution::DiscreteShellBending::DiscreteShellBending (\n    const Json &amp; json=default_config()\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::DiscreteShellBending::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float E=100.0_kPa\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_discrete_shell_bending/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::DiscreteShellBending::default_config () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/discrete_shell_bending.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/","title":"Class uipc::constitution::ElasticModuli","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#class-uipcconstitutionelasticmoduli","title":"Class uipc::constitution::ElasticModuli","text":"<p>ClassList &gt; uipc &gt; constitution &gt; ElasticModuli</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#public-functions","title":"Public Functions","text":"Type Name auto lambda () noexcept const auto mu () noexcept const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#public-static-functions","title":"Public Static Functions","text":"Type Name ElasticModuli lame (Float lambda, Float mu) noexcept ElasticModuli youngs_poisson (Float E, Float nu)  ElasticModuli youngs_shear (Float E, Float G) noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#function-lambda","title":"function lambda","text":"<pre><code>inline auto uipc::constitution::ElasticModuli::lambda () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#function-mu","title":"function mu","text":"<pre><code>inline auto uipc::constitution::ElasticModuli::mu () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#function-lame","title":"function lame","text":"<pre><code>static ElasticModuli uipc::constitution::ElasticModuli::lame (\n    Float lambda,\n    Float mu\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#function-youngs_poisson","title":"function youngs_poisson","text":"<pre><code>static ElasticModuli uipc::constitution::ElasticModuli::youngs_poisson (\n    Float E,\n    Float nu\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_elastic_moduli/#function-youngs_shear","title":"function youngs_shear","text":"<pre><code>static ElasticModuli uipc::constitution::ElasticModuli::youngs_shear (\n    Float E,\n    Float G\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/elastic_moduli.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/","title":"Class uipc::constitution::Empty","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#class-uipcconstitutionempty","title":"Class uipc::constitution::Empty","text":"<p>ClassList &gt; uipc &gt; constitution &gt; Empty</p> <p>Inherits the following classes: uipc::constitution::FiniteElementConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#public-functions","title":"Public Functions","text":"Type Name Empty (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density=1000.0, Float thickness=0.01_m) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#protected-functions-inherited-from-uipcconstitutionfiniteelementconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementConstitution","text":"<p>See uipc::constitution::FiniteElementConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density, Float thickness=0.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#function-empty","title":"function Empty","text":"<pre><code>uipc::constitution::Empty::Empty (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::Empty::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float mass_density=1000.0,\n    Float thickness=0.01_m\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::Empty::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_empty/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::Empty::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/empty.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_constitution/","title":"Class uipc::constitution::FiniteElementConstitution","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_constitution/#class-uipcconstitutionfiniteelementconstitution","title":"Class uipc::constitution::FiniteElementConstitution","text":"<p>ClassList &gt; uipc &gt; constitution &gt; FiniteElementConstitution</p> <p>Inherits the following classes: uipc::constitution::IConstitution</p> <p>Inherited by the following classes: uipc::constitution::ARAP,  uipc::constitution::Empty,  uipc::constitution::HookeanSpring,  uipc::constitution::NeoHookeanShell,  uipc::constitution::Particle,  uipc::constitution::StableNeoHookean</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_constitution/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_constitution/#protected-functions","title":"Protected Functions","text":"Type Name void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density, Float thickness=0.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_constitution/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_constitution/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_constitution/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::FiniteElementConstitution::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float mass_density,\n    Float thickness=0.0\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/finite_element_constitution.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/","title":"Class uipc::constitution::FiniteElementExtraConstitution","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/#class-uipcconstitutionfiniteelementextraconstitution","title":"Class uipc::constitution::FiniteElementExtraConstitution","text":"<p>ClassList &gt; uipc &gt; constitution &gt; FiniteElementExtraConstitution</p> <p>Inherits the following classes: uipc::constitution::IConstitution</p> <p>Inherited by the following classes: uipc::constitution::DiscreteShellBending,  uipc::constitution::KirchhoffRodBending</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/#protected-functions","title":"Protected Functions","text":"Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::FiniteElementExtraConstitution::apply_to (\n    geometry::SimplicialComplex &amp; sc\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_finite_element_extra_constitution/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::FiniteElementExtraConstitution::get_uid () noexcept const = 0\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/finite_element_extra_constitution.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/","title":"Class uipc::constitution::HookeanSpring","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#class-uipcconstitutionhookeanspring","title":"Class uipc::constitution::HookeanSpring","text":"<p>ClassList &gt; uipc &gt; constitution &gt; HookeanSpring</p> <p>Inherits the following classes: uipc::constitution::FiniteElementConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#public-functions","title":"Public Functions","text":"Type Name HookeanSpring (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float kappa=40.0_MPa, Float mass_density=1e3, Float thickness=0.01_m) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#protected-functions-inherited-from-uipcconstitutionfiniteelementconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementConstitution","text":"<p>See uipc::constitution::FiniteElementConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density, Float thickness=0.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#function-hookeanspring","title":"function HookeanSpring","text":"<pre><code>uipc::constitution::HookeanSpring::HookeanSpring (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::HookeanSpring::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float kappa=40.0_MPa,\n    Float mass_density=1e3,\n    Float thickness=0.01_m\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::HookeanSpring::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_hookean_spring/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::HookeanSpring::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/hookean_spring.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/","title":"Class uipc::constitution::IConstitution","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#class-uipcconstitutioniconstitution","title":"Class uipc::constitution::IConstitution","text":"<p>ClassList &gt; uipc &gt; constitution &gt; IConstitution</p> <p>Inherited by the following classes: uipc::constitution::AffineBodyConstitution,  uipc::constitution::Constraint,  uipc::constitution::FiniteElementConstitution,  uipc::constitution::FiniteElementExtraConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#public-functions","title":"Public Functions","text":"Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#function-name","title":"function name","text":"<pre><code>std::string_view uipc::constitution::IConstitution::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#function-type","title":"function type","text":"<pre><code>std::string_view uipc::constitution::IConstitution::type () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#function-uid","title":"function uid","text":"<pre><code>U64 uipc::constitution::IConstitution::uid () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#function-uid_info","title":"function uid_info","text":"<pre><code>const builtin::UIDInfo &amp; uipc::constitution::IConstitution::uid_info () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#function-iconstitution","title":"function ~IConstitution","text":"<pre><code>virtual uipc::constitution::IConstitution::~IConstitution () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_i_constitution/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::IConstitution::get_uid () noexcept const = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/constitution.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/","title":"Class uipc::constitution::KirchhoffRodBending","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#class-uipcconstitutionkirchhoffrodbending","title":"Class uipc::constitution::KirchhoffRodBending","text":"<p>ClassList &gt; uipc &gt; constitution &gt; KirchhoffRodBending</p> <p>Inherits the following classes: uipc::constitution::FiniteElementExtraConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#public-functions","title":"Public Functions","text":"Type Name KirchhoffRodBending (const Json &amp; json=default_config())  void apply_to (geometry::SimplicialComplex &amp; sc, Float E=100.0_MPa)"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config ()"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#protected-functions-inherited-from-uipcconstitutionfiniteelementextraconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementExtraConstitution","text":"<p>See uipc::constitution::FiniteElementExtraConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#function-kirchhoffrodbending","title":"function KirchhoffRodBending","text":"<pre><code>uipc::constitution::KirchhoffRodBending::KirchhoffRodBending (\n    const Json &amp; json=default_config()\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::KirchhoffRodBending::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float E=100.0_MPa\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_kirchhoff_rod_bending/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::KirchhoffRodBending::default_config () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/kirchhoff_rod_bending.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/","title":"Class uipc::constitution::LinearMotor","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#class-uipcconstitutionlinearmotor","title":"Class uipc::constitution::LinearMotor","text":"<p>ClassList &gt; uipc &gt; constitution &gt; LinearMotor</p> <p>Inherits the following classes: uipc::constitution::Constraint</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#public-functions","title":"Public Functions","text":"Type Name LinearMotor (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float strength_ratio=100.0, Vector3 motor_axis=-Vector3::UnitZ(), Float motor_vel=1.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#public-functions-inherited-from-uipcconstitutionconstraint","title":"Public Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name Constraint () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#public-static-functions","title":"Public Static Functions","text":"Type Name void animate (geometry::SimplicialComplex &amp; sc, Float dt)  Json default_config ()"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#protected-functions-inherited-from-uipcconstitutionconstraint","title":"Protected Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#function-linearmotor","title":"function LinearMotor","text":"<pre><code>uipc::constitution::LinearMotor::LinearMotor (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::LinearMotor::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float strength_ratio=100.0,\n    Vector3 motor_axis=-Vector3::UnitZ(),\n    Float motor_vel=1.0\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#function-animate","title":"function animate","text":"<pre><code>static void uipc::constitution::LinearMotor::animate (\n    geometry::SimplicialComplex &amp; sc,\n    Float dt\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::LinearMotor::default_config () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_linear_motor/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::LinearMotor::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::Constraint::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/soft_transform_constraint.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/","title":"Class uipc::constitution::NeoHookeanShell","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#class-uipcconstitutionneohookeanshell","title":"Class uipc::constitution::NeoHookeanShell","text":"<p>ClassList &gt; uipc &gt; constitution &gt; NeoHookeanShell</p> <p>Inherits the following classes: uipc::constitution::FiniteElementConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#public-functions","title":"Public Functions","text":"Type Name NeoHookeanShell (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, const ElasticModuli &amp; moduli=ElasticModuli::youngs_poisson(10.0_MPa, 0.49), Float mass_density=1e3, Float thickness=0.01_m) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#protected-functions-inherited-from-uipcconstitutionfiniteelementconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementConstitution","text":"<p>See uipc::constitution::FiniteElementConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density, Float thickness=0.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#function-neohookeanshell","title":"function NeoHookeanShell","text":"<pre><code>uipc::constitution::NeoHookeanShell::NeoHookeanShell (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::NeoHookeanShell::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    const ElasticModuli &amp; moduli=ElasticModuli::youngs_poisson(10.0_MPa, 0.49),\n    Float mass_density=1e3,\n    Float thickness=0.01_m\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::NeoHookeanShell::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_neo_hookean_shell/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::NeoHookeanShell::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/neo_hookean_shell.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/","title":"Class uipc::constitution::Particle","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#class-uipcconstitutionparticle","title":"Class uipc::constitution::Particle","text":"<p>ClassList &gt; uipc &gt; constitution &gt; Particle</p> <p>Inherits the following classes: uipc::constitution::FiniteElementConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#public-functions","title":"Public Functions","text":"Type Name Particle (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density=1e3, Float thickness=0.01_m) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#protected-functions-inherited-from-uipcconstitutionfiniteelementconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementConstitution","text":"<p>See uipc::constitution::FiniteElementConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density, Float thickness=0.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#function-particle","title":"function Particle","text":"<pre><code>uipc::constitution::Particle::Particle (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::Particle::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float mass_density=1e3,\n    Float thickness=0.01_m\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::Particle::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_particle/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::Particle::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/particle.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/","title":"Class uipc::constitution::RotatingMotor","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#class-uipcconstitutionrotatingmotor","title":"Class uipc::constitution::RotatingMotor","text":"<p>ClassList &gt; uipc &gt; constitution &gt; RotatingMotor</p> <p>Inherits the following classes: uipc::constitution::Constraint</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#public-functions","title":"Public Functions","text":"Type Name RotatingMotor (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float strength_ratio=100.0, const Vector3 &amp; motor_rot_axis=Vector3::UnitX(), Float motor_rot_vel=2 *std::numbers::pi) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#public-functions-inherited-from-uipcconstitutionconstraint","title":"Public Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name Constraint () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#public-static-functions","title":"Public Static Functions","text":"Type Name void animate (geometry::SimplicialComplex &amp; sc, Float dt)  Json default_config ()"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#protected-functions-inherited-from-uipcconstitutionconstraint","title":"Protected Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#function-rotatingmotor","title":"function RotatingMotor","text":"<pre><code>uipc::constitution::RotatingMotor::RotatingMotor (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::RotatingMotor::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float strength_ratio=100.0,\n    const Vector3 &amp; motor_rot_axis=Vector3::UnitX(),\n    Float motor_rot_vel=2 *std::numbers::pi\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#function-animate","title":"function animate","text":"<pre><code>static void uipc::constitution::RotatingMotor::animate (\n    geometry::SimplicialComplex &amp; sc,\n    Float dt\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::RotatingMotor::default_config () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_rotating_motor/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::RotatingMotor::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::Constraint::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/soft_transform_constraint.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/","title":"Class uipc::constitution::SoftPositionConstraint","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#class-uipcconstitutionsoftpositionconstraint","title":"Class uipc::constitution::SoftPositionConstraint","text":"<p>ClassList &gt; uipc &gt; constitution &gt; SoftPositionConstraint</p> <p>Inherits the following classes: uipc::constitution::Constraint</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#public-functions","title":"Public Functions","text":"Type Name SoftPositionConstraint (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, Float strength_rate=100.0) constApply the constraint to the simplicial complex vertices."},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#public-functions-inherited-from-uipcconstitutionconstraint","title":"Public Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name Constraint () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config ()"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#protected-functions-inherited-from-uipcconstitutionconstraint","title":"Protected Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#function-softpositionconstraint","title":"function SoftPositionConstraint","text":"<pre><code>uipc::constitution::SoftPositionConstraint::SoftPositionConstraint (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#function-apply_to","title":"function apply_to","text":"<p>Apply the constraint to the simplicial complex vertices. </p><pre><code>void uipc::constitution::SoftPositionConstraint::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    Float strength_rate=100.0\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>sc</code> The simplicial complex to apply the constraint to. </li> <li><code>strength_rate</code> The strength of the constraint will be <code>strength_rate * vertex_mass</code>. </li> <li><code>is_kinematic</code> If the vertices' kinetic energy is not considered. </li> </ul>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::SoftPositionConstraint::default_config () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_position_constraint/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::SoftPositionConstraint::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::Constraint::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/soft_position_constraint.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/","title":"Class uipc::constitution::SoftTransformConstraint","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#class-uipcconstitutionsofttransformconstraint","title":"Class uipc::constitution::SoftTransformConstraint","text":"<p>ClassList &gt; uipc &gt; constitution &gt; SoftTransformConstraint</p> <p>Inherits the following classes: uipc::constitution::Constraint</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#public-functions","title":"Public Functions","text":"Type Name SoftTransformConstraint (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, const Vector2 &amp; strength_ratio) constApply the constraint to the simplicial complex instances."},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#public-functions-inherited-from-uipcconstitutionconstraint","title":"Public Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name Constraint () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config ()"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#protected-functions-inherited-from-uipcconstitutionconstraint","title":"Protected Functions inherited from uipc::constitution::Constraint","text":"<p>See uipc::constitution::Constraint</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc) const virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#function-softtransformconstraint","title":"function SoftTransformConstraint","text":"<pre><code>uipc::constitution::SoftTransformConstraint::SoftTransformConstraint (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#function-apply_to","title":"function apply_to","text":"<p>Apply the constraint to the simplicial complex instances. </p><pre><code>void uipc::constitution::SoftTransformConstraint::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    const Vector2 &amp; strength_ratio\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>sc</code> The simplicial complex to apply the constraint to. </li> <li><code>strength_ratio</code> The strength ratio of the constraint, strength_ratio[0] is the strength of the translation, strength_ratio[1] is the strength of the rotation. </li> <li><code>is_kinematic</code> If the instances' kinetic energy is not considered. </li> </ul>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::SoftTransformConstraint::default_config () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_soft_transform_constraint/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::SoftTransformConstraint::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::Constraint::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/soft_transform_constraint.h</code></p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/","title":"Class uipc::constitution::StableNeoHookean","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#class-uipcconstitutionstableneohookean","title":"Class uipc::constitution::StableNeoHookean","text":"<p>ClassList &gt; uipc &gt; constitution &gt; StableNeoHookean</p> <p>Inherits the following classes: uipc::constitution::FiniteElementConstitution</p>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#public-functions","title":"Public Functions","text":"Type Name StableNeoHookean (const Json &amp; config=default_config()) noexcept void apply_to (geometry::SimplicialComplex &amp; sc, const ElasticModuli &amp; moduli=ElasticModuli::youngs_poisson(20.0_kPa, 0.49), Float mass_density=1e3) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#public-functions-inherited-from-uipcconstitutioniconstitution","title":"Public Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name std::string_view name () noexcept const std::string_view type () noexcept const U64 uid () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const virtual ~IConstitution () = default"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#protected-functions","title":"Protected Functions","text":"Type Name virtual U64 get_uid () noexcept override const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#protected-functions-inherited-from-uipcconstitutionfiniteelementconstitution","title":"Protected Functions inherited from uipc::constitution::FiniteElementConstitution","text":"<p>See uipc::constitution::FiniteElementConstitution</p> Type Name void apply_to (geometry::SimplicialComplex &amp; sc, Float mass_density, Float thickness=0.0) const"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#protected-functions-inherited-from-uipcconstitutioniconstitution","title":"Protected Functions inherited from uipc::constitution::IConstitution","text":"<p>See uipc::constitution::IConstitution</p> Type Name virtual U64 get_uid () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#function-stableneohookean","title":"function StableNeoHookean","text":"<pre><code>uipc::constitution::StableNeoHookean::StableNeoHookean (\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#function-apply_to","title":"function apply_to","text":"<pre><code>void uipc::constitution::StableNeoHookean::apply_to (\n    geometry::SimplicialComplex &amp; sc,\n    const ElasticModuli &amp; moduli=ElasticModuli::youngs_poisson(20.0_kPa, 0.49),\n    Float mass_density=1e3\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::constitution::StableNeoHookean::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1constitution_1_1_stable_neo_hookean/#function-get_uid","title":"function get_uid","text":"<pre><code>virtual U64 uipc::constitution::StableNeoHookean::get_uid () noexcept override const\n</code></pre> <p>Implements uipc::constitution::IConstitution::get_uid</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/stable_neo_hookean.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1core/","title":"Namespace uipc::core","text":""},{"location":"Libuipc/namespaceuipc_1_1core/#namespace-uipccore","title":"Namespace uipc::core","text":"<p>Namespace List &gt; uipc &gt; core</p>"},{"location":"Libuipc/namespaceuipc_1_1core/#namespaces","title":"Namespaces","text":"Type Name namespace internal"},{"location":"Libuipc/namespaceuipc_1_1core/#classes","title":"Classes","text":"Type Name class Animation class Animator class ConstitutionTabular class ContactElement class ContactModel class ContactModelCollectionT &lt;IsConst&gt; class ContactTabular class DiffSim class Engine class EngineException class EngineStatus class EngineStatusCollection class Feature class FeatureCollection class IEngine class IFeature class IObject class IObjectCollection class ISanityChecker class ISanityCheckerCollection class Object class ObjectCollection class ObjectCollectionSnapshot class ObjectGeometrySlots &lt;GeometryT&gt; class ObjectGeometrySlots&lt; const geometry::Geometry &gt; &lt;&gt; class ObjectGeometrySlots&lt; geometry::Geometry &gt; &lt;&gt; class ObjectSnapshot class SanityCheckMessage class SanityCheckMessageCollection class SanityChecker class SanityCheckerCollectionCreateInfo class Scene class SceneFactory class SceneIO class SceneIOError class SceneSnapshot class SceneSnapshotCommit class World"},{"location":"Libuipc/namespaceuipc_1_1core/#public-types","title":"Public Types","text":"Type Name typedef ContactModelCollectionT&lt; true &gt; CContactModelCollection typedef ContactModelCollectionT&lt; false &gt; ContactModelCollection enum int SanityCheckResult"},{"location":"Libuipc/namespaceuipc_1_1core/#public-functions","title":"Public Functions","text":"Type Name void from_json (const Json &amp; j, ContactElement &amp; element)  void from_json (const Json &amp; json, ContactModel &amp; model)  void from_json (const Json &amp; j, Object &amp; object)  void UIPC_CORE_API from_json (const Json &amp; j, ObjectCollectionSnapshot &amp; obj)  UIPC_CORE_API void from_json (const Json &amp; j, ObjectSnapshot &amp; snapshot)  SceneSnapshotCommit UIPC_CORE_API operator- (const SceneSnapshot &amp; dst, const SceneSnapshot &amp; src)  void to_json (Json &amp; j, const ContactElement &amp; element)  void to_json (Json &amp; json, const ContactModel &amp; model)  void to_json (Json &amp; j, const ContactTabular &amp; ct)  void to_json (Json &amp; j, const Object &amp; object)  void UIPC_CORE_API to_json (Json &amp; j, const ObjectCollectionSnapshot &amp; obj)  UIPC_CORE_API void to_json (Json &amp; j, const ObjectSnapshot &amp; snapshot)"},{"location":"Libuipc/namespaceuipc_1_1core/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1core/#typedef-ccontactmodelcollection","title":"typedef CContactModelCollection","text":"<pre><code>using uipc::core::CContactModelCollection =  ContactModelCollectionT&lt;true&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#typedef-contactmodelcollection","title":"typedef ContactModelCollection","text":"<pre><code>using uipc::core::ContactModelCollection =  ContactModelCollectionT&lt;false&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#enum-sanitycheckresult","title":"enum SanityCheckResult","text":"<pre><code>enum uipc::core::SanityCheckResult {\n    Success = 0,\n    Warning = 1,\n    Error = 2\n};\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1core/#function-from_json","title":"function from_json","text":"<pre><code>void uipc::core::from_json (\n    const Json &amp; j,\n    ContactElement &amp; element\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-from_json_1","title":"function from_json","text":"<pre><code>void uipc::core::from_json (\n    const Json &amp; json,\n    ContactModel &amp; model\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-from_json_2","title":"function from_json","text":"<pre><code>void uipc::core::from_json (\n    const Json &amp; j,\n    Object &amp; object\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-from_json_3","title":"function from_json","text":"<pre><code>void UIPC_CORE_API uipc::core::from_json (\n    const Json &amp; j,\n    ObjectCollectionSnapshot &amp; obj\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-from_json_4","title":"function from_json","text":"<pre><code>UIPC_CORE_API void uipc::core::from_json (\n    const Json &amp; j,\n    ObjectSnapshot &amp; snapshot\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-operator-","title":"function operator-","text":"<pre><code>SceneSnapshotCommit UIPC_CORE_API uipc::core::operator- (\n    const SceneSnapshot &amp; dst,\n    const SceneSnapshot &amp; src\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-to_json","title":"function to_json","text":"<pre><code>void uipc::core::to_json (\n    Json &amp; j,\n    const ContactElement &amp; element\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-to_json_1","title":"function to_json","text":"<pre><code>void uipc::core::to_json (\n    Json &amp; json,\n    const ContactModel &amp; model\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-to_json_2","title":"function to_json","text":"<pre><code>void uipc::core::to_json (\n    Json &amp; j,\n    const ContactTabular &amp; ct\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-to_json_3","title":"function to_json","text":"<pre><code>void uipc::core::to_json (\n    Json &amp; j,\n    const Object &amp; object\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-to_json_4","title":"function to_json","text":"<pre><code>void UIPC_CORE_API uipc::core::to_json (\n    Json &amp; j,\n    const ObjectCollectionSnapshot &amp; obj\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1core/#function-to_json_5","title":"function to_json","text":"<pre><code>UIPC_CORE_API void uipc::core::to_json (\n    Json &amp; j,\n    const ObjectSnapshot &amp; snapshot\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/animator_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation/","title":"Class uipc::core::Animation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#class-uipccoreanimation","title":"Class uipc::core::Animation","text":"<p>ClassList &gt; uipc &gt; core &gt; Animation</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#classes","title":"Classes","text":"Type Name class UpdateHint class UpdateInfo"},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; void(UpdateInfo &amp;)&gt; ActionOnUpdate"},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#typedef-actiononupdate","title":"typedef ActionOnUpdate","text":"<pre><code>using uipc::core::Animation::ActionOnUpdate =  std::function&lt;void(UpdateInfo&amp;)&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#friend-animatorvisitor","title":"friend AnimatorVisitor","text":"<pre><code>class uipc::core::Animation::AnimatorVisitor (\n    backend::AnimatorVisitor\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation/#friend-formatter-animation","title":"friend formatter&lt; Animation &gt;","text":"<pre><code>struct uipc::core::Animation::formatter&lt; Animation &gt; (\n    fmt::formatter&lt; Animation &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/animation.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_hint/","title":"Class uipc::core::Animation::UpdateHint","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_hint/#class-uipccoreanimationupdatehint","title":"Class uipc::core::Animation::UpdateHint","text":"<p>ClassList &gt; uipc &gt; core &gt; Animation &gt; UpdateHint</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_hint/#public-functions","title":"Public Functions","text":"Type Name void fixed_vertices_changing (bool v) noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_hint/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_hint/#function-fixed_vertices_changing","title":"function fixed_vertices_changing","text":"<pre><code>void uipc::core::Animation::UpdateHint::fixed_vertices_changing (\n    bool v\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/animation.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/","title":"Class uipc::core::Animation::UpdateInfo","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#class-uipccoreanimationupdateinfo","title":"Class uipc::core::Animation::UpdateInfo","text":"<p>ClassList &gt; uipc &gt; core &gt; Animation &gt; UpdateInfo</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#public-functions","title":"Public Functions","text":"Type Name Float dt () noexcept const SizeT frame () noexcept const span&lt; S&lt; geometry::GeometrySlot &gt; &gt; geo_slots () noexcept const UpdateHint &amp; hint () noexcept Object &amp; object () noexcept const span&lt; S&lt; geometry::GeometrySlot &gt; &gt; rest_geo_slots () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#function-dt","title":"function dt","text":"<pre><code>Float uipc::core::Animation::UpdateInfo::dt () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#function-frame","title":"function frame","text":"<pre><code>SizeT uipc::core::Animation::UpdateInfo::frame () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#function-geo_slots","title":"function geo_slots","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::core::Animation::UpdateInfo::geo_slots () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#function-hint","title":"function hint","text":"<pre><code>UpdateHint &amp; uipc::core::Animation::UpdateInfo::hint () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#function-object","title":"function object","text":"<pre><code>Object &amp; uipc::core::Animation::UpdateInfo::object () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animation_1_1_update_info/#function-rest_geo_slots","title":"function rest_geo_slots","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::core::Animation::UpdateInfo::rest_geo_slots () noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/animation.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/","title":"Class uipc::core::Animator","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#class-uipccoreanimator","title":"Class uipc::core::Animator","text":"<p>ClassList &gt; uipc &gt; core &gt; Animator</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#public-functions","title":"Public Functions","text":"Type Name Animator (const Animator &amp;) = delete Animator (Animator &amp;&amp;) = delete void erase (IndexT id)  void insert (Object &amp; obj, Animation::ActionOnUpdate &amp;&amp; on_update)  Animator &amp; operator= (const Animator &amp;) = delete Animator &amp; operator= (Animator &amp;&amp;) = delete void substep (SizeT n) noexcept SizeT substep () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-animator-13","title":"function Animator [1/3]","text":"<pre><code>uipc::core::Animator::Animator (\n    const Animator &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-animator-23","title":"function Animator [2/3]","text":"<pre><code>uipc::core::Animator::Animator (\n    Animator &amp;&amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-erase","title":"function erase","text":"<pre><code>void uipc::core::Animator::erase (\n    IndexT id\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-insert","title":"function insert","text":"<pre><code>void uipc::core::Animator::insert (\n    Object &amp; obj,\n    Animation::ActionOnUpdate &amp;&amp; on_update\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-operator","title":"function operator=","text":"<pre><code>Animator &amp; uipc::core::Animator::operator= (\n    const Animator &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-operator_1","title":"function operator=","text":"<pre><code>Animator &amp; uipc::core::Animator::operator= (\n    Animator &amp;&amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-substep-12","title":"function substep [1/2]","text":"<pre><code>void uipc::core::Animator::substep (\n    SizeT n\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#function-substep-22","title":"function substep [2/2]","text":"<pre><code>SizeT uipc::core::Animator::substep () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#friend-animatorvisitor","title":"friend AnimatorVisitor","text":"<pre><code>class uipc::core::Animator::AnimatorVisitor (\n    backend::AnimatorVisitor\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#friend-formatter-animator","title":"friend formatter&lt; Animator &gt;","text":"<pre><code>struct uipc::core::Animator::formatter&lt; Animator &gt; (\n    fmt::formatter&lt; Animator &gt;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_animator/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::Animator::Scene (\n    internal::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/animator.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/","title":"Class uipc::core::ConstitutionTabular","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#class-uipccoreconstitutiontabular","title":"Class uipc::core::ConstitutionTabular","text":"<p>ClassList &gt; uipc &gt; core &gt; ConstitutionTabular</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#public-functions","title":"Public Functions","text":"Type Name ConstitutionTabular () noexcept ConstitutionTabular (const ConstitutionTabular &amp;) = delete void insert (const constitution::IConstitution &amp; constitution)  ConstitutionTabular &amp; operator= (const ConstitutionTabular &amp;) = delete const set&lt; std::string &gt; &amp; types () noexcept const span&lt; U64 &gt; uids () noexcept const ~ConstitutionTabular () noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#function-constitutiontabular-12","title":"function ConstitutionTabular [1/2]","text":"<pre><code>uipc::core::ConstitutionTabular::ConstitutionTabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#function-constitutiontabular-22","title":"function ConstitutionTabular [2/2]","text":"<pre><code>uipc::core::ConstitutionTabular::ConstitutionTabular (\n    const ConstitutionTabular &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#function-insert","title":"function insert","text":"<pre><code>void uipc::core::ConstitutionTabular::insert (\n    const constitution::IConstitution &amp; constitution\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#function-operator","title":"function operator=","text":"<pre><code>ConstitutionTabular &amp; uipc::core::ConstitutionTabular::operator= (\n    const ConstitutionTabular &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#function-types","title":"function types","text":"<pre><code>const set&lt; std::string &gt; &amp; uipc::core::ConstitutionTabular::types () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#function-uids","title":"function uids","text":"<pre><code>span&lt; U64 &gt; uipc::core::ConstitutionTabular::uids () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#function-constitutiontabular","title":"function ~ConstitutionTabular","text":"<pre><code>uipc::core::ConstitutionTabular::~ConstitutionTabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_constitution_tabular/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::ConstitutionTabular::Scene (\n    internal::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/constitution_tabular.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/","title":"Class uipc::core::ContactElement","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#class-uipccorecontactelement","title":"Class uipc::core::ContactElement","text":"<p>ClassList &gt; uipc &gt; core &gt; ContactElement</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#public-functions","title":"Public Functions","text":"Type Name ContactElement () = default ContactElement (const ContactElement &amp;) = default ContactElement (ContactElement &amp;&amp;) = default ContactElement (IndexT id, std::string_view name) noexcept S&lt; geometry::AttributeSlot&lt; IndexT &gt; &gt; apply_to (geometry::Geometry &amp; geo) const IndexT id () noexcept const std::string_view name () noexcept const ContactElement &amp; operator= (const ContactElement &amp;) = default ContactElement &amp; operator= (ContactElement &amp;&amp;) = default"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-contactelement-14","title":"function ContactElement [1/4]","text":"<pre><code>uipc::core::ContactElement::ContactElement () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-contactelement-24","title":"function ContactElement [2/4]","text":"<pre><code>uipc::core::ContactElement::ContactElement (\n    const ContactElement &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-contactelement-34","title":"function ContactElement [3/4]","text":"<pre><code>uipc::core::ContactElement::ContactElement (\n    ContactElement &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-contactelement-44","title":"function ContactElement [4/4]","text":"<pre><code>uipc::core::ContactElement::ContactElement (\n    IndexT id,\n    std::string_view name\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-apply_to","title":"function apply_to","text":"<pre><code>S&lt; geometry::AttributeSlot &lt; IndexT &gt; &gt; uipc::core::ContactElement::apply_to (\n    geometry::Geometry &amp; geo\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-id","title":"function id","text":"<pre><code>IndexT uipc::core::ContactElement::id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-name","title":"function name","text":"<pre><code>std::string_view uipc::core::ContactElement::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-operator","title":"function operator=","text":"<pre><code>ContactElement &amp; uipc::core::ContactElement::operator= (\n    const ContactElement &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#function-operator_1","title":"function operator=","text":"<pre><code>ContactElement &amp; uipc::core::ContactElement::operator= (\n    ContactElement &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#friend-from_json","title":"friend from_json","text":"<pre><code>void uipc::core::ContactElement::from_json (\n    const Json &amp; j,\n    ContactElement &amp; element\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_element/#friend-to_json","title":"friend to_json","text":"<pre><code>void uipc::core::ContactElement::to_json (\n    Json &amp; j,\n    const ContactElement &amp; element\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_element.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/","title":"Class uipc::core::ContactModel","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#class-uipccorecontactmodel","title":"Class uipc::core::ContactModel","text":"<p>ClassList &gt; uipc &gt; core &gt; ContactModel</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#public-functions","title":"Public Functions","text":"Type Name ContactModel () noexcept ContactModel (const Vector2i &amp; ids, Float friction_rate, Float resistance, bool enable, const Json &amp; config)  const Json &amp; config () const Float friction_rate () const bool is_enabled () const Float resistance () const const Vector2i &amp; topo () const"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#function-contactmodel-12","title":"function ContactModel [1/2]","text":"<pre><code>uipc::core::ContactModel::ContactModel () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#function-contactmodel-22","title":"function ContactModel [2/2]","text":"<pre><code>uipc::core::ContactModel::ContactModel (\n    const Vector2i &amp; ids,\n    Float friction_rate,\n    Float resistance,\n    bool enable,\n    const Json &amp; config\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#function-config","title":"function config","text":"<pre><code>const Json &amp; uipc::core::ContactModel::config () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#function-friction_rate","title":"function friction_rate","text":"<pre><code>Float uipc::core::ContactModel::friction_rate () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#function-is_enabled","title":"function is_enabled","text":"<pre><code>bool uipc::core::ContactModel::is_enabled () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#function-resistance","title":"function resistance","text":"<pre><code>Float uipc::core::ContactModel::resistance () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#function-topo","title":"function topo","text":"<pre><code>const Vector2i &amp; uipc::core::ContactModel::topo () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#friend-from_json","title":"friend from_json","text":"<pre><code>void uipc::core::ContactModel::from_json (\n    const Json &amp; json,\n    ContactModel &amp; model\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model/#friend-to_json","title":"friend to_json","text":"<pre><code>void uipc::core::ContactModel::to_json (\n    Json &amp; json,\n    const ContactModel &amp; model\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_model.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/","title":"Class uipc::core::ContactModelCollectionT","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#class-uipccorecontactmodelcollectiont","title":"Class uipc::core::ContactModelCollectionT","text":"<p>template &lt;bool IsConst&gt;</p> <p>ClassList &gt; uipc &gt; core &gt; ContactModelCollectionT</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#public-functions","title":"Public Functions","text":"Type Name auto create (std::string_view name, const T &amp; default_value={}, bool allow_destroy=true)  auto find (std::string_view name)  auto find (std::string_view name)  auto to_json () const"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#function-create","title":"function create","text":"<pre><code>template&lt;typename T&gt;\ninline auto uipc::core::ContactModelCollectionT::create (\n    std::string_view name,\n    const T &amp; default_value={},\n    bool allow_destroy=true\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#function-find-12","title":"function find [1/2]","text":"<pre><code>template&lt;typename T&gt;\ninline auto uipc::core::ContactModelCollectionT::find (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#function-find-22","title":"function find [2/2]","text":"<pre><code>inline auto uipc::core::ContactModelCollectionT::find (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#function-to_json","title":"function to_json","text":"<pre><code>inline auto uipc::core::ContactModelCollectionT::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_model_collection_t/#friend-attributefriend","title":"friend AttributeFriend","text":"<pre><code>template&lt;typename T&gt;\nclass uipc::core::ContactModelCollectionT::AttributeFriend (\n    geometry::AttributeFriend\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_model_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/","title":"Class uipc::core::ContactTabular","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#class-uipccorecontacttabular","title":"Class uipc::core::ContactTabular","text":"<p>ClassList &gt; uipc &gt; core &gt; ContactTabular</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#public-functions","title":"Public Functions","text":"Type Name ContactTabular () noexcept ContactTabular (const ContactTabular &amp;) = delete ContactModel at (SizeT i, SizeT j) const ContactModelCollection contact_models () noexcept CContactModelCollection contact_models () noexcept const ContactElement create (std::string_view name=\"\") noexcept ContactElement default_element () noexcept void default_model (Float friction_rate, Float resistance, bool enable=true, const Json &amp; config=default_config()) noexcept ContactModel default_model () noexcept const SizeT element_count () noexcept const IndexT insert (const ContactElement &amp; L, const ContactElement &amp; R, Float friction_rate, Float resistance, bool enable=true, const Json &amp; config=default_config())  ContactTabular &amp; operator= (const ContactTabular &amp;) = delete ~ContactTabular () noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-contacttabular-12","title":"function ContactTabular [1/2]","text":"<pre><code>uipc::core::ContactTabular::ContactTabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-contacttabular-22","title":"function ContactTabular [2/2]","text":"<pre><code>uipc::core::ContactTabular::ContactTabular (\n    const ContactTabular &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-at","title":"function at","text":"<pre><code>ContactModel uipc::core::ContactTabular::at (\n    SizeT i,\n    SizeT j\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-contact_models-12","title":"function contact_models [1/2]","text":"<pre><code>ContactModelCollection uipc::core::ContactTabular::contact_models () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-contact_models-22","title":"function contact_models [2/2]","text":"<pre><code>CContactModelCollection uipc::core::ContactTabular::contact_models () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-create","title":"function create","text":"<pre><code>ContactElement uipc::core::ContactTabular::create (\n    std::string_view name=\"\"\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-default_element","title":"function default_element","text":"<pre><code>ContactElement uipc::core::ContactTabular::default_element () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-default_model-12","title":"function default_model [1/2]","text":"<pre><code>void uipc::core::ContactTabular::default_model (\n    Float friction_rate,\n    Float resistance,\n    bool enable=true,\n    const Json &amp; config=default_config()\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-default_model-22","title":"function default_model [2/2]","text":"<pre><code>ContactModel uipc::core::ContactTabular::default_model () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-element_count","title":"function element_count","text":"<pre><code>SizeT uipc::core::ContactTabular::element_count () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-insert","title":"function insert","text":"<pre><code>IndexT uipc::core::ContactTabular::insert (\n    const ContactElement &amp; L,\n    const ContactElement &amp; R,\n    Float friction_rate,\n    Float resistance,\n    bool enable=true,\n    const Json &amp; config=default_config()\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-operator","title":"function operator=","text":"<pre><code>ContactTabular &amp; uipc::core::ContactTabular::operator= (\n    const ContactTabular &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-contacttabular","title":"function ~ContactTabular","text":"<pre><code>uipc::core::ContactTabular::~ContactTabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::core::ContactTabular::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::ContactTabular::Scene (\n    internal::Scene\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#friend-to_json","title":"friend to_json","text":"<pre><code>void uipc::core::ContactTabular::to_json (\n    Json &amp; j,\n    const ContactTabular &amp; ct\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_contact_tabular/#friend-contacttabularvisitor","title":"friend ContactTabularVisitor","text":"<pre><code>class uipc::core::ContactTabular::ContactTabularVisitor (\n    uipc::backend::ContactTabularVisitor\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_tabular.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/","title":"Class uipc::core::DiffSim","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#class-uipccorediffsim","title":"Class uipc::core::DiffSim","text":"<p>ClassList &gt; uipc &gt; core &gt; DiffSim</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#public-functions","title":"Public Functions","text":"Type Name diff_sim::ParameterCollection &amp; parameters ()  const diff_sim::ParameterCollection &amp; parameters () const ~DiffSim ()"},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#function-parameters-12","title":"function parameters [1/2]","text":"<pre><code>diff_sim::ParameterCollection &amp; uipc::core::DiffSim::parameters () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#function-parameters-22","title":"function parameters [2/2]","text":"<pre><code>const diff_sim::ParameterCollection &amp; uipc::core::DiffSim::parameters () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#function-diffsim","title":"function ~DiffSim","text":"<pre><code>uipc::core::DiffSim::~DiffSim () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#friend-diffsimvisitor","title":"friend DiffSimVisitor","text":"<pre><code>class uipc::core::DiffSim::DiffSimVisitor (\n    backend::DiffSimVisitor\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_diff_sim/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::DiffSim::Scene (\n    internal::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/diff_sim.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/","title":"Class uipc::core::Engine","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#class-uipccoreengine","title":"Class uipc::core::Engine","text":"<p>ClassList &gt; uipc &gt; core &gt; Engine</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#public-functions","title":"Public Functions","text":"Type Name Engine (std::string_view backend_name, std::string_view workspace=\"./\", const Json &amp; config=default_config())  Engine (const Engine &amp;) = delete Engine (Engine &amp;&amp;) noexcept std::string_view backend_name () noexcept const const FeatureCollection &amp; features ()  Engine &amp; operator= (const Engine &amp;) = delete Engine &amp; operator= (Engine &amp;&amp;) noexcept EngineStatusCollection &amp; status ()  Json to_json () const std::string_view workspace () noexcept const ~Engine ()"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config ()"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-engine-13","title":"function Engine [1/3]","text":"<pre><code>uipc::core::Engine::Engine (\n    std::string_view backend_name,\n    std::string_view workspace=\"./\",\n    const Json &amp; config=default_config()\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-engine-23","title":"function Engine [2/3]","text":"<pre><code>uipc::core::Engine::Engine (\n    const Engine &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-engine-33","title":"function Engine [3/3]","text":"<pre><code>uipc::core::Engine::Engine (\n    Engine &amp;&amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-backend_name","title":"function backend_name","text":"<pre><code>std::string_view uipc::core::Engine::backend_name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-features","title":"function features","text":"<pre><code>const FeatureCollection &amp; uipc::core::Engine::features () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-operator","title":"function operator=","text":"<pre><code>Engine &amp; uipc::core::Engine::operator= (\n    const Engine &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-operator_1","title":"function operator=","text":"<pre><code>Engine &amp; uipc::core::Engine::operator= (\n    Engine &amp;&amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-status","title":"function status","text":"<pre><code>EngineStatusCollection &amp; uipc::core::Engine::status () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::core::Engine::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-workspace","title":"function workspace","text":"<pre><code>std::string_view uipc::core::Engine::workspace () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-engine","title":"function ~Engine","text":"<pre><code>uipc::core::Engine::~Engine () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::core::Engine::default_config () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/engine.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_exception/","title":"Class uipc::core::EngineException","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_exception/#class-uipccoreengineexception","title":"Class uipc::core::EngineException","text":"<p>ClassList &gt; uipc &gt; core &gt; EngineException</p> <p>Inherits the following classes: uipc::Exception</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_exception/#public-functions","title":"Public Functions","text":"Type Name Exception (const string &amp; msg)"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_exception/#public-functions-inherited-from-uipcexception","title":"Public Functions inherited from uipc::Exception","text":"<p>See uipc::Exception</p> Type Name Exception (const string &amp; msg)  virtual const char * what () noexcept override const"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_exception/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_exception/#function-exception","title":"function Exception","text":"<pre><code>uipc::core::EngineException::Exception (\n    const string &amp; msg\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/engine.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/","title":"Class uipc::core::EngineStatus","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#class-uipccoreenginestatus","title":"Class uipc::core::EngineStatus","text":"<p>ClassList &gt; uipc &gt; core &gt; EngineStatus</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#public-types","title":"Public Types","text":"Type Name enum int Type"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#public-functions","title":"Public Functions","text":"Type Name EngineStatus () = default Type type () noexcept const std::string_view what () noexcept const ~EngineStatus () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#public-static-functions","title":"Public Static Functions","text":"Type Name EngineStatus error (std::string_view msg)  EngineStatus info (std::string_view msg)  EngineStatus warning (std::string_view msg)"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#enum-type","title":"enum Type","text":"<pre><code>enum uipc::core::EngineStatus::Type {\n    None,\n    Info,\n    Warning,\n    Error\n};\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#function-enginestatus","title":"function EngineStatus","text":"<pre><code>uipc::core::EngineStatus::EngineStatus () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#function-type","title":"function type","text":"<pre><code>Type uipc::core::EngineStatus::type () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#function-what","title":"function what","text":"<pre><code>std::string_view uipc::core::EngineStatus::what () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#function-enginestatus_1","title":"function ~EngineStatus","text":"<pre><code>uipc::core::EngineStatus::~EngineStatus () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#function-error","title":"function error","text":"<pre><code>static EngineStatus uipc::core::EngineStatus::error (\n    std::string_view msg\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#function-info","title":"function info","text":"<pre><code>static EngineStatus uipc::core::EngineStatus::info (\n    std::string_view msg\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status/#function-warning","title":"function warning","text":"<pre><code>static EngineStatus uipc::core::EngineStatus::warning (\n    std::string_view msg\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/engine_status.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/","title":"Class uipc::core::EngineStatusCollection","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#class-uipccoreenginestatuscollection","title":"Class uipc::core::EngineStatusCollection","text":"<p>ClassList &gt; uipc &gt; core &gt; EngineStatusCollection</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#public-functions","title":"Public Functions","text":"Type Name EngineStatusCollection ()  void clear ()  bool has_error () noexcept const void push_back (const EngineStatus &amp; error)  void push_back (EngineStatus &amp;&amp; error)  Json to_json () const ~EngineStatusCollection ()"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#function-enginestatuscollection","title":"function EngineStatusCollection","text":"<pre><code>uipc::core::EngineStatusCollection::EngineStatusCollection () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#function-clear","title":"function clear","text":"<pre><code>void uipc::core::EngineStatusCollection::clear () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#function-has_error","title":"function has_error","text":"<pre><code>bool uipc::core::EngineStatusCollection::has_error () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#function-push_back-12","title":"function push_back [1/2]","text":"<pre><code>void uipc::core::EngineStatusCollection::push_back (\n    const EngineStatus &amp; error\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#function-push_back-22","title":"function push_back [2/2]","text":"<pre><code>void uipc::core::EngineStatusCollection::push_back (\n    EngineStatus &amp;&amp; error\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::core::EngineStatusCollection::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_engine_status_collection/#function-enginestatuscollection_1","title":"function ~EngineStatusCollection","text":"<pre><code>uipc::core::EngineStatusCollection::~EngineStatusCollection () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/engine_status.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature/","title":"Class uipc::core::Feature","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_feature/#class-uipccorefeature","title":"Class uipc::core::Feature","text":"<p>ClassList &gt; uipc &gt; core &gt; Feature</p> <p>Inherits the following classes: uipc::core::IFeature</p> <p>Inherited by the following classes: uipc::diff_sim::AdjointMethodFeature,  uipc::diff_sim::EnableGradFeature</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature/#public-functions-inherited-from-uipccoreifeature","title":"Public Functions inherited from uipc::core::IFeature","text":"<p>See uipc::core::IFeature</p> Type Name std::string_view name () const std::string_view type_name () const virtual ~IFeature () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_feature/#protected-functions-inherited-from-uipccoreifeature","title":"Protected Functions inherited from uipc::core::IFeature","text":"<p>See uipc::core::IFeature</p> Type Name virtual std::string_view get_name () const = 0 virtual std::string_view get_type_name () const = 0 <p>The documentation for this class was generated from the following file <code>include/uipc/core/feature.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/","title":"Class uipc::core::FeatureCollection","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#class-uipccorefeaturecollection","title":"Class uipc::core::FeatureCollection","text":"<p>ClassList &gt; uipc &gt; core &gt; FeatureCollection</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#public-functions","title":"Public Functions","text":"Type Name S&lt; IFeature &gt; find (std::string_view name) const S&lt; T &gt; find (std::string_view name=T::FeatureName) const void insert (std::string_view name, S&lt; IFeature &gt; feature)  void insert (S&lt; T &gt; feature)  Json to_json () const virtual ~FeatureCollection () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#function-find-12","title":"function find [1/2]","text":"<pre><code>S&lt; IFeature &gt; uipc::core::FeatureCollection::find (\n    std::string_view name\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#function-find-22","title":"function find [2/2]","text":"<pre><code>template&lt;std::derived_from&lt; IFeature &gt; T&gt;\ninline S&lt; T &gt; uipc::core::FeatureCollection::find (\n    std::string_view name=T::FeatureName\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#function-insert-12","title":"function insert [1/2]","text":"<pre><code>void uipc::core::FeatureCollection::insert (\n    std::string_view name,\n    S&lt; IFeature &gt; feature\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#function-insert-22","title":"function insert [2/2]","text":"<pre><code>template&lt;std::derived_from&lt; IFeature &gt; T&gt;\ninline void uipc::core::FeatureCollection::insert (\n    S&lt; T &gt; feature\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::core::FeatureCollection::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_feature_collection/#function-featurecollection","title":"function ~FeatureCollection","text":"<pre><code>virtual uipc::core::FeatureCollection::~FeatureCollection () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/feature_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/","title":"Class uipc::core::IEngine","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#class-uipccoreiengine","title":"Class uipc::core::IEngine","text":"<p>ClassList &gt; uipc &gt; core &gt; IEngine</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#public-functions","title":"Public Functions","text":"Type Name void advance ()  void backward ()  bool dump ()  const FeatureCollection &amp; features () const SizeT frame () const void init (internal::World &amp; w)  bool recover (SizeT dst_frame)  void retrieve ()  EngineStatusCollection &amp; status ()  void sync ()  Json to_json () const virtual ~IEngine () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#protected-functions","title":"Protected Functions","text":"Type Name virtual void do_advance () = 0 virtual void do_backward () = 0 virtual bool do_dump ()  virtual void do_init (internal::World &amp;) = 0 virtual bool do_recover (SizeT dst_frame)  virtual void do_retrieve () = 0 virtual void do_sync () = 0 virtual Json do_to_json () const virtual const FeatureCollection &amp; get_features () const = 0 virtual SizeT get_frame () const = 0 virtual EngineStatusCollection &amp; get_status () = 0"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-advance","title":"function advance","text":"<pre><code>void uipc::core::IEngine::advance () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-backward","title":"function backward","text":"<pre><code>void uipc::core::IEngine::backward () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-dump","title":"function dump","text":"<pre><code>bool uipc::core::IEngine::dump () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-features","title":"function features","text":"<pre><code>const FeatureCollection &amp; uipc::core::IEngine::features () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-frame","title":"function frame","text":"<pre><code>SizeT uipc::core::IEngine::frame () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-init","title":"function init","text":"<pre><code>void uipc::core::IEngine::init (\n    internal::World &amp; w\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-recover","title":"function recover","text":"<pre><code>bool uipc::core::IEngine::recover (\n    SizeT dst_frame\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-retrieve","title":"function retrieve","text":"<pre><code>void uipc::core::IEngine::retrieve () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-status","title":"function status","text":"<pre><code>EngineStatusCollection &amp; uipc::core::IEngine::status () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-sync","title":"function sync","text":"<pre><code>void uipc::core::IEngine::sync () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::core::IEngine::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-iengine","title":"function ~IEngine","text":"<pre><code>virtual uipc::core::IEngine::~IEngine () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_advance","title":"function do_advance","text":"<pre><code>virtual void uipc::core::IEngine::do_advance () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_backward","title":"function do_backward","text":"<pre><code>virtual void uipc::core::IEngine::do_backward () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_dump","title":"function do_dump","text":"<pre><code>virtual bool uipc::core::IEngine::do_dump () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_init","title":"function do_init","text":"<pre><code>virtual void uipc::core::IEngine::do_init (\n    internal::World &amp;\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_recover","title":"function do_recover","text":"<pre><code>virtual bool uipc::core::IEngine::do_recover (\n    SizeT dst_frame\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_retrieve","title":"function do_retrieve","text":"<pre><code>virtual void uipc::core::IEngine::do_retrieve () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_sync","title":"function do_sync","text":"<pre><code>virtual void uipc::core::IEngine::do_sync () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-do_to_json","title":"function do_to_json","text":"<pre><code>virtual Json uipc::core::IEngine::do_to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-get_features","title":"function get_features","text":"<pre><code>virtual const FeatureCollection &amp; uipc::core::IEngine::get_features () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-get_frame","title":"function get_frame","text":"<pre><code>virtual SizeT uipc::core::IEngine::get_frame () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_engine/#function-get_status","title":"function get_status","text":"<pre><code>virtual EngineStatusCollection &amp; uipc::core::IEngine::get_status () = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_engine.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/","title":"Class uipc::core::IFeature","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#class-uipccoreifeature","title":"Class uipc::core::IFeature","text":"<p>ClassList &gt; uipc &gt; core &gt; IFeature</p> <p>Inherited by the following classes: uipc::core::Feature</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#public-functions","title":"Public Functions","text":"Type Name std::string_view name () const std::string_view type_name () const virtual ~IFeature () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#protected-functions","title":"Protected Functions","text":"Type Name virtual std::string_view get_name () const = 0 virtual std::string_view get_type_name () const = 0"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#function-name","title":"function name","text":"<pre><code>std::string_view uipc::core::IFeature::name () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#function-type_name","title":"function type_name","text":"<pre><code>std::string_view uipc::core::IFeature::type_name () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#function-ifeature","title":"function ~IFeature","text":"<pre><code>virtual uipc::core::IFeature::~IFeature () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#function-get_name","title":"function get_name","text":"<pre><code>virtual std::string_view uipc::core::IFeature::get_name () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_feature/#function-get_type_name","title":"function get_type_name","text":"<pre><code>virtual std::string_view uipc::core::IFeature::get_type_name () const = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/feature.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/","title":"Class uipc::core::IObject","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#class-uipccoreiobject","title":"Class uipc::core::IObject","text":"<p>ClassList &gt; uipc &gt; core &gt; IObject</p> <p>Inherited by the following classes: uipc::core::Object</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#public-functions","title":"Public Functions","text":"Type Name IndexT id () noexcept const std::string_view name () noexcept const virtual ~IObject () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#protected-functions","title":"Protected Functions","text":"Type Name virtual IndexT get_id () noexcept const = 0 virtual std::string_view get_name () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#function-id","title":"function id","text":"<pre><code>IndexT uipc::core::IObject::id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#function-name","title":"function name","text":"<pre><code>std::string_view uipc::core::IObject::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#function-iobject","title":"function ~IObject","text":"<pre><code>virtual uipc::core::IObject::~IObject () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#function-get_id","title":"function get_id","text":"<pre><code>virtual IndexT uipc::core::IObject::get_id () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object/#function-get_name","title":"function get_name","text":"<pre><code>virtual std::string_view uipc::core::IObject::get_name () noexcept const = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object_collection/","title":"Class uipc::core::IObjectCollection","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_object_collection/#class-uipccoreiobjectcollection","title":"Class uipc::core::IObjectCollection","text":"<p>ClassList &gt; uipc &gt; core &gt; IObjectCollection</p> <p>Inherited by the following classes: uipc::core::ObjectCollection</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object_collection/#public-functions","title":"Public Functions","text":"Type Name virtual ~IObjectCollection () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_i_object_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_object_collection/#function-iobjectcollection","title":"function ~IObjectCollection","text":"<pre><code>virtual uipc::core::IObjectCollection::~IObjectCollection () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/","title":"Class uipc::core::ISanityChecker","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#class-uipccoreisanitychecker","title":"Class uipc::core::ISanityChecker","text":"<p>ClassList &gt; uipc &gt; core &gt; ISanityChecker</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#public-functions","title":"Public Functions","text":"Type Name virtual void build ()  SanityCheckResult check (SanityCheckMessage &amp; msg)  U64 id () noexcept const std::string name () noexcept const virtual ~ISanityChecker () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#protected-functions","title":"Protected Functions","text":"Type Name virtual SanityCheckResult do_check (SanityCheckMessage &amp; msg) = 0 virtual U64 get_id () noexcept const = 0 virtual std::string get_name () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-build","title":"function build","text":"<pre><code>virtual void uipc::core::ISanityChecker::build () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-check","title":"function check","text":"<pre><code>SanityCheckResult uipc::core::ISanityChecker::check (\n    SanityCheckMessage &amp; msg\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-id","title":"function id","text":"<pre><code>U64 uipc::core::ISanityChecker::id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-name","title":"function name","text":"<pre><code>std::string uipc::core::ISanityChecker::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-isanitychecker","title":"function ~ISanityChecker","text":"<pre><code>virtual uipc::core::ISanityChecker::~ISanityChecker () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-do_check","title":"function do_check","text":"<pre><code>virtual SanityCheckResult uipc::core::ISanityChecker::do_check (\n    SanityCheckMessage &amp; msg\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-get_id","title":"function get_id","text":"<pre><code>virtual U64 uipc::core::ISanityChecker::get_id () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker/#function-get_name","title":"function get_name","text":"<pre><code>virtual std::string uipc::core::ISanityChecker::get_name () noexcept const = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_sanity_checker.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker_collection/","title":"Class uipc::core::ISanityCheckerCollection","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker_collection/#class-uipccoreisanitycheckercollection","title":"Class uipc::core::ISanityCheckerCollection","text":"<p>ClassList &gt; uipc &gt; core &gt; ISanityCheckerCollection</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker_collection/#public-functions","title":"Public Functions","text":"Type Name virtual void build (core::internal::Scene &amp; s) = 0 virtual SanityCheckResult check (SanityCheckMessageCollection &amp; msg) const = 0 virtual ~ISanityCheckerCollection () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker_collection/#function-build","title":"function build","text":"<pre><code>virtual void uipc::core::ISanityCheckerCollection::build (\n    core::internal::Scene &amp; s\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker_collection/#function-check","title":"function check","text":"<pre><code>virtual SanityCheckResult uipc::core::ISanityCheckerCollection::check (\n    SanityCheckMessageCollection &amp; msg\n) const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_i_sanity_checker_collection/#function-isanitycheckercollection","title":"function ~ISanityCheckerCollection","text":"<pre><code>virtual uipc::core::ISanityCheckerCollection::~ISanityCheckerCollection () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_sanity_checker.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/","title":"Class uipc::core::Object","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object/#class-uipccoreobject","title":"Class uipc::core::Object","text":"<p>ClassList &gt; uipc &gt; core &gt; Object</p> <p>Inherits the following classes: uipc::core::IObject</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#classes","title":"Classes","text":"Type Name class CGeometries class Geometries"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#public-functions","title":"Public Functions","text":"Type Name Object (internal::Scene &amp; scene, IndexT id, std::string_view name=\"\") noexcept Object () noexcept Object (Object &amp;&amp;) = default Object (const Object &amp;) = delete Geometries geometries () noexcept CGeometries geometries () noexcept const Object &amp; operator= (const Object &amp;) = delete Object &amp; operator= (Object &amp;&amp;) = delete ~Object ()"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#public-functions-inherited-from-uipccoreiobject","title":"Public Functions inherited from uipc::core::IObject","text":"<p>See uipc::core::IObject</p> Type Name IndexT id () noexcept const std::string_view name () noexcept const virtual ~IObject () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#protected-functions","title":"Protected Functions","text":"Type Name virtual IndexT get_id () noexcept override const virtual std::string_view get_name () noexcept override const"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#protected-functions-inherited-from-uipccoreiobject","title":"Protected Functions inherited from uipc::core::IObject","text":"<p>See uipc::core::IObject</p> Type Name virtual IndexT get_id () noexcept const = 0 virtual std::string_view get_name () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-object-14","title":"function Object [1/4]","text":"<pre><code>uipc::core::Object::Object (\n    internal::Scene &amp; scene,\n    IndexT id,\n    std::string_view name=\"\"\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-object-24","title":"function Object [2/4]","text":"<pre><code>uipc::core::Object::Object () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-object-34","title":"function Object [3/4]","text":"<pre><code>uipc::core::Object::Object (\n    Object &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-object-44","title":"function Object [4/4]","text":"<pre><code>uipc::core::Object::Object (\n    const Object &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-geometries-12","title":"function geometries [1/2]","text":"<pre><code>Geometries uipc::core::Object::geometries () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-geometries-22","title":"function geometries [2/2]","text":"<pre><code>CGeometries uipc::core::Object::geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-operator","title":"function operator=","text":"<pre><code>Object &amp; uipc::core::Object::operator= (\n    const Object &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-operator_1","title":"function operator=","text":"<pre><code>Object &amp; uipc::core::Object::operator= (\n    Object &amp;&amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-object","title":"function ~Object","text":"<pre><code>uipc::core::Object::~Object () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-get_id","title":"function get_id","text":"<pre><code>virtual IndexT uipc::core::Object::get_id () noexcept override const\n</code></pre> <p>Implements uipc::core::IObject::get_id</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#function-get_name","title":"function get_name","text":"<pre><code>virtual std::string_view uipc::core::Object::get_name () noexcept override const\n</code></pre> <p>Implements uipc::core::IObject::get_name</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object/#friend-formatter-object","title":"friend formatter&lt; Object &gt;","text":"<pre><code>struct uipc::core::Object::formatter&lt; Object &gt; (\n    fmt::formatter&lt; Object &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_c_geometries/","title":"Class uipc::core::Object::CGeometries","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_c_geometries/#class-uipccoreobjectcgeometries","title":"Class uipc::core::Object::CGeometries","text":"<p>ClassList &gt; uipc &gt; core &gt; Object &gt; CGeometries</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_c_geometries/#public-functions","title":"Public Functions","text":"Type Name span&lt; const IndexT &gt; ids () noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_c_geometries/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_c_geometries/#function-ids","title":"function ids","text":"<pre><code>span&lt; const IndexT &gt; uipc::core::Object::CGeometries::ids () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_geometries/","title":"Class uipc::core::Object::Geometries","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_geometries/#class-uipccoreobjectgeometries","title":"Class uipc::core::Object::Geometries","text":"<p>ClassList &gt; uipc &gt; core &gt; Object &gt; Geometries</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_geometries/#public-functions","title":"Public Functions","text":"Type Name ObjectGeometrySlots&lt; GeometryT &gt; create (const GeometryT &amp; geometry)  ObjectGeometrySlots&lt; GeometryT &gt; create (const GeometryT &amp; geometry, const GeometryT &amp; rest_geometry)  span&lt; const IndexT &gt; ids () noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_geometries/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_geometries/#function-create-12","title":"function create [1/2]","text":"<pre><code>template&lt;std::derived_from&lt; geometry::Geometry &gt; GeometryT&gt;\nObjectGeometrySlots &lt; GeometryT &gt; uipc::core::Object::Geometries::create (\n    const GeometryT &amp; geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_geometries/#function-create-22","title":"function create [2/2]","text":"<pre><code>template&lt;std::derived_from&lt; geometry::Geometry &gt; GeometryT&gt;\nObjectGeometrySlots &lt; GeometryT &gt; uipc::core::Object::Geometries::create (\n    const GeometryT &amp; geometry,\n    const GeometryT &amp; rest_geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_1_1_geometries/#function-ids","title":"function ids","text":"<pre><code>span&lt; const IndexT &gt; uipc::core::Object::Geometries::ids () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/","title":"Class uipc::core::ObjectCollection","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#class-uipccoreobjectcollection","title":"Class uipc::core::ObjectCollection","text":"<p>ClassList &gt; uipc &gt; core &gt; ObjectCollection</p> <p>Inherits the following classes: uipc::core::IObjectCollection</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#public-functions","title":"Public Functions","text":"Type Name ObjectCollection () = default void destroy (IndexT id) noexcept S&lt; Object &gt; emplace (Object &amp;&amp; object)  S&lt; Object &gt; find (IndexT id) noexcept S&lt; const Object &gt; find (IndexT id) noexcept const vector&lt; S&lt; Object &gt; &gt; find (std::string_view name) noexcept vector&lt; S&lt; const Object &gt; &gt; find (std::string_view name) noexcept const IndexT next_id () noexcept const void reserve (SizeT size) noexcept SizeT size () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#public-functions-inherited-from-uipccoreiobjectcollection","title":"Public Functions inherited from uipc::core::IObjectCollection","text":"<p>See uipc::core::IObjectCollection</p> Type Name virtual ~IObjectCollection () = default"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-objectcollection","title":"function ObjectCollection","text":"<pre><code>uipc::core::ObjectCollection::ObjectCollection () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-destroy","title":"function destroy","text":"<pre><code>void uipc::core::ObjectCollection::destroy (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-emplace","title":"function emplace","text":"<pre><code>S&lt; Object &gt; uipc::core::ObjectCollection::emplace (\n    Object &amp;&amp; object\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-find-14","title":"function find [1/4]","text":"<pre><code>S&lt; Object &gt; uipc::core::ObjectCollection::find (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-find-24","title":"function find [2/4]","text":"<pre><code>S&lt; const Object &gt; uipc::core::ObjectCollection::find (\n    IndexT id\n) noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-find-34","title":"function find [3/4]","text":"<pre><code>vector&lt; S&lt; Object &gt; &gt; uipc::core::ObjectCollection::find (\n    std::string_view name\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-find-44","title":"function find [4/4]","text":"<pre><code>vector&lt; S&lt; const Object &gt; &gt; uipc::core::ObjectCollection::find (\n    std::string_view name\n) noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-next_id","title":"function next_id","text":"<pre><code>IndexT uipc::core::ObjectCollection::next_id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-reserve","title":"function reserve","text":"<pre><code>void uipc::core::ObjectCollection::reserve (\n    SizeT size\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#function-size","title":"function size","text":"<pre><code>SizeT uipc::core::ObjectCollection::size () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#friend-formatter-objectcollection","title":"friend formatter&lt; ObjectCollection &gt;","text":"<pre><code>struct uipc::core::ObjectCollection::formatter&lt; ObjectCollection &gt; (\n    fmt::formatter&lt; ObjectCollection &gt;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::ObjectCollection::Scene (\n    internal::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection_snapshot/","title":"Class uipc::core::ObjectCollectionSnapshot","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection_snapshot/#class-uipccoreobjectcollectionsnapshot","title":"Class uipc::core::ObjectCollectionSnapshot","text":"<p>ClassList &gt; uipc &gt; core &gt; ObjectCollectionSnapshot</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection_snapshot/#public-functions","title":"Public Functions","text":"Type Name ObjectCollectionSnapshot () = default ObjectCollectionSnapshot (const ObjectCollection &amp; dst)"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection_snapshot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection_snapshot/#function-objectcollectionsnapshot-12","title":"function ObjectCollectionSnapshot [1/2]","text":"<pre><code>uipc::core::ObjectCollectionSnapshot::ObjectCollectionSnapshot () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_collection_snapshot/#function-objectcollectionsnapshot-22","title":"function ObjectCollectionSnapshot [2/2]","text":"<pre><code>uipc::core::ObjectCollectionSnapshot::ObjectCollectionSnapshot (\n    const ObjectCollection &amp; dst\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots/","title":"Class uipc::core::ObjectGeometrySlots","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots/#class-uipccoreobjectgeometryslots","title":"Class uipc::core::ObjectGeometrySlots","text":"<p>template &lt;std::derived_from&lt; geometry::Geometry &gt; GeometryT&gt;</p> <p>ClassList &gt; uipc &gt; core &gt; ObjectGeometrySlots</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots/#public-attributes","title":"Public Attributes","text":"Type Name S&lt; AutoGeometrySlot &gt; geometry S&lt; AutoGeometrySlot &gt; rest_geometry"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots/#variable-geometry","title":"variable geometry","text":"<pre><code>S&lt;AutoGeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; GeometryT &gt;::geometry;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots/#variable-rest_geometry","title":"variable rest_geometry","text":"<pre><code>S&lt;AutoGeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; GeometryT &gt;::rest_geometry;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/","title":"Class uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/#class-uipccoreobjectgeometryslots-const-geometrygeometry","title":"Class uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; uipc &gt; core &gt; ObjectGeometrySlots&lt; const geometry::Geometry &gt;</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/#public-attributes","title":"Public Attributes","text":"Type Name S&lt; const geometry::GeometrySlot &gt; geometry S&lt; AutoGeometrySlot &gt; geometry S&lt; const geometry::GeometrySlot &gt; rest_geometry S&lt; AutoGeometrySlot &gt; rest_geometry"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/#variable-geometry-12","title":"variable geometry [1/2]","text":"<pre><code>S&lt;const geometry::GeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;::geometry;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/#variable-geometry-22","title":"variable geometry [2/2]","text":"<pre><code>S&lt;AutoGeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; GeometryT &gt;::geometry;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/#variable-rest_geometry-12","title":"variable rest_geometry [1/2]","text":"<pre><code>S&lt;const geometry::GeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;::rest_geometry;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01const_01geometry_1_1_geometry_01_4/#variable-rest_geometry-22","title":"variable rest_geometry [2/2]","text":"<pre><code>S&lt;AutoGeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; GeometryT &gt;::rest_geometry;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/","title":"Class uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/#class-uipccoreobjectgeometryslots-geometrygeometry","title":"Class uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; uipc &gt; core &gt; ObjectGeometrySlots&lt; geometry::Geometry &gt;</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/#public-attributes","title":"Public Attributes","text":"Type Name S&lt; geometry::GeometrySlot &gt; geometry S&lt; AutoGeometrySlot &gt; geometry S&lt; geometry::GeometrySlot &gt; rest_geometry S&lt; AutoGeometrySlot &gt; rest_geometry"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/#variable-geometry-12","title":"variable geometry [1/2]","text":"<pre><code>S&lt;geometry::GeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;::geometry;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/#variable-geometry-22","title":"variable geometry [2/2]","text":"<pre><code>S&lt;AutoGeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; GeometryT &gt;::geometry;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/#variable-rest_geometry-12","title":"variable rest_geometry [1/2]","text":"<pre><code>S&lt;geometry::GeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;::rest_geometry;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_geometry_slots_3_01geometry_1_1_geometry_01_4/#variable-rest_geometry-22","title":"variable rest_geometry [2/2]","text":"<pre><code>S&lt;AutoGeometrySlot&gt; uipc::core::ObjectGeometrySlots&lt; GeometryT &gt;::rest_geometry;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/","title":"Class uipc::core::ObjectSnapshot","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#class-uipccoreobjectsnapshot","title":"Class uipc::core::ObjectSnapshot","text":"<p>ClassList &gt; uipc &gt; core &gt; ObjectSnapshot</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#public-functions","title":"Public Functions","text":"Type Name ObjectSnapshot () = default ObjectSnapshot (const Object &amp; object)  IndexT id () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#function-objectsnapshot-12","title":"function ObjectSnapshot [1/2]","text":"<pre><code>uipc::core::ObjectSnapshot::ObjectSnapshot () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#function-objectsnapshot-22","title":"function ObjectSnapshot [2/2]","text":"<pre><code>uipc::core::ObjectSnapshot::ObjectSnapshot (\n    const Object &amp; object\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#function-id","title":"function id","text":"<pre><code>inline IndexT uipc::core::ObjectSnapshot::id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_object_snapshot/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::ObjectSnapshot::Scene (\n    internal::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/object_snapshot.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/","title":"Class uipc::core::SanityCheckMessage","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#class-uipccoresanitycheckmessage","title":"Class uipc::core::SanityCheckMessage","text":"<p>ClassList &gt; uipc &gt; core &gt; SanityCheckMessage</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#public-functions","title":"Public Functions","text":"Type Name SanityCheckMessage () = default const unordered_map&lt; std::string, S&lt; geometry::Geometry &gt; &gt; &amp; geometries () noexcept const U64 id () noexcept const bool is_empty () noexcept const std::string_view message () noexcept const std::string_view name () noexcept const SanityCheckResult result () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#function-sanitycheckmessage","title":"function SanityCheckMessage","text":"<pre><code>uipc::core::SanityCheckMessage::SanityCheckMessage () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#function-geometries","title":"function geometries","text":"<pre><code>const unordered_map&lt; std::string, S&lt; geometry::Geometry &gt; &gt; &amp; uipc::core::SanityCheckMessage::geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#function-id","title":"function id","text":"<pre><code>U64 uipc::core::SanityCheckMessage::id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#function-is_empty","title":"function is_empty","text":"<pre><code>bool uipc::core::SanityCheckMessage::is_empty () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#function-message","title":"function message","text":"<pre><code>std::string_view uipc::core::SanityCheckMessage::message () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#function-name","title":"function name","text":"<pre><code>std::string_view uipc::core::SanityCheckMessage::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#function-result","title":"function result","text":"<pre><code>SanityCheckResult uipc::core::SanityCheckMessage::result () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message/#friend-sanitycheckmessagevisitor","title":"friend SanityCheckMessageVisitor","text":"<pre><code>class uipc::core::SanityCheckMessage::SanityCheckMessageVisitor (\n    backend::SanityCheckMessageVisitor\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_sanity_checker.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message_collection/","title":"Class uipc::core::SanityCheckMessageCollection","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message_collection/#class-uipccoresanitycheckmessagecollection","title":"Class uipc::core::SanityCheckMessageCollection","text":"<p>ClassList &gt; uipc &gt; core &gt; SanityCheckMessageCollection</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message_collection/#public-functions","title":"Public Functions","text":"Type Name SanityCheckMessageCollection () = default const auto &amp; messages () noexcept const auto &amp; messages () noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message_collection/#function-sanitycheckmessagecollection","title":"function SanityCheckMessageCollection","text":"<pre><code>uipc::core::SanityCheckMessageCollection::SanityCheckMessageCollection () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message_collection/#function-messages-12","title":"function messages [1/2]","text":"<pre><code>inline const auto &amp; uipc::core::SanityCheckMessageCollection::messages () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_check_message_collection/#function-messages-22","title":"function messages [2/2]","text":"<pre><code>inline auto &amp; uipc::core::SanityCheckMessageCollection::messages () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_sanity_checker.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/","title":"Class uipc::core::SanityChecker","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#class-uipccoresanitychecker","title":"Class uipc::core::SanityChecker","text":"<p>ClassList &gt; uipc &gt; core &gt; SanityChecker</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#public-functions","title":"Public Functions","text":"Type Name SanityChecker (internal::Scene &amp; scene)  SanityCheckResult check (std::string_view workspace)  void clear ()  const unordered_map&lt; U64, S&lt; SanityCheckMessage &gt; &gt; &amp; errors () const const unordered_map&lt; U64, S&lt; SanityCheckMessage &gt; &gt; &amp; infos () const void report ()  const unordered_map&lt; U64, S&lt; SanityCheckMessage &gt; &gt; &amp; warns () const ~SanityChecker ()"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-sanitychecker","title":"function SanityChecker","text":"<pre><code>uipc::core::SanityChecker::SanityChecker (\n    internal::Scene &amp; scene\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-check","title":"function check","text":"<pre><code>SanityCheckResult uipc::core::SanityChecker::check (\n    std::string_view workspace\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-clear","title":"function clear","text":"<pre><code>void uipc::core::SanityChecker::clear () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-errors","title":"function errors","text":"<pre><code>const unordered_map&lt; U64, S&lt; SanityCheckMessage &gt; &gt; &amp; uipc::core::SanityChecker::errors () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-infos","title":"function infos","text":"<pre><code>const unordered_map&lt; U64, S&lt; SanityCheckMessage &gt; &gt; &amp; uipc::core::SanityChecker::infos () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-report","title":"function report","text":"<pre><code>void uipc::core::SanityChecker::report () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-warns","title":"function warns","text":"<pre><code>const unordered_map&lt; U64, S&lt; SanityCheckMessage &gt; &gt; &amp; uipc::core::SanityChecker::warns () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker/#function-sanitychecker_1","title":"function ~SanityChecker","text":"<pre><code>uipc::core::SanityChecker::~SanityChecker () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/sanity_checker.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker_collection_create_info/","title":"Class uipc::core::SanityCheckerCollectionCreateInfo","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker_collection_create_info/#class-uipccoresanitycheckercollectioncreateinfo","title":"Class uipc::core::SanityCheckerCollectionCreateInfo","text":"<p>ClassList &gt; uipc &gt; core &gt; SanityCheckerCollectionCreateInfo</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker_collection_create_info/#public-attributes","title":"Public Attributes","text":"Type Name std::string_view workspace"},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker_collection_create_info/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_sanity_checker_collection_create_info/#variable-workspace","title":"variable workspace","text":"<pre><code>std::string_view uipc::core::SanityCheckerCollectionCreateInfo::workspace;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_sanity_checker.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/","title":"Class uipc::core::Scene","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#class-uipccorescene","title":"Class uipc::core::Scene","text":"<p>ClassList &gt; uipc &gt; core &gt; Scene</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#classes","title":"Classes","text":"Type Name class CGeometries class CObjects class Geometries class Objects"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#public-functions","title":"Public Functions","text":"Type Name Scene (const Json &amp; config=default_config())  Scene (const Scene &amp;) = delete Scene (Scene &amp;&amp;) = default Animator &amp; animator ()  const Animator &amp; animator () const const Json &amp; config () noexcept const ConstitutionTabular &amp; constitution_tabular () noexcept const ConstitutionTabular &amp; constitution_tabular () noexcept const ContactTabular &amp; contact_tabular () noexcept const ContactTabular &amp; contact_tabular () noexcept const DiffSim &amp; diff_sim ()  const DiffSim &amp; diff_sim () const Geometries geometries () noexcept CGeometries geometries () noexcept const const Json &amp; info () noexcept const Objects objects () noexcept CObjects objects () noexcept const SanityChecker &amp; sanity_checker ()  const SanityChecker &amp; sanity_checker () const void update_from (const SceneSnapshotCommit &amp; snapshot)  ~Scene ()"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config () noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-scene-14","title":"function Scene [1/4]","text":"<pre><code>explicit uipc::core::Scene::Scene (\n    const Json &amp; config=default_config()\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-scene-24","title":"function Scene [2/4]","text":"<pre><code>uipc::core::Scene::Scene (\n    const Scene &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-scene-34","title":"function Scene [3/4]","text":"<pre><code>uipc::core::Scene::Scene (\n    Scene &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-animator-12","title":"function animator [1/2]","text":"<pre><code>Animator &amp; uipc::core::Scene::animator () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-animator-22","title":"function animator [2/2]","text":"<pre><code>const Animator &amp; uipc::core::Scene::animator () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-config","title":"function config","text":"<pre><code>const Json &amp; uipc::core::Scene::config () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-constitution_tabular-12","title":"function constitution_tabular [1/2]","text":"<pre><code>ConstitutionTabular &amp; uipc::core::Scene::constitution_tabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-constitution_tabular-22","title":"function constitution_tabular [2/2]","text":"<pre><code>const ConstitutionTabular &amp; uipc::core::Scene::constitution_tabular () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-contact_tabular-12","title":"function contact_tabular [1/2]","text":"<pre><code>ContactTabular &amp; uipc::core::Scene::contact_tabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-contact_tabular-22","title":"function contact_tabular [2/2]","text":"<pre><code>const ContactTabular &amp; uipc::core::Scene::contact_tabular () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-diff_sim-12","title":"function diff_sim [1/2]","text":"<pre><code>DiffSim &amp; uipc::core::Scene::diff_sim () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-diff_sim-22","title":"function diff_sim [2/2]","text":"<pre><code>const DiffSim &amp; uipc::core::Scene::diff_sim () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-geometries-12","title":"function geometries [1/2]","text":"<pre><code>Geometries uipc::core::Scene::geometries () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-geometries-22","title":"function geometries [2/2]","text":"<pre><code>CGeometries uipc::core::Scene::geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-info","title":"function info","text":"<pre><code>const Json &amp; uipc::core::Scene::info () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-objects-12","title":"function objects [1/2]","text":"<pre><code>Objects uipc::core::Scene::objects () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-objects-22","title":"function objects [2/2]","text":"<pre><code>CObjects uipc::core::Scene::objects () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-sanity_checker-12","title":"function sanity_checker [1/2]","text":"<pre><code>SanityChecker &amp; uipc::core::Scene::sanity_checker () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-sanity_checker-22","title":"function sanity_checker [2/2]","text":"<pre><code>const SanityChecker &amp; uipc::core::Scene::sanity_checker () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-update_from","title":"function update_from","text":"<pre><code>void uipc::core::Scene::update_from (\n    const SceneSnapshotCommit &amp; snapshot\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-scene","title":"function ~Scene","text":"<pre><code>uipc::core::Scene::~Scene () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::core::Scene::default_config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#friend-scenevisitor","title":"friend SceneVisitor","text":"<pre><code>class uipc::core::Scene::SceneVisitor (\n    backend::SceneVisitor\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#friend-formatter-scene","title":"friend formatter&lt; Scene &gt;","text":"<pre><code>struct uipc::core::Scene::formatter&lt; Scene &gt; (\n    fmt::formatter&lt; Scene &gt;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene/#friend-sanitychecker","title":"friend SanityChecker","text":"<pre><code>class uipc::core::Scene::SanityChecker (\n    sanity_check::SanityChecker\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_geometries/","title":"Class uipc::core::Scene::CGeometries","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_geometries/#class-uipccorescenecgeometries","title":"Class uipc::core::Scene::CGeometries","text":"<p>ClassList &gt; uipc &gt; core &gt; Scene &gt; CGeometries</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_geometries/#public-functions","title":"Public Functions","text":"Type Name ObjectGeometrySlots&lt; const geometry::Geometry &gt; find (IndexT id) noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_geometries/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_geometries/#function-find","title":"function find","text":"<pre><code>ObjectGeometrySlots &lt; const geometry::Geometry &gt; uipc::core::Scene::CGeometries::find (\n    IndexT id\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/","title":"Class uipc::core::Scene::CObjects","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/#class-uipccorescenecobjects","title":"Class uipc::core::Scene::CObjects","text":"<p>ClassList &gt; uipc &gt; core &gt; Scene &gt; CObjects</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/#public-functions","title":"Public Functions","text":"Type Name SizeT created_count () noexcept const S&lt; const Object &gt; find (IndexT id) noexcept vector&lt; S&lt; const Object &gt; &gt; find (std::string_view name) noexcept SizeT size () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/#function-created_count","title":"function created_count","text":"<pre><code>SizeT uipc::core::Scene::CObjects::created_count () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/#function-find-12","title":"function find [1/2]","text":"<pre><code>S&lt; const Object &gt; uipc::core::Scene::CObjects::find (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/#function-find-22","title":"function find [2/2]","text":"<pre><code>vector&lt; S&lt; const Object &gt; &gt; uipc::core::Scene::CObjects::find (\n    std::string_view name\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_c_objects/#function-size","title":"function size","text":"<pre><code>SizeT uipc::core::Scene::CObjects::size () noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_geometries/","title":"Class uipc::core::Scene::Geometries","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_geometries/#class-uipccorescenegeometries","title":"Class uipc::core::Scene::Geometries","text":"<p>ClassList &gt; uipc &gt; core &gt; Scene &gt; Geometries</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_geometries/#public-functions","title":"Public Functions","text":"Type Name ObjectGeometrySlots&lt; geometry::Geometry &gt; find (IndexT id) noexcept"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_geometries/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_geometries/#function-find","title":"function find","text":"<pre><code>ObjectGeometrySlots &lt; geometry::Geometry &gt; uipc::core::Scene::Geometries::find (\n    IndexT id\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/","title":"Class uipc::core::Scene::Objects","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#class-uipccoresceneobjects","title":"Class uipc::core::Scene::Objects","text":"<p>ClassList &gt; uipc &gt; core &gt; Scene &gt; Objects</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#public-functions","title":"Public Functions","text":"Type Name S&lt; Object &gt; create (std::string_view name=\"\")  SizeT created_count () noexcept const void destroy (IndexT id)  S&lt; Object &gt; find (IndexT id) noexcept vector&lt; S&lt; Object &gt; &gt; find (std::string_view name) noexcept SizeT size () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#function-create","title":"function create","text":"<pre><code>S&lt; Object &gt; uipc::core::Scene::Objects::create (\n    std::string_view name=\"\"\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#function-created_count","title":"function created_count","text":"<pre><code>SizeT uipc::core::Scene::Objects::created_count () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#function-destroy","title":"function destroy","text":"<pre><code>void uipc::core::Scene::Objects::destroy (\n    IndexT id\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#function-find-12","title":"function find [1/2]","text":"<pre><code>S&lt; Object &gt; uipc::core::Scene::Objects::find (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#function-find-22","title":"function find [2/2]","text":"<pre><code>vector&lt; S&lt; Object &gt; &gt; uipc::core::Scene::Objects::find (\n    std::string_view name\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_1_1_objects/#function-size","title":"function size","text":"<pre><code>SizeT uipc::core::Scene::Objects::size () noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/","title":"Class uipc::core::SceneFactory","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#class-uipccorescenefactory","title":"Class uipc::core::SceneFactory","text":"<p>ClassList &gt; uipc &gt; core &gt; SceneFactory</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#public-functions","title":"Public Functions","text":"Type Name SceneFactory ()  SceneSnapshotCommit commit_from_json (const Json &amp; json)  Json commit_to_json (const SceneSnapshotCommit &amp; scene)  SceneSnapshot from_json (const Json &amp; j)  Scene from_snapshot (const SceneSnapshot &amp; snapshot)  Json to_json (const SceneSnapshot &amp; scene)  ~SceneFactory ()"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#function-scenefactory","title":"function SceneFactory","text":"<pre><code>uipc::core::SceneFactory::SceneFactory () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#function-commit_from_json","title":"function commit_from_json","text":"<pre><code>SceneSnapshotCommit uipc::core::SceneFactory::commit_from_json (\n    const Json &amp; json\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#function-commit_to_json","title":"function commit_to_json","text":"<pre><code>Json uipc::core::SceneFactory::commit_to_json (\n    const SceneSnapshotCommit &amp; scene\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#function-from_json","title":"function from_json","text":"<pre><code>SceneSnapshot uipc::core::SceneFactory::from_json (\n    const Json &amp; j\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#function-from_snapshot","title":"function from_snapshot","text":"<pre><code>Scene uipc::core::SceneFactory::from_snapshot (\n    const SceneSnapshot &amp; snapshot\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::core::SceneFactory::to_json (\n    const SceneSnapshot &amp; scene\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_factory/#function-scenefactory_1","title":"function ~SceneFactory","text":"<pre><code>uipc::core::SceneFactory::~SceneFactory () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene_factory.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/","title":"Class uipc::core::SceneIO","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#class-uipccoresceneio","title":"Class uipc::core::SceneIO","text":"<p>ClassList &gt; uipc &gt; core &gt; SceneIO</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#public-functions","title":"Public Functions","text":"Type Name SceneIO (Scene &amp; scene)  void commit (const SceneSnapshot &amp; reference, std::string_view filename) Commit the scene's update to a file. Json commit_to_json (const SceneSnapshot &amp; reference) constCommit the scene's update to a json object. void save (std::string_view filename) constSave the scene to a file. geometry::SimplicialComplex simplicial_surface (IndexT dim=-1) constGet the surface of the scene in the form of a simplicial complex allow to specify the dimension of the surface. Json to_json () constConvert the scene to a json object. void update (std::string_view filename) Update the scene from a SnapshotCommit file. void update_from_json (const Json &amp; json) Update the scene from a scene commit json object. void write_surface (std::string_view filename) Write the surface of the scene to a file. Supported formats:"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#public-static-functions","title":"Public Static Functions","text":"Type Name Scene from_json (const Json &amp; json) Convert a json object to a scene. Scene load (std::string_view filename) Load a scene from a file. void save (const Scene &amp; scene, std::string_view filename) Save the scene to a file."},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-sceneio","title":"function SceneIO","text":"<pre><code>uipc::core::SceneIO::SceneIO (\n    Scene &amp; scene\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-commit","title":"function commit","text":"<p>Commit the scene's update to a file. </p><pre><code>void uipc::core::SceneIO::commit (\n    const SceneSnapshot &amp; reference,\n    std::string_view filename\n) \n</code></pre> <p>Supported formats: * .json * .bson</p> <p>Parameters:</p> <ul> <li><code>reference</code> </li> <li><code>filename</code> </li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-commit_to_json","title":"function commit_to_json","text":"<p>Commit the scene's update to a json object. </p><pre><code>Json uipc::core::SceneIO::commit_to_json (\n    const SceneSnapshot &amp; reference\n) const\n</code></pre> <p>Supported formats: * .json * .bson</p> <p>Parameters:</p> <ul> <li><code>reference</code> </li> <li><code>filename</code> </li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-save-12","title":"function save [1/2]","text":"<p>Save the scene to a file. </p><pre><code>void uipc::core::SceneIO::save (\n    std::string_view filename\n) const\n</code></pre> <p>Supported formats: * .json * .bson</p> <p>Parameters:</p> <ul> <li><code>filename</code> </li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-simplicial_surface","title":"function simplicial_surface","text":"<p>Get the surface of the scene in the form of a simplicial complex allow to specify the dimension of the surface. </p><pre><code>geometry::SimplicialComplex uipc::core::SceneIO::simplicial_surface (\n    IndexT dim=-1\n) const\n</code></pre> <ul> <li>0: point cloud</li> <li>1: line mesh</li> <li>2: triangle mesh</li> <li>-1: all dimensions </li> </ul> <p>Parameters:</p> <ul> <li><code>dim</code> </li> </ul> <p>Returns:</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-to_json","title":"function to_json","text":"<p>Convert the scene to a json object. </p><pre><code>Json uipc::core::SceneIO::to_json () const\n</code></pre> <p>Returns:</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-update","title":"function update","text":"<p>Update the scene from a SnapshotCommit file. </p><pre><code>void uipc::core::SceneIO::update (\n    std::string_view filename\n) \n</code></pre> <p>Supported formats: * - .json * .bson</p> <p>Parameters:</p> <ul> <li><code>filename</code> </li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-update_from_json","title":"function update_from_json","text":"<p>Update the scene from a scene commit json object. </p><pre><code>void uipc::core::SceneIO::update_from_json (\n    const Json &amp; json\n) \n</code></pre> <p>Supported formats: * - .json * .bson</p> <p>Parameters:</p> <ul> <li><code>filename</code> </li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-write_surface","title":"function write_surface","text":"<p>Write the surface of the scene to a file. Supported formats: </p><pre><code>void uipc::core::SceneIO::write_surface (\n    std::string_view filename\n) \n</code></pre> <ul> <li>.obj </li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-from_json","title":"function from_json","text":"<p>Convert a json object to a scene. </p><pre><code>static Scene uipc::core::SceneIO::from_json (\n    const Json &amp; json\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>json</code> </li> </ul> <p>Returns:</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-load","title":"function load","text":"<p>Load a scene from a file. </p><pre><code>static Scene uipc::core::SceneIO::load (\n    std::string_view filename\n) \n</code></pre> <p>Supported formats: * .json * .bson</p> <p>Parameters:</p> <ul> <li><code>filename</code> </li> </ul> <p>Returns:</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o/#function-save-22","title":"function save [2/2]","text":"<p>Save the scene to a file. </p><pre><code>static void uipc::core::SceneIO::save (\n    const Scene &amp; scene,\n    std::string_view filename\n) \n</code></pre> <p>Supported formats: * .json * .bson</p> <p>Parameters:</p> <ul> <li><code>scene</code> </li> <li><code>filename</code> </li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/io/scene_io.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o_error/","title":"Class uipc::core::SceneIOError","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o_error/#class-uipccoresceneioerror","title":"Class uipc::core::SceneIOError","text":"<p>ClassList &gt; uipc &gt; core &gt; SceneIOError</p> <p>Inherits the following classes: uipc::Exception</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o_error/#public-functions","title":"Public Functions","text":"Type Name Exception (const string &amp; msg)"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o_error/#public-functions-inherited-from-uipcexception","title":"Public Functions inherited from uipc::Exception","text":"<p>See uipc::Exception</p> Type Name Exception (const string &amp; msg)  virtual const char * what () noexcept override const"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_i_o_error/#function-exception","title":"function Exception","text":"<pre><code>uipc::core::SceneIOError::Exception (\n    const string &amp; msg\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/io/scene_io.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/","title":"Class uipc::core::SceneSnapshot","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#class-uipccorescenesnapshot","title":"Class uipc::core::SceneSnapshot","text":"<p>ClassList &gt; uipc &gt; core &gt; SceneSnapshot</p> <p>More...</p> <ul> <li><code>#include &lt;scene_snapshot.h&gt;</code></li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#public-functions","title":"Public Functions","text":"Type Name SceneSnapshot (const Scene &amp; scene)  SceneSnapshot (const SceneSnapshot &amp;) = default SceneSnapshot (SceneSnapshot &amp;&amp;) = default SceneSnapshot &amp; operator= (const SceneSnapshot &amp;) = default SceneSnapshot &amp; operator= (SceneSnapshot &amp;&amp;) = default"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#detailed-description","title":"Detailed Description","text":"<p>Create a scene snapshot from the given scene, which is a plain data copy of the scene (detached from the world). </p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#function-scenesnapshot-14","title":"function SceneSnapshot [1/4]","text":"<pre><code>uipc::core::SceneSnapshot::SceneSnapshot (\n    const Scene &amp; scene\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#function-scenesnapshot-24","title":"function SceneSnapshot [2/4]","text":"<pre><code>uipc::core::SceneSnapshot::SceneSnapshot (\n    const SceneSnapshot &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#function-scenesnapshot-34","title":"function SceneSnapshot [3/4]","text":"<pre><code>uipc::core::SceneSnapshot::SceneSnapshot (\n    SceneSnapshot &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#function-operator","title":"function operator=","text":"<pre><code>SceneSnapshot &amp; uipc::core::SceneSnapshot::operator= (\n    const SceneSnapshot &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot/#function-operator_1","title":"function operator=","text":"<pre><code>SceneSnapshot &amp; uipc::core::SceneSnapshot::operator= (\n    SceneSnapshot &amp;&amp;\n) = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene_snapshot.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/","title":"Class uipc::core::SceneSnapshotCommit","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#class-uipccorescenesnapshotcommit","title":"Class uipc::core::SceneSnapshotCommit","text":"<p>ClassList &gt; uipc &gt; core &gt; SceneSnapshotCommit</p> <p>More...</p> <ul> <li><code>#include &lt;scene_snapshot.h&gt;</code></li> </ul>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#public-functions","title":"Public Functions","text":"Type Name SceneSnapshotCommit () = default SceneSnapshotCommit (const SceneSnapshot &amp; dst, const SceneSnapshot &amp; src)  const Json &amp; config () noexcept const const vector&lt; ContactElement &gt; &amp; contact_elements () noexcept const const geometry::AttributeCollectionCommit &amp; contact_models () noexcept const const unordered_map&lt; IndexT, geometry::GeometryCommit &gt; &amp; geometries () noexcept const bool is_valid () noexcept const const ObjectCollectionSnapshot &amp; object_collection () noexcept const const unordered_map&lt; IndexT, geometry::GeometryCommit &gt; &amp; rest_geometries () noexcept const"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#detailed-description","title":"Detailed Description","text":"<p>SceneSnapCommit (from B to A) = SceneSnapshotA - SceneSnapshotB </p>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-scenesnapshotcommit-12","title":"function SceneSnapshotCommit [1/2]","text":"<pre><code>uipc::core::SceneSnapshotCommit::SceneSnapshotCommit () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-scenesnapshotcommit-22","title":"function SceneSnapshotCommit [2/2]","text":"<pre><code>uipc::core::SceneSnapshotCommit::SceneSnapshotCommit (\n    const SceneSnapshot &amp; dst,\n    const SceneSnapshot &amp; src\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-config","title":"function config","text":"<pre><code>inline const Json &amp; uipc::core::SceneSnapshotCommit::config () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-contact_elements","title":"function contact_elements","text":"<pre><code>inline const vector&lt; ContactElement &gt; &amp; uipc::core::SceneSnapshotCommit::contact_elements () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-contact_models","title":"function contact_models","text":"<pre><code>inline const geometry::AttributeCollectionCommit &amp; uipc::core::SceneSnapshotCommit::contact_models () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-geometries","title":"function geometries","text":"<pre><code>inline const unordered_map&lt; IndexT, geometry::GeometryCommit &gt; &amp; uipc::core::SceneSnapshotCommit::geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-is_valid","title":"function is_valid","text":"<pre><code>inline bool uipc::core::SceneSnapshotCommit::is_valid () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-object_collection","title":"function object_collection","text":"<pre><code>inline const ObjectCollectionSnapshot &amp; uipc::core::SceneSnapshotCommit::object_collection () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#function-rest_geometries","title":"function rest_geometries","text":"<pre><code>inline const unordered_map&lt; IndexT, geometry::GeometryCommit &gt; &amp; uipc::core::SceneSnapshotCommit::rest_geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_scene_snapshot_commit/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::SceneSnapshotCommit::Scene (\n    internal::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene_snapshot.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/","title":"Class uipc::core::World","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_world/#class-uipccoreworld","title":"Class uipc::core::World","text":"<p>ClassList &gt; uipc &gt; core &gt; World</p>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#public-functions","title":"Public Functions","text":"Type Name World (Engine &amp; e) noexcept World (const World &amp;) = delete World (World &amp;&amp;) = default void advance ()  void backward ()  bool dump ()  const FeatureCollection &amp; features () const SizeT frame () const void init (Scene &amp; s)  bool is_valid () const World &amp; operator= (const World &amp;) = delete World &amp; operator= (World &amp;&amp;) = default bool recover (SizeT aim_frame=~0ull)  void retrieve ()  void sync ()  ~World ()"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-world-14","title":"function World [1/4]","text":"<pre><code>uipc::core::World::World (\n    Engine &amp; e\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-world-24","title":"function World [2/4]","text":"<pre><code>uipc::core::World::World (\n    const World &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-world-34","title":"function World [3/4]","text":"<pre><code>uipc::core::World::World (\n    World &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-advance","title":"function advance","text":"<pre><code>void uipc::core::World::advance () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-backward","title":"function backward","text":"<pre><code>void uipc::core::World::backward () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-dump","title":"function dump","text":"<pre><code>bool uipc::core::World::dump () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-features","title":"function features","text":"<pre><code>const FeatureCollection &amp; uipc::core::World::features () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-frame","title":"function frame","text":"<pre><code>SizeT uipc::core::World::frame () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-init","title":"function init","text":"<pre><code>void uipc::core::World::init (\n    Scene &amp; s\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-is_valid","title":"function is_valid","text":"<pre><code>bool uipc::core::World::is_valid () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-operator","title":"function operator=","text":"<pre><code>World &amp; uipc::core::World::operator= (\n    const World &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-operator_1","title":"function operator=","text":"<pre><code>World &amp; uipc::core::World::operator= (\n    World &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-recover","title":"function recover","text":"<pre><code>bool uipc::core::World::recover (\n    SizeT aim_frame=~0ull\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-retrieve","title":"function retrieve","text":"<pre><code>void uipc::core::World::retrieve () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-sync","title":"function sync","text":"<pre><code>void uipc::core::World::sync () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#function-world","title":"function ~World","text":"<pre><code>uipc::core::World::~World () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1_world/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1_world/#friend-worldvisitor","title":"friend WorldVisitor","text":"<pre><code>class uipc::core::World::WorldVisitor (\n    backend::WorldVisitor\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/world.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1core_1_1internal/","title":"Namespace uipc::core::internal","text":""},{"location":"Libuipc/namespaceuipc_1_1core_1_1internal/#namespace-uipccoreinternal","title":"Namespace uipc::core::internal","text":"<p>Namespace List &gt; uipc &gt; core &gt; internal</p>"},{"location":"Libuipc/namespaceuipc_1_1core_1_1internal/#classes","title":"Classes","text":"Type Name class Engine class Scene class World"},{"location":"Libuipc/namespaceuipc_1_1core_1_1internal/#public-attributes","title":"Public Attributes","text":"Type Name class UIPC_CORE_API Engine"},{"location":"Libuipc/namespaceuipc_1_1core_1_1internal/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1core_1_1internal/#variable-engine","title":"variable Engine","text":"<pre><code>class UIPC_CORE_API uipc::core::internal::Engine;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/scene_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/","title":"Class uipc::core::internal::Engine","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#class-uipccoreinternalengine","title":"Class uipc::core::internal::Engine","text":"<p>ClassList &gt; uipc &gt; core &gt; internal &gt; Engine</p>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#public-functions","title":"Public Functions","text":"Type Name Engine (std::string_view backend_name, std::string_view workspace=\"./\", const Json &amp; config=default_config())  std::string_view backend_name () noexcept const const FeatureCollection &amp; features ()  EngineStatusCollection &amp; status ()  Json to_json () const std::string_view workspace () noexcept const ~Engine ()"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#public-static-functions","title":"Public Static Functions","text":"Type Name Json default_config ()"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-engine","title":"function Engine","text":"<pre><code>uipc::core::internal::Engine::Engine (\n    std::string_view backend_name,\n    std::string_view workspace=\"./\",\n    const Json &amp; config=default_config()\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-backend_name","title":"function backend_name","text":"<pre><code>std::string_view uipc::core::internal::Engine::backend_name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-features","title":"function features","text":"<pre><code>const FeatureCollection &amp; uipc::core::internal::Engine::features () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-status","title":"function status","text":"<pre><code>EngineStatusCollection &amp; uipc::core::internal::Engine::status () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::core::internal::Engine::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-workspace","title":"function workspace","text":"<pre><code>std::string_view uipc::core::internal::Engine::workspace () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-engine_1","title":"function ~Engine","text":"<pre><code>uipc::core::internal::Engine::~Engine () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#function-default_config","title":"function default_config","text":"<pre><code>static Json uipc::core::internal::Engine::default_config () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_engine/#friend-world","title":"friend World","text":"<pre><code>class uipc::core::internal::Engine::World (\n    internal::World\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/internal/engine.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/","title":"Class uipc::core::internal::Scene","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#class-uipccoreinternalscene","title":"Class uipc::core::internal::Scene","text":"<p>ClassList &gt; uipc &gt; core &gt; internal &gt; Scene</p> <p>Inherits the following classes: std::enable_shared_from_this&lt; Scene &gt;</p>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#public-functions","title":"Public Functions","text":"Type Name Scene (const Json &amp; config) noexcept auto &amp; animator () noexcept const auto &amp; animator () noexcept void begin_pending () noexcept auto &amp; config () noexcept const auto &amp; config () noexcept auto &amp; constitution_tabular () noexcept const auto &amp; constitution_tabular () noexcept auto &amp; contact_tabular () noexcept const auto &amp; contact_tabular () noexcept auto &amp; diff_sim () noexcept const auto &amp; diff_sim () noexcept Float dt () noexcept const auto &amp; geometries () noexcept const auto &amp; geometries () noexcept void init (internal::World &amp; world) noexcept bool is_pending () noexcept const bool is_started () noexcept const auto &amp; objects () noexcept const auto &amp; objects () noexcept auto &amp; rest_geometries () noexcept const auto &amp; rest_geometries () noexcept auto &amp; sanity_checker () noexcept const auto &amp; sanity_checker () noexcept void solve_pending () noexcept void update_from (const SceneSnapshotCommit &amp; commit)  auto world () noexcept ~Scene ()"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-scene","title":"function Scene","text":"<pre><code>uipc::core::internal::Scene::Scene (\n    const Json &amp; config\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-animator-12","title":"function animator [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::animator () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-animator-22","title":"function animator [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::animator () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-begin_pending","title":"function begin_pending","text":"<pre><code>void uipc::core::internal::Scene::begin_pending () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-config-12","title":"function config [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::config () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-config-22","title":"function config [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::config () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-constitution_tabular-12","title":"function constitution_tabular [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::constitution_tabular () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-constitution_tabular-22","title":"function constitution_tabular [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::constitution_tabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-contact_tabular-12","title":"function contact_tabular [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::contact_tabular () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-contact_tabular-22","title":"function contact_tabular [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::contact_tabular () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-diff_sim-12","title":"function diff_sim [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::diff_sim () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-diff_sim-22","title":"function diff_sim [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::diff_sim () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-dt","title":"function dt","text":"<pre><code>inline Float uipc::core::internal::Scene::dt () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-geometries-12","title":"function geometries [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-geometries-22","title":"function geometries [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::geometries () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-init","title":"function init","text":"<pre><code>void uipc::core::internal::Scene::init (\n    internal::World &amp; world\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-is_pending","title":"function is_pending","text":"<pre><code>inline bool uipc::core::internal::Scene::is_pending () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-is_started","title":"function is_started","text":"<pre><code>inline bool uipc::core::internal::Scene::is_started () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-objects-12","title":"function objects [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::objects () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-objects-22","title":"function objects [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::objects () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-rest_geometries-12","title":"function rest_geometries [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::rest_geometries () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-rest_geometries-22","title":"function rest_geometries [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::rest_geometries () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-sanity_checker-12","title":"function sanity_checker [1/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::sanity_checker () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-sanity_checker-22","title":"function sanity_checker [2/2]","text":"<pre><code>inline auto &amp; uipc::core::internal::Scene::sanity_checker () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-solve_pending","title":"function solve_pending","text":"<pre><code>void uipc::core::internal::Scene::solve_pending () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-update_from","title":"function update_from","text":"<pre><code>void uipc::core::internal::Scene::update_from (\n    const SceneSnapshotCommit &amp; commit\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-world","title":"function world","text":"<pre><code>inline auto uipc::core::internal::Scene::world () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#function-scene_1","title":"function ~Scene","text":"<pre><code>uipc::core::internal::Scene::~Scene () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_scene/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::core::internal::Scene::Scene (\n    core::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/internal/scene.h</code></p>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/","title":"Class uipc::core::internal::World","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#class-uipccoreinternalworld","title":"Class uipc::core::internal::World","text":"<p>ClassList &gt; uipc &gt; core &gt; internal &gt; World</p> <p>Inherits the following classes: std::enable_shared_from_this&lt; World &gt;</p>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#public-functions","title":"Public Functions","text":"Type Name World (internal::Engine &amp; e) noexcept void advance ()  void backward ()  bool dump ()  const FeatureCollection &amp; features () const SizeT frame () const void init (internal::Scene &amp; s)  bool is_valid () const bool recover (SizeT aim_frame=~0ull)  void retrieve ()  void sync ()"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-world","title":"function World","text":"<pre><code>uipc::core::internal::World::World (\n    internal::Engine &amp; e\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-advance","title":"function advance","text":"<pre><code>void uipc::core::internal::World::advance () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-backward","title":"function backward","text":"<pre><code>void uipc::core::internal::World::backward () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-dump","title":"function dump","text":"<pre><code>bool uipc::core::internal::World::dump () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-features","title":"function features","text":"<pre><code>const FeatureCollection &amp; uipc::core::internal::World::features () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-frame","title":"function frame","text":"<pre><code>SizeT uipc::core::internal::World::frame () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-init","title":"function init","text":"<pre><code>void uipc::core::internal::World::init (\n    internal::Scene &amp; s\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-is_valid","title":"function is_valid","text":"<pre><code>bool uipc::core::internal::World::is_valid () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-recover","title":"function recover","text":"<pre><code>bool uipc::core::internal::World::recover (\n    SizeT aim_frame=~0ull\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-retrieve","title":"function retrieve","text":"<pre><code>void uipc::core::internal::World::retrieve () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#function-sync","title":"function sync","text":"<pre><code>void uipc::core::internal::World::sync () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1core_1_1internal_1_1_world/#friend-worldvisitor","title":"friend WorldVisitor","text":"<pre><code>class uipc::core::internal::World::WorldVisitor (\n    backend::WorldVisitor\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/core/internal/world.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1details/","title":"Namespace uipc::details","text":""},{"location":"Libuipc/namespaceuipc_1_1details/#namespace-uipcdetails","title":"Namespace uipc::details","text":"<p>Namespace List &gt; uipc &gt; details</p>"},{"location":"Libuipc/namespaceuipc_1_1details/#classes","title":"Classes","text":"Type Name class ScopedTimer <p>The documentation for this class was generated from the following file <code>include/uipc/common/timer.h</code></p>"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/","title":"Class uipc::details::ScopedTimer","text":""},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#class-uipcdetailsscopedtimer","title":"Class uipc::details::ScopedTimer","text":"<p>ClassList &gt; uipc &gt; details &gt; ScopedTimer</p>"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#public-types","title":"Public Types","text":"Type Name typedef std::chrono::duration&lt; double &gt; Duration typedef std::chrono::time_point&lt; std::chrono::high_resolution_clock &gt; TimePoint"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#public-functions","title":"Public Functions","text":"Type Name ~ScopedTimer () = default"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#typedef-duration","title":"typedef Duration","text":"<pre><code>using uipc::details::ScopedTimer::Duration =  std::chrono::duration&lt;double&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#typedef-timepoint","title":"typedef TimePoint","text":"<pre><code>using uipc::details::ScopedTimer::TimePoint =  std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#function-scopedtimer","title":"function ~ScopedTimer","text":"<pre><code>uipc::details::ScopedTimer::~ScopedTimer () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#friend-globaltimer","title":"friend GlobalTimer","text":"<pre><code>class uipc::details::ScopedTimer::GlobalTimer (\n    uipc::GlobalTimer\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1details_1_1_scoped_timer/#friend-timer","title":"friend Timer","text":"<pre><code>class uipc::details::ScopedTimer::Timer (\n    uipc::Timer\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/timer.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1diff__sim/","title":"Namespace uipc::diff_sim","text":""},{"location":"Libuipc/namespaceuipc_1_1diff__sim/#namespace-uipcdiff_sim","title":"Namespace uipc::diff_sim","text":"<p>Namespace List &gt; uipc &gt; diff_sim</p>"},{"location":"Libuipc/namespaceuipc_1_1diff__sim/#classes","title":"Classes","text":"Type Name class AdjointMethodFeature class AdjointMethodFeatureOverrider class EnableGradFeature class EnableGradFeatureOverrider class ParameterCollection class SparseCOOView"},{"location":"Libuipc/namespaceuipc_1_1diff__sim/#public-functions","title":"Public Functions","text":"Type Name UIPC_CORE_API Eigen::Map&lt; Eigen::Matrix&lt; Float, Eigen::Dynamic, 1 &gt; &gt; as_eigen (ParameterCollection &amp; collection)  UIPC_CORE_API span&lt; Float &gt; view (ParameterCollection &amp; collection)"},{"location":"Libuipc/namespaceuipc_1_1diff__sim/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1diff__sim/#function-as_eigen","title":"function as_eigen","text":"<pre><code>UIPC_CORE_API Eigen::Map&lt; Eigen::Matrix&lt; Float, Eigen::Dynamic, 1 &gt; &gt; uipc::diff_sim::as_eigen (\n    ParameterCollection &amp; collection\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1diff__sim/#function-view","title":"function view","text":"<pre><code>UIPC_CORE_API span&lt; Float &gt; uipc::diff_sim::view (\n    ParameterCollection &amp; collection\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/adjoint_method_feature.h</code></p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/","title":"Class uipc::diff_sim::AdjointMethodFeature","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#class-uipcdiff_simadjointmethodfeature","title":"Class uipc::diff_sim::AdjointMethodFeature","text":"<p>ClassList &gt; uipc &gt; diff_sim &gt; AdjointMethodFeature</p> <p>Inherits the following classes: uipc::core::Feature</p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#public-static-attributes","title":"Public Static Attributes","text":"Type Name std::string_view FeatureName   = <code>\"diff\\_sim/adjoint\\_method\"</code>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#public-functions","title":"Public Functions","text":"Type Name AdjointMethodFeature (S&lt; AdjointMethodFeatureOverrider &gt; overrider)  void compute_dLdP (backend::BufferView out_dLdP, backend::BufferView in_dLdX) Computes the gradient of the loss with respect to the parameters. void receive_dofs (backend::BufferView out_Dofs) Receives the selected degrees of freedom for all frames. void select_dofs (SizeT frame, backend::BufferView in_SDI) Selects the degrees of freedom from the given indices for the given frame."},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#public-functions-inherited-from-uipccoreifeature","title":"Public Functions inherited from uipc::core::IFeature","text":"<p>See uipc::core::IFeature</p> Type Name std::string_view name () const std::string_view type_name () const virtual ~IFeature () = default"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#protected-functions-inherited-from-uipccoreifeature","title":"Protected Functions inherited from uipc::core::IFeature","text":"<p>See uipc::core::IFeature</p> Type Name virtual std::string_view get_name () const = 0 virtual std::string_view get_type_name () const = 0"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#variable-featurename","title":"variable FeatureName","text":"<pre><code>std::string_view uipc::diff_sim::AdjointMethodFeature::FeatureName;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#function-adjointmethodfeature","title":"function AdjointMethodFeature","text":"<pre><code>uipc::diff_sim::AdjointMethodFeature::AdjointMethodFeature (\n    S&lt; AdjointMethodFeatureOverrider &gt; overrider\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#function-compute_dldp","title":"function compute_dLdP","text":"<p>Computes the gradient of the loss with respect to the parameters. </p><pre><code>void uipc::diff_sim::AdjointMethodFeature::compute_dLdP (\n    backend::BufferView out_dLdP,\n    backend::BufferView in_dLdX\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>out_dLdP:BufferView&lt;Float&gt;</code> The gradient of the loss with respect to the parameters. </li> <li><code>in_dLdX:BufferView&lt;Float&gt;</code> The gradient of the loss with respect to the degrees of freedom. </li> </ul>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#function-receive_dofs","title":"function receive_dofs","text":"<p>Receives the selected degrees of freedom for all frames. </p><pre><code>void uipc::diff_sim::AdjointMethodFeature::receive_dofs (\n    backend::BufferView out_Dofs\n) \n</code></pre> <p>This function should be called after all frames have been processed to receive the selected degrees of freedom.</p> <p>Parameters:</p> <ul> <li><code>out_dofs:BufferView&lt;Float&gt;</code> The selected degrees of freedom. </li> </ul>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature/#function-select_dofs","title":"function select_dofs","text":"<p>Selects the degrees of freedom from the given indices for the given frame. </p><pre><code>void uipc::diff_sim::AdjointMethodFeature::select_dofs (\n    SizeT frame,\n    backend::BufferView in_SDI\n) \n</code></pre> <p><code>in_SDI</code> is frame-local, this function should be called for each frame to select the degrees of freedom.</p> <p>Parameters:</p> <ul> <li><code>in_SDI:BufferView&lt;IndexT&gt;</code> The indices of the degrees of freedom to select. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/adjoint_method_feature.h</code></p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature_overrider/","title":"Class uipc::diff_sim::AdjointMethodFeatureOverrider","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature_overrider/#class-uipcdiff_simadjointmethodfeatureoverrider","title":"Class uipc::diff_sim::AdjointMethodFeatureOverrider","text":"<p>ClassList &gt; uipc &gt; diff_sim &gt; AdjointMethodFeatureOverrider</p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature_overrider/#public-functions","title":"Public Functions","text":"Type Name virtual void do_compute_dLdP (backend::BufferView out_dLdP, backend::BufferView in_dLdx) = 0 virtual void do_receive_dofs (backend::BufferView out_dofs) = 0 virtual void do_select_dofs (SizeT frame, backend::BufferView in_SDI) = 0"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature_overrider/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature_overrider/#function-do_compute_dldp","title":"function do_compute_dLdP","text":"<pre><code>virtual void uipc::diff_sim::AdjointMethodFeatureOverrider::do_compute_dLdP (\n    backend::BufferView out_dLdP,\n    backend::BufferView in_dLdx\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature_overrider/#function-do_receive_dofs","title":"function do_receive_dofs","text":"<pre><code>virtual void uipc::diff_sim::AdjointMethodFeatureOverrider::do_receive_dofs (\n    backend::BufferView out_dofs\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_adjoint_method_feature_overrider/#function-do_select_dofs","title":"function do_select_dofs","text":"<pre><code>virtual void uipc::diff_sim::AdjointMethodFeatureOverrider::do_select_dofs (\n    SizeT frame,\n    backend::BufferView in_SDI\n) = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/adjoint_method_feature.h</code></p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/","title":"Class uipc::diff_sim::EnableGradFeature","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#class-uipcdiff_simenablegradfeature","title":"Class uipc::diff_sim::EnableGradFeature","text":"<p>ClassList &gt; uipc &gt; diff_sim &gt; EnableGradFeature</p> <p>Inherits the following classes: uipc::core::Feature</p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#public-static-attributes","title":"Public Static Attributes","text":"Type Name std::string_view FeatureName   = <code>\"diff\\_sim/enable\\_grad\"</code>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#public-functions","title":"Public Functions","text":"Type Name EnableGradFeature (S&lt; EnableGradFeatureOverrider &gt; overrider)  bool is_grad_enabled () constCheck if parameter gradient computation is enabled. void no_grad () With DiffSim on, turn off parameter gradient computation. void with_grad () With DiffSim on, turn on parameter gradient computation."},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#public-functions-inherited-from-uipccoreifeature","title":"Public Functions inherited from uipc::core::IFeature","text":"<p>See uipc::core::IFeature</p> Type Name std::string_view name () const std::string_view type_name () const virtual ~IFeature () = default"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#protected-functions-inherited-from-uipccoreifeature","title":"Protected Functions inherited from uipc::core::IFeature","text":"<p>See uipc::core::IFeature</p> Type Name virtual std::string_view get_name () const = 0 virtual std::string_view get_type_name () const = 0"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#variable-featurename","title":"variable FeatureName","text":"<pre><code>std::string_view uipc::diff_sim::EnableGradFeature::FeatureName;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#function-enablegradfeature","title":"function EnableGradFeature","text":"<pre><code>uipc::diff_sim::EnableGradFeature::EnableGradFeature (\n    S&lt; EnableGradFeatureOverrider &gt; overrider\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#function-is_grad_enabled","title":"function is_grad_enabled","text":"<p>Check if parameter gradient computation is enabled. </p><pre><code>bool uipc::diff_sim::EnableGradFeature::is_grad_enabled () const\n</code></pre> <p>Returns:</p> <p>true if parameter gradient computation is enabled. </p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#function-no_grad","title":"function no_grad","text":"<p>With DiffSim on, turn off parameter gradient computation. </p><pre><code>void uipc::diff_sim::EnableGradFeature::no_grad () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature/#function-with_grad","title":"function with_grad","text":"<p>With DiffSim on, turn on parameter gradient computation. </p><pre><code>void uipc::diff_sim::EnableGradFeature::with_grad () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/enable_grad_feature.h</code></p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature_overrider/","title":"Class uipc::diff_sim::EnableGradFeatureOverrider","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature_overrider/#class-uipcdiff_simenablegradfeatureoverrider","title":"Class uipc::diff_sim::EnableGradFeatureOverrider","text":"<p>ClassList &gt; uipc &gt; diff_sim &gt; EnableGradFeatureOverrider</p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature_overrider/#public-functions","title":"Public Functions","text":"Type Name virtual void do_no_grad () = 0 virtual void do_with_grad () = 0 virtual bool get_is_grad_enabled () const = 0"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature_overrider/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature_overrider/#function-do_no_grad","title":"function do_no_grad","text":"<pre><code>virtual void uipc::diff_sim::EnableGradFeatureOverrider::do_no_grad () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature_overrider/#function-do_with_grad","title":"function do_with_grad","text":"<pre><code>virtual void uipc::diff_sim::EnableGradFeatureOverrider::do_with_grad () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_enable_grad_feature_overrider/#function-get_is_grad_enabled","title":"function get_is_grad_enabled","text":"<pre><code>virtual bool uipc::diff_sim::EnableGradFeatureOverrider::get_is_grad_enabled () const = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/enable_grad_feature.h</code></p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/","title":"Class uipc::diff_sim::ParameterCollection","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#class-uipcdiff_simparametercollection","title":"Class uipc::diff_sim::ParameterCollection","text":"<p>ClassList &gt; uipc &gt; diff_sim &gt; ParameterCollection</p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#public-functions","title":"Public Functions","text":"Type Name Eigen::Map&lt; const Eigen::Matrix&lt; Float, Eigen::Dynamic, 1 &gt; &gt; as_eigen () const void broadcast () Broadcast the parameter collection to corresponding geometry attributes. void resize (SizeT N, Float default_value=0.0f)  SizeT size () const span&lt; const Float &gt; view () const ~ParameterCollection ()"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#function-as_eigen-22","title":"function as_eigen [2/2]","text":"<pre><code>Eigen::Map&lt; const Eigen::Matrix&lt; Float, Eigen::Dynamic, 1 &gt; &gt; uipc::diff_sim::ParameterCollection::as_eigen () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#function-broadcast","title":"function broadcast","text":"<p>Broadcast the parameter collection to corresponding geometry attributes. </p><pre><code>void uipc::diff_sim::ParameterCollection::broadcast () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#function-resize","title":"function resize","text":"<pre><code>void uipc::diff_sim::ParameterCollection::resize (\n    SizeT N,\n    Float default_value=0.0f\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#function-size","title":"function size","text":"<pre><code>SizeT uipc::diff_sim::ParameterCollection::size () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#function-view-22","title":"function view [2/2]","text":"<pre><code>span&lt; const Float &gt; uipc::diff_sim::ParameterCollection::view () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#function-parametercollection","title":"function ~ParameterCollection","text":"<pre><code>uipc::diff_sim::ParameterCollection::~ParameterCollection () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#friend-diffsimvisitor","title":"friend DiffSimVisitor","text":"<pre><code>class uipc::diff_sim::ParameterCollection::DiffSimVisitor (\n    uipc::backend::DiffSimVisitor\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_parameter_collection/#friend-diffsim","title":"friend DiffSim","text":"<pre><code>class uipc::diff_sim::ParameterCollection::DiffSim (\n    uipc::core::DiffSim\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/parameter_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/","title":"Class uipc::diff_sim::SparseCOOView","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#class-uipcdiff_simsparsecooview","title":"Class uipc::diff_sim::SparseCOOView","text":"<p>ClassList &gt; uipc &gt; diff_sim &gt; SparseCOOView</p>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#public-functions","title":"Public Functions","text":"Type Name SparseCOOView () = default SparseCOOView (span&lt; const IndexT &gt; row_indices, span&lt; const IndexT &gt; col_indices, span&lt; const Float &gt; values, Vector2i shape)  span&lt; const IndexT &gt; col_indices () const span&lt; const IndexT &gt; row_indices () const Vector2i shape () const Matrix&lt; Float, Eigen::Dynamic, Eigen::Dynamic &gt; to_dense () const Eigen::SparseMatrix&lt; Float &gt; to_sparse () const span&lt; const Float &gt; values () const"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-sparsecooview-12","title":"function SparseCOOView [1/2]","text":"<pre><code>uipc::diff_sim::SparseCOOView::SparseCOOView () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-sparsecooview-22","title":"function SparseCOOView [2/2]","text":"<pre><code>uipc::diff_sim::SparseCOOView::SparseCOOView (\n    span&lt; const IndexT &gt; row_indices,\n    span&lt; const IndexT &gt; col_indices,\n    span&lt; const Float &gt; values,\n    Vector2i shape\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-col_indices","title":"function col_indices","text":"<pre><code>span&lt; const IndexT &gt; uipc::diff_sim::SparseCOOView::col_indices () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-row_indices","title":"function row_indices","text":"<pre><code>span&lt; const IndexT &gt; uipc::diff_sim::SparseCOOView::row_indices () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-shape","title":"function shape","text":"<pre><code>Vector2i uipc::diff_sim::SparseCOOView::shape () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-to_dense","title":"function to_dense","text":"<pre><code>Matrix&lt; Float, Eigen::Dynamic, Eigen::Dynamic &gt; uipc::diff_sim::SparseCOOView::to_dense () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-to_sparse","title":"function to_sparse","text":"<pre><code>Eigen::SparseMatrix&lt; Float &gt; uipc::diff_sim::SparseCOOView::to_sparse () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1diff__sim_1_1_sparse_c_o_o_view/#function-values","title":"function values","text":"<pre><code>span&lt; const Float &gt; uipc::diff_sim::SparseCOOView::values () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/sparse_coo_view.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/","title":"Namespace uipc::geometry","text":""},{"location":"Libuipc/namespaceuipc_1_1geometry/#namespace-uipcgeometry","title":"Namespace uipc::geometry","text":"<p>Namespace List &gt; uipc &gt; geometry</p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#namespaces","title":"Namespaces","text":"Type Name namespace affine_body"},{"location":"Libuipc/namespaceuipc_1_1geometry/#classes","title":"Classes","text":"Type Name class AbstractSimplicialComplex Represents an abstract simplicial complex, containing vertices, edges, triangles, and tetrahedra. class Attribute &lt;typename T&gt;Template class to represent a geometries attribute of type T. class AttributeCollection A collection of geometries attributes. class AttributeCollectionCommit class AttributeCollectionError class AttributeCollectionFactory class AttributeCopy class AttributeFactory class AttributeFriend &lt;typename T&gt; class AttributeIO class AttributeIOError class AttributeSlot &lt;typename T&gt;Template class to represent a geometries attribute slot of type T in a geometries attribute collection. class BVH class DeserialSharedAttributeContext class Geometry A base geometries class that contains the instance attributes and the meta attributes. class GeometryAtlas class GeometryAtlasCommit class GeometryCollection class GeometryCollectionCommit class GeometryCommit class GeometryFactory class GeometryFriend &lt;typename T&gt; class GeometryIOError class GeometrySlot class GeometrySlotT &lt;GeometryT&gt; class GeometrySlotT&lt; Geometry &gt; &lt;&gt; class IAttribute An abstract class to represent a geometries attribute. class IAttributeSlot An abstract class to represent a geometries attribute slot in a geometries attribute collection. class IGeometry An abstract class for geometries. class IGeometryCollection class ImplicitGeometry class Octree class SerialSharedAttributeContext class SimplexUtils class SimplicialComplex A simplicial complex is a collection of simplices. class SimplicialComplexAttributes &lt;IsConst, N&gt; class SimplicialComplexIO A class for reading and writing simplicial complex. class SpreadSheetIO A class for writing geometry spreadsheet."},{"location":"Libuipc/namespaceuipc_1_1geometry/#public-types","title":"Public Types","text":"Type Name enum GeometrySlotState typedef GeometrySlotT&lt; ImplicitGeometry &gt; ImplicitGeometrySlot typedef GeometrySlotT&lt; SimplicialComplex &gt; SimplicialComplexSlot typedef std::chrono::time_point&lt; std::chrono::high_resolution_clock &gt; TimePoint"},{"location":"Libuipc/namespaceuipc_1_1geometry/#public-functions","title":"Public Functions","text":"Type Name UIPC_GEOMETRY_API vector&lt; SimplicialComplex &gt; apply_region (const SimplicialComplex &amp; complex) Take apart the simplicial complex by regions. UIPC_GEOMETRY_API vector&lt; SimplicialComplex &gt; apply_transform (const SimplicialComplex &amp; complex) Apply the instance transform to the simplicial complex. UIPC_GEOMETRY_API S&lt; AttributeSlot&lt; Float &gt; &gt; compute_instance_volume (SimplicialComplex &amp; R) Compute the volume of an instance in the simplicial complex. Attribute __<code>volume</code> &lt;Float&gt; will be created in the instance vertices. UIPC_GEOMETRY_API S&lt; AttributeSlot&lt; Float &gt; &gt; compute_vertex_volume (SimplicialComplex &amp; R)  Float UIPC_GEOMETRY_API edge_edge_squared_distance (const Vector3 &amp; Ea0, const Vector3 &amp; Ea1, const Vector3 &amp; Eb0, const Vector3 &amp; Eb1)  UIPC_GEOMETRY_API SimplicialComplex extract_surface (const SimplicialComplex &amp; src) Extract the surface of a tetrahedral mesh. UIPC_GEOMETRY_API SimplicialComplex extract_surface (span&lt; const SimplicialComplex * &gt; complexes) Extract the surface of a list of tetrahedral meshes and merge them into one. UIPC_GEOMETRY_API SimplicialComplex facet_closure (const SimplicialComplex &amp; complex) Generate the closure from a collection of facet simplices, who only have the top dimension simplices. UIPC_GEOMETRY_API SimplicialComplex flip_inward_triangles (const SimplicialComplex &amp; sc) Flip the orientation of the triangles in the simplicial complex. UIPC_GEOMETRY_API ImplicitGeometry ground (Float height=0.0, const Vector3 &amp; N=Vector3::UnitY()) Create a gound plane. UIPC_GEOMETRY_API ImplicitGeometry halfplane (const Vector3 &amp; P=Vector3::Zero(), const Vector3 &amp; N=Vector3::UnitY()) Create a half-plane. Float UIPC_GEOMETRY_API halfplane_vertex_signed_distance (const Vector3 &amp; P, const Vector3 &amp; N, const Vector3 &amp; V, Float V_thickness=0.0) Compute the distance between a half-plane (P, N) and a vertex V (with thickness V_thickness). UIPC_GEOMETRY_API bool is_point_in_tet (const Vector3 &amp; T0, const Vector3 &amp; T1, const Vector3 &amp; T2, const Vector3 &amp; T3, const Vector3 &amp; P, Vector4 &amp; tuvw_in_tet) Check if a point is in a tetrahedron. UIPC_GEOMETRY_API bool is_trimesh_closed (const SimplicialComplex &amp; R) Check if a trimesh is closed. UIPC_GEOMETRY_API S&lt; AttributeSlot&lt; IndexT &gt; &gt; label_connected_vertices (SimplicialComplex &amp; complex) Label the connected vertices of a simplicial complex (by edges). UIPC_GEOMETRY_API void label_region (SimplicialComplex &amp; complex) Label the regions of a simplicial complex. UIPC_GEOMETRY_API void label_surface (SimplicialComplex &amp; R) Label the surface of a simplicial complex. UIPC_GEOMETRY_API S&lt; AttributeSlot&lt; IndexT &gt; &gt; label_triangle_orient (SimplicialComplex &amp; sc) Label the orientation of the triangles in the simplicial complex. UIPC_GEOMETRY_API SimplicialComplex linemesh (span&lt; const Vector3 &gt; Vs, span&lt; const Vector2i &gt; Es) Create a simplicial complex from a line mesh. UIPC_GEOMETRY_API SimplicialComplex merge (span&lt; const SimplicialComplex * &gt; complexes) Merge a list of simplicial complexes into one simplicial complex. UIPC_GEOMETRY_API SimplicialComplex merge (std::initializer_list&lt; const SimplicialComplex * &gt; &amp;&amp; complexes)  void UIPC_GEOMETRY_API mesh_partition (SimplicialComplex &amp; sc, SizeT part_max_size) partition the simplicial complex UIPC_CORE_API AttributeCollection &amp; operator+= (AttributeCollection &amp; dst, const AttributeCollectionCommit &amp; inc)  UIPC_CORE_API GeometryCollection &amp; operator+= (GeometryCollection &amp; dst, const GeometryCollectionCommit &amp; inc)  UIPC_CORE_API Geometry &amp; operator+= (Geometry &amp; base, const GeometryCommit &amp; inc)  UIPC_CORE_API AttributeCollectionCommit operator- (const AttributeCollection &amp; dst, const AttributeCollection &amp; src)  UIPC_CORE_API GeometryCollectionCommit operator- (const GeometryCollection &amp; dst, const GeometryCollection &amp; src)  UIPC_CORE_API GeometryCommit operator- (const Geometry &amp; dst, const Geometry &amp; src)  UIPC_GEOMETRY_API Matrix4x4 optimal_transform (span&lt; const Vector3 &gt; S, span&lt; const Vector3 &gt; D) Find out the optimal transformation matrix that maps the source points to the destination points. UIPC_GEOMETRY_API Matrix4x4 optimal_transform (const SimplicialComplex &amp; S, const SimplicialComplex &amp; D) Find out the optimal transformation matrix that maps the source simplicial complex to the destination simplicial complex. Float UIPC_GEOMETRY_API point_edge_squared_distance (const Vector3 &amp; P, const Vector3 &amp; E0, const Vector3 &amp; E1)  Float UIPC_GEOMETRY_API point_point_squared_distance (const Vector3 &amp; P0, const Vector3 &amp; P1)  Float UIPC_GEOMETRY_API point_triangle_squared_distance (const Vector3 &amp; P, const Vector3 &amp; T0, const Vector3 &amp; T1, const Vector3 &amp; T2)  UIPC_GEOMETRY_API SimplicialComplex pointcloud (span&lt; const Vector3 &gt; Vs) Create a simplicial complex from a point cloud. UIPC_GEOMETRY_API SimplicialComplex tetmesh (span&lt; const Vector3 &gt; Vs, span&lt; const Vector4i &gt; Ts) Create a simplicial complex from a tetrahedral mesh. UIPC_GEOMETRY_API SimplicialComplex tetrahedralize (const SimplicialComplex &amp; sc, const Json &amp; options=Json::object()) Tetrahedralize a 2D simplicial complex (trimesh). UIPC_GEOMETRY_API bool tri_edge_intersect (const Vector3 &amp; T0, const Vector3 &amp; T1, const Vector3 &amp; T2, const Vector3 &amp; E0, const Vector3 &amp; E1, bool &amp; coplanar, Vector3 &amp; uvw_in_tri, Vector2 &amp; uv_in_edge) Check if a triangle and an edge intersect. UIPC_GEOMETRY_API SimplicialComplex trimesh (span&lt; const Vector3 &gt; Vs, span&lt; const Vector3i &gt; Fs) Create a simplicial complex from a triangle mesh."},{"location":"Libuipc/namespaceuipc_1_1geometry/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1geometry/#enum-geometryslotstate","title":"enum GeometrySlotState","text":"<pre><code>enum uipc::geometry::GeometrySlotState {\n    Normal,\n    PendingCreate,\n    PendingDestroy\n};\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#typedef-implicitgeometryslot","title":"typedef ImplicitGeometrySlot","text":"<pre><code>using uipc::geometry::ImplicitGeometrySlot =  GeometrySlotT&lt;ImplicitGeometry&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#typedef-simplicialcomplexslot","title":"typedef SimplicialComplexSlot","text":"<pre><code>using uipc::geometry::SimplicialComplexSlot =  GeometrySlotT&lt;SimplicialComplex&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#typedef-timepoint","title":"typedef TimePoint","text":"<pre><code>using uipc::geometry::TimePoint =  std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt;;\n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-apply_region","title":"function apply_region","text":"<p>Take apart the simplicial complex by regions. </p><pre><code>UIPC_GEOMETRY_API vector&lt; SimplicialComplex &gt; uipc::geometry::apply_region (\n    const SimplicialComplex &amp; complex\n) \n</code></pre> <p>Returns:</p> <p>vector&lt;SimplicialComplex&gt; The simplicial complexes by regions. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-apply_transform","title":"function apply_transform","text":"<p>Apply the instance transform to the simplicial complex. </p><pre><code>UIPC_GEOMETRY_API vector&lt; SimplicialComplex &gt; uipc::geometry::apply_transform (\n    const SimplicialComplex &amp; complex\n) \n</code></pre> <p>1) Vertex position of the result simplicial complex will be transformed. 2) The rest meta/instance/vertex/edge/face/tetrahedron attributes will be kept.</p> <p>Returns:</p> <p>vector&lt;SimplicialComplex&gt; the transformed simplicial complexes. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-compute_instance_volume","title":"function compute_instance_volume","text":"<p>Compute the volume of an instance in the simplicial complex. Attribute __<code>volume</code> &lt;Float&gt; will be created in the instance vertices. </p><pre><code>UIPC_GEOMETRY_API S&lt; AttributeSlot &lt; Float &gt; &gt; uipc::geometry::compute_instance_volume (\n    SimplicialComplex &amp; R\n) \n</code></pre> <p>Only tetmesh and closed trimesh are supported.</p> <p>Parameters:</p> <ul> <li><code>R</code> The simplicial complex. </li> </ul> <p>Returns:</p> <p>The attribute slot of the instance volume. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-compute_vertex_volume","title":"function compute_vertex_volume","text":"<pre><code>UIPC_GEOMETRY_API S&lt; AttributeSlot &lt; Float &gt; &gt; uipc::geometry::compute_vertex_volume (\n    SimplicialComplex &amp; R\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-edge_edge_squared_distance","title":"function edge_edge_squared_distance","text":"<pre><code>Float UIPC_GEOMETRY_API uipc::geometry::edge_edge_squared_distance (\n    const Vector3 &amp; Ea0,\n    const Vector3 &amp; Ea1,\n    const Vector3 &amp; Eb0,\n    const Vector3 &amp; Eb1\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-extract_surface","title":"function extract_surface","text":"<p>Extract the surface of a tetrahedral mesh. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::extract_surface (\n    const SimplicialComplex &amp; src\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>src</code> The tetrahedral mesh. </li> </ul> <p>Returns:</p> <p>SimplicialComplex The surface of the tetrahedral mesh. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-extract_surface_1","title":"function extract_surface","text":"<p>Extract the surface of a list of tetrahedral meshes and merge them into one. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::extract_surface (\n    span&lt; const SimplicialComplex * &gt; complexes\n) \n</code></pre> <p>All the instances of the input tetrahedral meshes will be applied to the output surface.</p> <p>Parameters:</p> <ul> <li><code>complexes</code> The list of tetrahedral meshes. </li> </ul> <p>Returns:</p> <p>SimplicialComplex The surface of the tetrahedral meshes. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-facet_closure","title":"function facet_closure","text":"<p>Generate the closure from a collection of facet simplices, who only have the top dimension simplices. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::facet_closure (\n    const SimplicialComplex &amp; complex\n) \n</code></pre> <p>E.g. 1) the input 3D tetmesh can only have tetrahedrons (no triangles, edges). 2) the input 2D trimesh can only have triangles (no edges). 3) the input 1D linemesh can only have edges. 4) the input 0D pointcloud can only have vertices. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-flip_inward_triangles","title":"function flip_inward_triangles","text":"<p>Flip the orientation of the triangles in the simplicial complex. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::flip_inward_triangles (\n    const SimplicialComplex &amp; sc\n) \n</code></pre> <p>The input simplicial complex should have the attribute slot 'orient':&lt;Index&gt; for each triangle. After the operation, the orientation of the triangles will be flipped, and the <code>orient</code> attribute will be updated.</p> <p>Returns:</p> <p>SimplicialComplex the simplicial complex with the orientation of the triangles flipped. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-ground","title":"function ground","text":"<p>Create a gound plane. </p><pre><code>UIPC_GEOMETRY_API ImplicitGeometry uipc::geometry::ground (\n    Float height=0.0,\n    const Vector3 &amp; N=Vector3::UnitY()\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>height</code> The height of the ground plane </li> </ul>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-halfplane","title":"function halfplane","text":"<p>Create a half-plane. </p><pre><code>UIPC_GEOMETRY_API ImplicitGeometry uipc::geometry::halfplane (\n    const Vector3 &amp; P=Vector3::Zero(),\n    const Vector3 &amp; N=Vector3::UnitY()\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>height</code> The height of the ground plane </li> </ul>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-halfplane_vertex_signed_distance","title":"function halfplane_vertex_signed_distance","text":"<p>Compute the distance between a half-plane (P, N) and a vertex V (with thickness V_thickness). </p><pre><code>Float UIPC_GEOMETRY_API uipc::geometry::halfplane_vertex_signed_distance (\n    const Vector3 &amp; P,\n    const Vector3 &amp; N,\n    const Vector3 &amp; V,\n    Float V_thickness=0.0\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>P</code> The Origin point of the half-plane. </li> <li><code>N</code> The Normal vector of the half-plane. </li> <li><code>V</code> The Vertex point. </li> <li><code>V_thickness</code> The thickness of the vertex. </li> </ul>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-is_point_in_tet","title":"function is_point_in_tet","text":"<p>Check if a point is in a tetrahedron. </p><pre><code>UIPC_GEOMETRY_API bool uipc::geometry::is_point_in_tet (\n    const Vector3 &amp; T0,\n    const Vector3 &amp; T1,\n    const Vector3 &amp; T2,\n    const Vector3 &amp; T3,\n    const Vector3 &amp; P,\n    Vector4 &amp; tuvw_in_tet\n) \n</code></pre> <p>T0, T1, T2, T3 the vertices of the tetrahedron P is the point</p> <p>Parameters:</p> <ul> <li><code>tuvw_in_tet</code> the barycentric coordinates of the intersection point in the tet. Even if the function return false, the barycentric coordinates are still calculated correctly.</li> </ul> <p>Returns:</p> <p>true if the point is in the tetrahedron </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-is_trimesh_closed","title":"function is_trimesh_closed","text":"<p>Check if a trimesh is closed. </p><pre><code>UIPC_GEOMETRY_API bool uipc::geometry::is_trimesh_closed (\n    const SimplicialComplex &amp; R\n) \n</code></pre> <p>Only 2D SimplicialComplex is supported.</p> <p>Parameters:</p> <ul> <li><code>R</code> the simplicial complex to be checked. </li> </ul> <p>Returns:</p> <p>true if the trimesh is closed, false otherwise. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-label_connected_vertices","title":"function label_connected_vertices","text":"<p>Label the connected vertices of a simplicial complex (by edges). </p><pre><code>UIPC_GEOMETRY_API S&lt; AttributeSlot &lt; IndexT &gt; &gt; uipc::geometry::label_connected_vertices (\n    SimplicialComplex &amp; complex\n) \n</code></pre> <ul> <li>Create a <code>region</code> &lt;IndexT&gt; attribute on <code>vertices</code> to tell which region a vertex is belong to.</li> <li>Create a <code>region_count</code> &lt;IndexT&gt; attribute on <code>meta</code> to tell how many regions are there.</li> </ul> <p>Returns:</p> <p>S&lt;AttributeSlot&lt;IndexT&gt;&gt; The <code>region</code> attribute slot. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-label_region","title":"function label_region","text":"<p>Label the regions of a simplicial complex. </p><pre><code>UIPC_GEOMETRY_API void uipc::geometry::label_region (\n    SimplicialComplex &amp; complex\n) \n</code></pre> <ul> <li>Create a <code>region</code> &lt;IndexT&gt; attribute on <code>edges</code> to tell which region an edge is belong to.</li> <li>Create a <code>region</code> &lt;IndexT&gt; attribute on <code>triangles</code> to tell which region a triangle is belong to. (if exists)</li> <li>Create a <code>region</code> &lt;IndexT&gt; attribute on <code>tetrahedra</code> to tell which region a tetrahedron is belong to. (if exists)</li> <li>Create a <code>region_count</code> &lt;IndexT&gt; attribute on <code>meta</code> to tell how many regions are there.</li> </ul> <p>Returns:</p> <p>S&lt;AttributeSlot&lt;IndexT&gt;&gt; The <code>region</code> attribute slot. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-label_surface","title":"function label_surface","text":"<p>Label the surface of a simplicial complex. </p><pre><code>UIPC_GEOMETRY_API void uipc::geometry::label_surface (\n    SimplicialComplex &amp; R\n) \n</code></pre> <p>1) label 'is_surf':&lt;IndexT&gt; on vertices/edges/triangles/tetrahedra 2) set 'parent_id':&lt;IndexT&gt; on triangles, indicating the parent tetrahedron</p> <p>Parameters:</p> <ul> <li><code>R</code> the simplicial complex to be labeled. </li> </ul>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-label_triangle_orient","title":"function label_triangle_orient","text":"<p>Label the orientation of the triangles in the simplicial complex. </p><pre><code>UIPC_GEOMETRY_API S&lt; AttributeSlot &lt; IndexT &gt; &gt; uipc::geometry::label_triangle_orient (\n    SimplicialComplex &amp; sc\n) \n</code></pre> <p>Set 'orient':&lt;Index&gt; for each triangle in the simplicial complex. 1) orient=1 means the triangle is oriented outward the tetrahedron. 2) orient=0 means the orientation is undetermined. 3) orient=-1 means the triangle is oriented inward the tetrahedron.</p> <p>Returns:</p> <p>P&lt;AttributeSlot&lt;IndexT&gt;&gt; the attribute slot of the triangle orientation. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-linemesh","title":"function linemesh","text":"<p>Create a simplicial complex from a line mesh. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::linemesh (\n    span&lt; const Vector3 &gt; Vs,\n    span&lt; const Vector2i &gt; Es\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>Vs</code> The vertex positions of the line mesh </li> <li><code>Es</code> The edges of the line mesh </li> </ul> <p>Returns:</p> <p>SimplicialComplex </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-merge","title":"function merge","text":"<p>Merge a list of simplicial complexes into one simplicial complex. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::merge (\n    span&lt; const SimplicialComplex * &gt; complexes\n) \n</code></pre> <p>All input simplicial complexes must have only one instance.</p> <p>Returns:</p> <p>SimplicialComplex the merged simplicial complex. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-merge_1","title":"function merge","text":"<pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::merge (\n    std::initializer_list&lt; const SimplicialComplex * &gt; &amp;&amp; complexes\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-mesh_partition","title":"function mesh_partition","text":"<p>partition the simplicial complex </p><pre><code>void UIPC_GEOMETRY_API uipc::geometry::mesh_partition (\n    SimplicialComplex &amp; sc,\n    SizeT part_max_size\n) \n</code></pre> <p>create a <code>mesh_part</code> &lt;IndexT&gt; attribute on the simplicial complex' vertices</p> <p>Parameters:</p> <ul> <li><code>sc</code> simplicial complex </li> <li><code>part_max_size</code> the vertex number in each partition &lt;= part_max_size </li> </ul>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-operator","title":"function operator+=","text":"<pre><code>UIPC_CORE_API AttributeCollection &amp; uipc::geometry::operator+= (\n    AttributeCollection &amp; dst,\n    const AttributeCollectionCommit &amp; inc\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-operator_1","title":"function operator+=","text":"<pre><code>UIPC_CORE_API GeometryCollection &amp; uipc::geometry::operator+= (\n    GeometryCollection &amp; dst,\n    const GeometryCollectionCommit &amp; inc\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-operator_2","title":"function operator+=","text":"<pre><code>UIPC_CORE_API Geometry &amp; uipc::geometry::operator+= (\n    Geometry &amp; base,\n    const GeometryCommit &amp; inc\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-operator-","title":"function operator-","text":"<pre><code>UIPC_CORE_API AttributeCollectionCommit uipc::geometry::operator- (\n    const AttributeCollection &amp; dst,\n    const AttributeCollection &amp; src\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-operator-_1","title":"function operator-","text":"<pre><code>UIPC_CORE_API GeometryCollectionCommit uipc::geometry::operator- (\n    const GeometryCollection &amp; dst,\n    const GeometryCollection &amp; src\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-operator-_2","title":"function operator-","text":"<pre><code>UIPC_CORE_API GeometryCommit uipc::geometry::operator- (\n    const Geometry &amp; dst,\n    const Geometry &amp; src\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-optimal_transform","title":"function optimal_transform","text":"<p>Find out the optimal transformation matrix that maps the source points to the destination points. </p><pre><code>UIPC_GEOMETRY_API Matrix4x4 uipc::geometry::optimal_transform (\n    span&lt; const Vector3 &gt; S,\n    span&lt; const Vector3 &gt; D\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>S</code> The source points. </li> <li><code>D</code> The destination points. </li> </ul> <p>Returns:</p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-optimal_transform_1","title":"function optimal_transform","text":"<p>Find out the optimal transformation matrix that maps the source simplicial complex to the destination simplicial complex. </p><pre><code>UIPC_GEOMETRY_API Matrix4x4 uipc::geometry::optimal_transform (\n    const SimplicialComplex &amp; S,\n    const SimplicialComplex &amp; D\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>S</code> The source simplicial complex. </li> <li><code>D</code> The destination simplicial complex. </li> </ul> <p>Returns:</p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-point_edge_squared_distance","title":"function point_edge_squared_distance","text":"<pre><code>Float UIPC_GEOMETRY_API uipc::geometry::point_edge_squared_distance (\n    const Vector3 &amp; P,\n    const Vector3 &amp; E0,\n    const Vector3 &amp; E1\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-point_point_squared_distance","title":"function point_point_squared_distance","text":"<pre><code>Float UIPC_GEOMETRY_API uipc::geometry::point_point_squared_distance (\n    const Vector3 &amp; P0,\n    const Vector3 &amp; P1\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-point_triangle_squared_distance","title":"function point_triangle_squared_distance","text":"<pre><code>Float UIPC_GEOMETRY_API uipc::geometry::point_triangle_squared_distance (\n    const Vector3 &amp; P,\n    const Vector3 &amp; T0,\n    const Vector3 &amp; T1,\n    const Vector3 &amp; T2\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-pointcloud","title":"function pointcloud","text":"<p>Create a simplicial complex from a point cloud. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::pointcloud (\n    span&lt; const Vector3 &gt; Vs\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>Vs</code> The vertex positions of the point cloud </li> </ul> <p>Returns:</p> <p>SimplicialComplex </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-tetmesh","title":"function tetmesh","text":"<p>Create a simplicial complex from a tetrahedral mesh. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::tetmesh (\n    span&lt; const Vector3 &gt; Vs,\n    span&lt; const Vector4i &gt; Ts\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>Vs</code> The vertex positions of the tetrahedral mesh </li> <li><code>Ts</code> The tetrahedra of the tetrahedral mesh </li> </ul>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-tetrahedralize","title":"function tetrahedralize","text":"<p>Tetrahedralize a 2D simplicial complex (trimesh). </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::tetrahedralize (\n    const SimplicialComplex &amp; sc,\n    const Json &amp; options=Json::object()\n) \n</code></pre> <p>Returns:</p> <p>SimplicialComplex The simplicial complexes by regions. </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-tri_edge_intersect","title":"function tri_edge_intersect","text":"<p>Check if a triangle and an edge intersect. </p><pre><code>UIPC_GEOMETRY_API bool uipc::geometry::tri_edge_intersect (\n    const Vector3 &amp; T0,\n    const Vector3 &amp; T1,\n    const Vector3 &amp; T2,\n    const Vector3 &amp; E0,\n    const Vector3 &amp; E1,\n    bool &amp; coplanar,\n    Vector3 &amp; uvw_in_tri,\n    Vector2 &amp; uv_in_edge\n) \n</code></pre> <p>T0, T1, T2 the vertices of the triangle E0, E1 the vertices of the edge</p> <p>Parameters:</p> <ul> <li><code>uvw_in_tri</code> the barycentric coordinates of the intersection point in the triangle. Even if the function return false, the barycentric coordinates are still calculated correctly.</li> <li><code>uv_in_edge</code> the barycentric coordinates of the intersection point in the edge. Even if the function return false, the barycentric coordinates are still calculated correctly.</li> </ul> <p>Returns:</p> <p>true if the triangle and the edge intersect </p>"},{"location":"Libuipc/namespaceuipc_1_1geometry/#function-trimesh","title":"function trimesh","text":"<p>Create a simplicial complex from a triangle mesh. </p><pre><code>UIPC_GEOMETRY_API SimplicialComplex uipc::geometry::trimesh (\n    span&lt; const Vector3 &gt; Vs,\n    span&lt; const Vector3i &gt; Fs\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>Vs</code> The vertex positions of the triangle mesh </li> <li><code>Fs</code> The triangles of the triangle mesh </li> </ul> <p>Returns:</p> <p>SimplicialComplex </p> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/geometry_visitor.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/","title":"Class uipc::geometry::AbstractSimplicialComplex","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#class-uipcgeometryabstractsimplicialcomplex","title":"Class uipc::geometry::AbstractSimplicialComplex","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AbstractSimplicialComplex</p> <p>Represents an abstract simplicial complex, containing vertices, edges, triangles, and tetrahedra. More...</p> <ul> <li><code>#include &lt;abstract_simplicial_complex.h&gt;</code></li> </ul> <p>Inherits the following classes: uipc::geometry::Geometry</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#public-types","title":"Public Types","text":"Type Name typedef SimplicialComplexAttributes&lt; true, 1 &gt; CEdgeAttributes typedef SimplicialComplexAttributes&lt; true, 3 &gt; CTetrahedronAttributes typedef SimplicialComplexAttributes&lt; true, 2 &gt; CTriangleAttributes typedef SimplicialComplexAttributes&lt; true, 0 &gt; CVertexAttributes typedef SimplicialComplexAttributes&lt; false, 1 &gt; EdgeAttributes Alias for the edge attributes. typedef SimplicialComplexAttributes&lt; false, 3 &gt; TetrahedronAttributes Alias for the tetrahedron attributes. typedef SimplicialComplexAttributes&lt; false, 2 &gt; TriangleAttributes Alias for the triangle attributes. typedef SimplicialComplexAttributes&lt; false, 0 &gt; VertexAttributes Alias for the vertex attributes."},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#public-types-inherited-from-uipcgeometrygeometry","title":"Public Types inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name typedef InstanceAttributesT&lt; true &gt; CInstanceAttributes typedef MetaAttributesT&lt; true &gt; CMetaAttributes typedef InstanceAttributesT&lt; false &gt; InstanceAttributes typedef MetaAttributesT&lt; false &gt; MetaAttributes"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#public-functions","title":"Public Functions","text":"Type Name AbstractSimplicialComplex () = default AbstractSimplicialComplex (const AbstractSimplicialComplex &amp; o) = default AbstractSimplicialComplex (AbstractSimplicialComplex &amp;&amp; o) = default IndexT dim () noexcept constGet the dimension of the simplicial complex. EdgeAttributes edges () noexceptA wrapper of the edges and its attributes of the simplicial complex. CEdgeAttributes edges () noexcept const AbstractSimplicialComplex &amp; operator= (const AbstractSimplicialComplex &amp; o) = delete AbstractSimplicialComplex &amp; operator= (AbstractSimplicialComplex &amp;&amp; o) = delete TetrahedronAttributes tetrahedra () noexceptA wrapper of the tetrahedra and its attributes of the simplicial complex. CTetrahedronAttributes tetrahedra () noexcept const TriangleAttributes triangles () noexceptA wrapper of the triangles and its attributes of the simplicial complex. CTriangleAttributes triangles () noexcept const VertexAttributes vertices () noexceptA wrapper of the vertices and its attributes of the simplicial complex. CVertexAttributes vertices () noexcept const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#public-functions-inherited-from-uipcgeometrygeometry","title":"Public Functions inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name Geometry ()  Geometry (const Geometry &amp; o)  Geometry (Geometry &amp;&amp; o) = default T * as ()  const T * as () const InstanceAttributes instances () Get the instance attributes of the geometries. CInstanceAttributes instances () const MetaAttributes meta () Get the meta attributes of the geometries. CMetaAttributes meta () const Geometry &amp; operator= (const Geometry &amp; o) = delete Geometry &amp; operator= (Geometry &amp;&amp; o) = delete"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#public-functions-inherited-from-uipcgeometryigeometry","title":"Public Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name S&lt; IGeometry &gt; clone () const Json to_json () const std::string_view type () noexcept constGet the type of the geometries, check the type to downcast the geometries to a specific type. void update_from (const GeometryCommit &amp; commit)  virtual ~IGeometry () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#protected-functions","title":"Protected Functions","text":"Type Name virtual Json do_to_json () override const virtual std::string_view get_type () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#protected-functions-inherited-from-uipcgeometrygeometry","title":"Protected Functions inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name S&lt; AttributeCollection &gt; create (std::string_view name)  virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) override virtual S&lt; IGeometry &gt; do_clone () override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) override virtual Json do_to_json () override const virtual void do_update_from (const GeometryCommit &amp; commit) override S&lt; const AttributeCollection &gt; find (std::string_view name) const S&lt; AttributeCollection &gt; find (std::string_view name)  virtual std::string_view get_type () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#protected-functions-inherited-from-uipcgeometryigeometry","title":"Protected Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) = 0 virtual S&lt; IGeometry &gt; do_clone () const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) = 0 virtual Json do_to_json () const = 0 virtual void do_update_from (const GeometryCommit &amp; commit) = 0 virtual std::string_view get_type () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#detailed-description","title":"Detailed Description","text":"<p>Note:</p> <p>Abstract simplicial complex does not contain any geometric information, such as coordinates of vertices. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-cedgeattributes","title":"typedef CEdgeAttributes","text":"<pre><code>using uipc::geometry::AbstractSimplicialComplex::CEdgeAttributes =  SimplicialComplexAttributes&lt;true, 1&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-ctetrahedronattributes","title":"typedef CTetrahedronAttributes","text":"<pre><code>using uipc::geometry::AbstractSimplicialComplex::CTetrahedronAttributes =  SimplicialComplexAttributes&lt;true, 3&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-ctriangleattributes","title":"typedef CTriangleAttributes","text":"<pre><code>using uipc::geometry::AbstractSimplicialComplex::CTriangleAttributes =  SimplicialComplexAttributes&lt;true, 2&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-cvertexattributes","title":"typedef CVertexAttributes","text":"<pre><code>using uipc::geometry::AbstractSimplicialComplex::CVertexAttributes =  SimplicialComplexAttributes&lt;true, 0&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-edgeattributes","title":"typedef EdgeAttributes","text":"<p>Alias for the edge attributes. </p><pre><code>using uipc::geometry::AbstractSimplicialComplex::EdgeAttributes =  SimplicialComplexAttributes&lt;false, 1&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-tetrahedronattributes","title":"typedef TetrahedronAttributes","text":"<p>Alias for the tetrahedron attributes. </p><pre><code>using uipc::geometry::AbstractSimplicialComplex::TetrahedronAttributes =  SimplicialComplexAttributes&lt;false, 3&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-triangleattributes","title":"typedef TriangleAttributes","text":"<p>Alias for the triangle attributes. </p><pre><code>using uipc::geometry::AbstractSimplicialComplex::TriangleAttributes =  SimplicialComplexAttributes&lt;false, 2&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#typedef-vertexattributes","title":"typedef VertexAttributes","text":"<p>Alias for the vertex attributes. </p><pre><code>using uipc::geometry::AbstractSimplicialComplex::VertexAttributes =  SimplicialComplexAttributes&lt;false, 0&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-abstractsimplicialcomplex-13","title":"function AbstractSimplicialComplex [1/3]","text":"<pre><code>uipc::geometry::AbstractSimplicialComplex::AbstractSimplicialComplex () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-abstractsimplicialcomplex-23","title":"function AbstractSimplicialComplex [2/3]","text":"<pre><code>uipc::geometry::AbstractSimplicialComplex::AbstractSimplicialComplex (\n    const AbstractSimplicialComplex &amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-abstractsimplicialcomplex-33","title":"function AbstractSimplicialComplex [3/3]","text":"<pre><code>uipc::geometry::AbstractSimplicialComplex::AbstractSimplicialComplex (\n    AbstractSimplicialComplex &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-dim","title":"function dim","text":"<p>Get the dimension of the simplicial complex. </p><pre><code>IndexT uipc::geometry::AbstractSimplicialComplex::dim () noexcept const\n</code></pre> <p>Return the maximum dimension of the simplices in the simplicial complex.</p> <p>Returns:</p> <p>IndexT </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-edges-12","title":"function edges [1/2]","text":"<p>A wrapper of the edges and its attributes of the simplicial complex. </p><pre><code>EdgeAttributes uipc::geometry::AbstractSimplicialComplex::edges () noexcept\n</code></pre> <p>Returns:</p> <p>EdgeAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-edges-22","title":"function edges [2/2]","text":"<pre><code>CEdgeAttributes uipc::geometry::AbstractSimplicialComplex::edges () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-operator","title":"function operator=","text":"<pre><code>AbstractSimplicialComplex &amp; uipc::geometry::AbstractSimplicialComplex::operator= (\n    const AbstractSimplicialComplex &amp; o\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-operator_1","title":"function operator=","text":"<pre><code>AbstractSimplicialComplex &amp; uipc::geometry::AbstractSimplicialComplex::operator= (\n    AbstractSimplicialComplex &amp;&amp; o\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-tetrahedra-12","title":"function tetrahedra [1/2]","text":"<p>A wrapper of the tetrahedra and its attributes of the simplicial complex. </p><pre><code>TetrahedronAttributes uipc::geometry::AbstractSimplicialComplex::tetrahedra () noexcept\n</code></pre> <p>Returns:</p> <p>TetrahedronAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-tetrahedra-22","title":"function tetrahedra [2/2]","text":"<pre><code>CTetrahedronAttributes uipc::geometry::AbstractSimplicialComplex::tetrahedra () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-triangles-12","title":"function triangles [1/2]","text":"<p>A wrapper of the triangles and its attributes of the simplicial complex. </p><pre><code>TriangleAttributes uipc::geometry::AbstractSimplicialComplex::triangles () noexcept\n</code></pre> <p>Returns:</p> <p>TriangleAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-triangles-22","title":"function triangles [2/2]","text":"<pre><code>CTriangleAttributes uipc::geometry::AbstractSimplicialComplex::triangles () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-vertices-12","title":"function vertices [1/2]","text":"<p>A wrapper of the vertices and its attributes of the simplicial complex. </p><pre><code>VertexAttributes uipc::geometry::AbstractSimplicialComplex::vertices () noexcept\n</code></pre> <p>Returns:</p> <p>VertexAttributeInfo </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-vertices-22","title":"function vertices [2/2]","text":"<pre><code>CVertexAttributes uipc::geometry::AbstractSimplicialComplex::vertices () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-do_to_json","title":"function do_to_json","text":"<pre><code>virtual Json uipc::geometry::AbstractSimplicialComplex::do_to_json () override const\n</code></pre> <p>Implements uipc::geometry::Geometry::do_to_json</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#function-get_type","title":"function get_type","text":"<pre><code>virtual std::string_view uipc::geometry::AbstractSimplicialComplex::get_type () noexcept override const\n</code></pre> <p>Implements uipc::geometry::Geometry::get_type</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_abstract_simplicial_complex/#friend-formatter-abstractsimplicialcomplex","title":"friend formatter&lt; AbstractSimplicialComplex &gt;","text":"<pre><code>struct uipc::geometry::AbstractSimplicialComplex::formatter&lt; AbstractSimplicialComplex &gt; (\n    fmt::formatter&lt; AbstractSimplicialComplex &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/abstract_simplicial_complex.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/","title":"Class uipc::geometry::Attribute","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#class-uipcgeometryattribute","title":"Class uipc::geometry::Attribute","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; Attribute</p> <p>Template class to represent a geometries attribute of type T. More...</p> <ul> <li><code>#include &lt;attribute.h&gt;</code></li> </ul> <p>Inherits the following classes: uipc::geometry::IAttribute</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#public-types","title":"Public Types","text":"Type Name typedef T value_type"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#public-functions","title":"Public Functions","text":"Type Name Attribute (const T &amp; default_value={}) noexcept Attribute (const Attribute&lt; T &gt; &amp;) = default Attribute (Attribute&lt; T &gt; &amp;&amp;) = default Attribute&lt; T &gt; &amp; operator= (const Attribute&lt; T &gt; &amp;) = default Attribute&lt; T &gt; &amp; operator= (Attribute&lt; T &gt; &amp;&amp;) = default span&lt; const T &gt; view () noexcept const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#public-functions-inherited-from-uipcgeometryiattribute","title":"Public Functions inherited from uipc::geometry::IAttribute","text":"<p>See uipc::geometry::IAttribute</p> Type Name IAttribute () = default void from_json (const Json &amp; j) noexcept SizeT size () noexcept constGet the size of the attribute. Json to_json (SizeT i) noexcept const Json to_json () noexcept const std::string_view type_name () noexcept constGet the type name of data stored in the attribute slot. virtual ~IAttribute () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#public-static-functions","title":"Public Static Functions","text":"Type Name std::string type () noexcept"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#protected-functions","title":"Protected Functions","text":"Type Name virtual void do_clear () override virtual S&lt; IAttribute &gt; do_clone () override const virtual S&lt; IAttribute &gt; do_clone_empty () override const virtual void do_copy_from (const IAttribute &amp; other, const AttributeCopy &amp; copy) noexcept override virtual void do_from_json (const Json &amp; j) noexcept override virtual void do_reorder (span&lt; const SizeT &gt; O) noexcept override virtual void do_reserve (SizeT N) override virtual void do_resize (SizeT N) override virtual Json do_to_json (SizeT i) noexcept override const virtual Json do_to_json () noexcept override const virtual SizeT get_size () override const virtual std::string_view get_type_name () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#protected-functions-inherited-from-uipcgeometryiattribute","title":"Protected Functions inherited from uipc::geometry::IAttribute","text":"<p>See uipc::geometry::IAttribute</p> Type Name virtual void do_clear () = 0 virtual S&lt; IAttribute &gt; do_clone () const = 0 virtual S&lt; IAttribute &gt; do_clone_empty () const = 0 virtual void do_copy_from (const IAttribute &amp; other, const AttributeCopy &amp; copy) noexcept = 0 virtual void do_from_json (const Json &amp; j) noexcept = 0 virtual void do_reorder (span&lt; const SizeT &gt; O) noexcept = 0 virtual void do_reserve (SizeT N) = 0 virtual void do_resize (SizeT N) = 0 virtual Json do_to_json (SizeT i) noexcept const = 0 virtual Json do_to_json () noexcept const = 0 virtual SizeT get_size () const = 0 virtual std::string_view get_type_name () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> The type of the attribute values. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#typedef-value_type","title":"typedef value_type","text":"<pre><code>using uipc::geometry::Attribute&lt; T &gt;::value_type =  T;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-attribute-13","title":"function Attribute [1/3]","text":"<pre><code>uipc::geometry::Attribute::Attribute (\n    const T &amp; default_value={}\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-attribute-23","title":"function Attribute [2/3]","text":"<pre><code>uipc::geometry::Attribute::Attribute (\n    const Attribute &lt; T &gt; &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-attribute-33","title":"function Attribute [3/3]","text":"<pre><code>uipc::geometry::Attribute::Attribute (\n    Attribute &lt; T &gt; &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-operator","title":"function operator=","text":"<pre><code>Attribute &lt; T &gt; &amp; uipc::geometry::Attribute::operator= (\n    const Attribute &lt; T &gt; &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-operator_1","title":"function operator=","text":"<pre><code>Attribute &lt; T &gt; &amp; uipc::geometry::Attribute::operator= (\n    Attribute &lt; T &gt; &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-view-22","title":"function view [2/2]","text":"<pre><code>span&lt; const T &gt; uipc::geometry::Attribute::view () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-type","title":"function type","text":"<pre><code>static std::string uipc::geometry::Attribute::type () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_clear","title":"function do_clear","text":"<pre><code>virtual void uipc::geometry::Attribute::do_clear () override\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_clear</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; IAttribute &gt; uipc::geometry::Attribute::do_clone () override const\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_clone</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_clone_empty","title":"function do_clone_empty","text":"<pre><code>virtual S&lt; IAttribute &gt; uipc::geometry::Attribute::do_clone_empty () override const\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_clone_empty</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_copy_from","title":"function do_copy_from","text":"<pre><code>virtual void uipc::geometry::Attribute::do_copy_from (\n    const IAttribute &amp; other,\n    const AttributeCopy &amp; copy\n) noexcept override\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_copy_from</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_from_json","title":"function do_from_json","text":"<pre><code>virtual void uipc::geometry::Attribute::do_from_json (\n    const Json &amp; j\n) noexcept override\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_from_json</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_reorder","title":"function do_reorder","text":"<pre><code>virtual void uipc::geometry::Attribute::do_reorder (\n    span&lt; const SizeT &gt; O\n) noexcept override\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_reorder</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_reserve","title":"function do_reserve","text":"<pre><code>virtual void uipc::geometry::Attribute::do_reserve (\n    SizeT N\n) override\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_reserve</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_resize","title":"function do_resize","text":"<pre><code>virtual void uipc::geometry::Attribute::do_resize (\n    SizeT N\n) override\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_resize</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_to_json-12","title":"function do_to_json [1/2]","text":"<pre><code>virtual Json uipc::geometry::Attribute::do_to_json (\n    SizeT i\n) noexcept override const\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_to_json</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-do_to_json-22","title":"function do_to_json [2/2]","text":"<pre><code>virtual Json uipc::geometry::Attribute::do_to_json () noexcept override const\n</code></pre> <p>Implements uipc::geometry::IAttribute::do_to_json</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-get_size","title":"function get_size","text":"<pre><code>virtual SizeT uipc::geometry::Attribute::get_size () override const\n</code></pre> <p>Implements uipc::geometry::IAttribute::get_size</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#function-get_type_name","title":"function get_type_name","text":"<pre><code>virtual std::string_view uipc::geometry::Attribute::get_type_name () noexcept override const\n</code></pre> <p>Implements uipc::geometry::IAttribute::get_type_name</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute/#friend-view-12","title":"friend view [1/2]","text":"<pre><code>inline span&lt; T &gt; uipc::geometry::Attribute::view (\n    Attribute &lt; T &gt; &amp; a\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/","title":"Class uipc::geometry::AttributeCollection","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#class-uipcgeometryattributecollection","title":"Class uipc::geometry::AttributeCollection","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeCollection</p> <p>A collection of geometries attributes. More...</p> <ul> <li><code>#include &lt;attribute_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#public-functions","title":"Public Functions","text":"Type Name AttributeCollection () = default AttributeCollection (const AttributeCollection &amp;)  AttributeCollection (AttributeCollection &amp;&amp;) noexcept SizeT attribute_count () constGet the number of attribute slots. void clear () clear the underlying attribute values of all attribute slots, the attribute slots will not be destroyed. void copy_from (const AttributeCollection &amp; other, const AttributeCopy &amp; copy, span&lt; const string &gt; include_names={}, span&lt; const string &gt; exclude_names={}) copy_from the underlying attribute values of all attribute slots. S&lt; AttributeSlot&lt; T &gt; &gt; create (std::string_view name, const T &amp; default_value={}, bool allow_destroy=true) Create a new attribute slot of type T with a given name. void destroy (std::string_view name) Remove the attribute slot with the given name. S&lt; IAttributeSlot &gt; find (std::string_view name) Find the attribute slot with the given name. S&lt; const IAttributeSlot &gt; find (std::string_view name) constconst version of find. S&lt; AttributeSlot&lt; T &gt; &gt; find (std::string_view name) Template version of find. S&lt; const AttributeSlot&lt; T &gt; &gt; find (std::string_view name) constTemplate const version of find. vector&lt; string &gt; names () constGet the names of all attribute slots. AttributeCollection &amp; operator= (const AttributeCollection &amp;)  AttributeCollection &amp; operator= (AttributeCollection &amp;&amp;) noexcept void reorder (span&lt; const SizeT &gt; O) Reorder the underlying attribute values of all attribute slots. void reserve (SizeT N) Reserve memory for all attribute slots. void resize (SizeT N) Resize all attribute slots to the given size. S&lt; IAttributeSlot &gt; share (std::string_view name, const IAttributeSlot &amp; slot, bool allow_destroy=true) Share the underlying attribute of the given slot with a new name. S&lt; AttributeSlot&lt; T &gt; &gt; share (std::string_view name, const AttributeSlot&lt; T &gt; &amp; slot, bool allow_destroy=true) Template version of share. SizeT size () constGet the size of the attribute slots. Json to_json () constGet the json representation of the attribute collection. void update_from (const AttributeCollectionCommit &amp; commit) Update the attribute collection from AttributeCollectionCommit ."},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#detailed-description","title":"Detailed Description","text":"<p>All geometries attributes in the collection always have the same size. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-attributecollection-13","title":"function AttributeCollection [1/3]","text":"<pre><code>uipc::geometry::AttributeCollection::AttributeCollection () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-attributecollection-23","title":"function AttributeCollection [2/3]","text":"<pre><code>uipc::geometry::AttributeCollection::AttributeCollection (\n    const AttributeCollection &amp;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-attributecollection-33","title":"function AttributeCollection [3/3]","text":"<pre><code>uipc::geometry::AttributeCollection::AttributeCollection (\n    AttributeCollection &amp;&amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-attribute_count","title":"function attribute_count","text":"<p>Get the number of attribute slots. </p><pre><code>SizeT uipc::geometry::AttributeCollection::attribute_count () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-clear","title":"function clear","text":"<p>clear the underlying attribute values of all attribute slots, the attribute slots will not be destroyed. </p><pre><code>void uipc::geometry::AttributeCollection::clear () \n</code></pre> <p>Note:</p> <p>This method may generate data clones. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-copy_from","title":"function copy_from","text":"<p>copy_from the underlying attribute values of all attribute slots. </p><pre><code>void uipc::geometry::AttributeCollection::copy_from (\n    const AttributeCollection &amp; other,\n    const AttributeCopy &amp; copy,\n    span&lt; const string &gt; include_names={},\n    span&lt; const string &gt; exclude_names={}\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>copy</code> The copy strategy. </li> <li><code>include_names</code> The names of the attribute slots to be copied. If it is empty, all attribute slots will be copied. </li> <li><code>exclude_names</code> The names of the attribute slots not to be copied, the exclude_names has higher priority than include_names. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-create","title":"function create","text":"<p>Create a new attribute slot of type T with a given name. </p><pre><code>template&lt;typename T&gt;\nS&lt; AttributeSlot &lt; T &gt; &gt; uipc::geometry::AttributeCollection::create (\n    std::string_view name,\n    const T &amp; default_value={},\n    bool allow_destroy=true\n) \n</code></pre> <p>Template parameters:</p> <ul> <li><code>T</code> The type of the attribute values. </li> </ul> <p>Parameters:</p> <ul> <li><code>name</code> The name of the attribute slot. </li> </ul> <p>Returns:</p> <p>The created attribute slot. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-destroy","title":"function destroy","text":"<p>Remove the attribute slot with the given name. </p><pre><code>void uipc::geometry::AttributeCollection::destroy (\n    std::string_view name\n) \n</code></pre> <p>The underlying attribute will not be destroyed if it is shared by other attribute slots.</p> <p>@danger Accessing the removed attribute slot will cause undefined behavior. It's user's responsibility to ensure that the removed attribute slot is not accessed. </p> <p>Parameters:</p> <ul> <li><code>name</code> </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-find-14","title":"function find [1/4]","text":"<p>Find the attribute slot with the given name. </p><pre><code>S&lt; IAttributeSlot &gt; uipc::geometry::AttributeCollection::find (\n    std::string_view name\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>name</code> The name of the attribute slot. </li> </ul> <p>Returns:</p> <p>The attribute slot with the given name. </p> <p>Returns:</p> <p>nullptr if the attribute slot with the given name does not exist. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-find-24","title":"function find [2/4]","text":"<p>const version of find. </p><pre><code>S&lt; const IAttributeSlot &gt; uipc::geometry::AttributeCollection::find (\n    std::string_view name\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-find-34","title":"function find [3/4]","text":"<p>Template version of find. </p><pre><code>template&lt;typename T&gt;\nS&lt; AttributeSlot &lt; T &gt; &gt; uipc::geometry::AttributeCollection::find (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-find-44","title":"function find [4/4]","text":"<p>Template const version of find. </p><pre><code>template&lt;typename T&gt;\nS&lt; const AttributeSlot &lt; T &gt; &gt; uipc::geometry::AttributeCollection::find (\n    std::string_view name\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-names","title":"function names","text":"<p>Get the names of all attribute slots. </p><pre><code>vector&lt; string &gt; uipc::geometry::AttributeCollection::names () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-operator","title":"function operator=","text":"<pre><code>AttributeCollection &amp; uipc::geometry::AttributeCollection::operator= (\n    const AttributeCollection &amp;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-operator_1","title":"function operator=","text":"<pre><code>AttributeCollection &amp; uipc::geometry::AttributeCollection::operator= (\n    AttributeCollection &amp;&amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-reorder","title":"function reorder","text":"<p>Reorder the underlying attribute values of all attribute slots. </p><pre><code>void uipc::geometry::AttributeCollection::reorder (\n    span&lt; const SizeT &gt; O\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>O</code> A New2Old mapping. O[i] = j means the i-th element in the new order has the value of the j-th element in the old order.</li> </ul> <p>Note:</p> <p>This method may generate data clones. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-reserve","title":"function reserve","text":"<p>Reserve memory for all attribute slots. </p><pre><code>void uipc::geometry::AttributeCollection::reserve (\n    SizeT N\n) \n</code></pre> <p>Note:</p> <p>This method generates no data clone. But the memory of the underlying attribute values may be reallocated. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-resize","title":"function resize","text":"<p>Resize all attribute slots to the given size. </p><pre><code>void uipc::geometry::AttributeCollection::resize (\n    SizeT N\n) \n</code></pre> <p>Note:</p> <p>This method may generate data clones. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-share-12","title":"function share [1/2]","text":"<p>Share the underlying attribute of the given slot with a new name. </p><pre><code>S&lt; IAttributeSlot &gt; uipc::geometry::AttributeCollection::share (\n    std::string_view name,\n    const IAttributeSlot &amp; slot,\n    bool allow_destroy=true\n) \n</code></pre> <p>The slot may be from another geometries attribute collection or just current geometries attribute collection. </p> <p>Parameters:</p> <ul> <li><code>name</code> The name of the attribute slot. </li> <li><code>slot</code> The slot brings the underlying attribute. </li> </ul> <p>Returns:</p> <p>The new created attribute slot.</p> <p>Exception:</p> <ul> <li><code>AttributeAlreadyExist</code> if the attribute with the given name already exists. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-share-22","title":"function share [2/2]","text":"<p>Template version of share. </p><pre><code>template&lt;typename T&gt;\nS&lt; AttributeSlot &lt; T &gt; &gt; uipc::geometry::AttributeCollection::share (\n    std::string_view name,\n    const AttributeSlot &lt; T &gt; &amp; slot,\n    bool allow_destroy=true\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-size","title":"function size","text":"<p>Get the size of the attribute slots. </p><pre><code>SizeT uipc::geometry::AttributeCollection::size () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-to_json","title":"function to_json","text":"<p>Get the json representation of the attribute collection. </p><pre><code>Json uipc::geometry::AttributeCollection::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#function-update_from","title":"function update_from","text":"<p>Update the attribute collection from AttributeCollectionCommit . </p><pre><code>void uipc::geometry::AttributeCollection::update_from (\n    const AttributeCollectionCommit &amp; commit\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>commit</code> </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection/#friend-formatter-attributecollection","title":"friend formatter&lt; AttributeCollection &gt;","text":"<pre><code>struct uipc::geometry::AttributeCollection::formatter&lt; AttributeCollection &gt; (\n    fmt::formatter&lt; AttributeCollection &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/","title":"Class uipc::geometry::AttributeCollectionCommit","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#class-uipcgeometryattributecollectioncommit","title":"Class uipc::geometry::AttributeCollectionCommit","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeCollectionCommit</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#public-functions","title":"Public Functions","text":"Type Name AttributeCollectionCommit () = default AttributeCollectionCommit (const AttributeCollection &amp; dst)  AttributeCollectionCommit (const AttributeCollectionCommit &amp; other) = default const AttributeCollection &amp; attribute_collection () noexcept const AttributeCollectionCommit &amp; operator= (const AttributeCollectionCommit &amp; other) = default span&lt; const std::string &gt; removed_names () noexcept const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#function-attributecollectioncommit-14","title":"function AttributeCollectionCommit [1/4]","text":"<pre><code>uipc::geometry::AttributeCollectionCommit::AttributeCollectionCommit () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#function-attributecollectioncommit-24","title":"function AttributeCollectionCommit [2/4]","text":"<pre><code>explicit uipc::geometry::AttributeCollectionCommit::AttributeCollectionCommit (\n    const AttributeCollection &amp; dst\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#function-attributecollectioncommit-34","title":"function AttributeCollectionCommit [3/4]","text":"<pre><code>uipc::geometry::AttributeCollectionCommit::AttributeCollectionCommit (\n    const AttributeCollectionCommit &amp; other\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#function-attribute_collection","title":"function attribute_collection","text":"<pre><code>inline const AttributeCollection &amp; uipc::geometry::AttributeCollectionCommit::attribute_collection () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#function-operator","title":"function operator=","text":"<pre><code>AttributeCollectionCommit &amp; uipc::geometry::AttributeCollectionCommit::operator= (\n    const AttributeCollectionCommit &amp; other\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_commit/#function-removed_names","title":"function removed_names","text":"<pre><code>inline span&lt; const std::string &gt; uipc::geometry::AttributeCollectionCommit::removed_names () noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection_commit.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_error/","title":"Class uipc::geometry::AttributeCollectionError","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_error/#class-uipcgeometryattributecollectionerror","title":"Class uipc::geometry::AttributeCollectionError","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeCollectionError</p> <p>Inherits the following classes: uipc::Exception</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_error/#public-functions","title":"Public Functions","text":"Type Name Exception (const string &amp; msg)"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_error/#public-functions-inherited-from-uipcexception","title":"Public Functions inherited from uipc::Exception","text":"<p>See uipc::Exception</p> Type Name Exception (const string &amp; msg)  virtual const char * what () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_error/#function-exception","title":"function Exception","text":"<pre><code>uipc::geometry::AttributeCollectionError::Exception (\n    const string &amp; msg\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/","title":"Class uipc::geometry::AttributeCollectionFactory","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#class-uipcgeometryattributecollectionfactory","title":"Class uipc::geometry::AttributeCollectionFactory","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeCollectionFactory</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#public-functions","title":"Public Functions","text":"Type Name AttributeCollectionFactory ()  S&lt; AttributeCollectionCommit &gt; commit_from_json (const Json &amp; j, DeserialSharedAttributeContext &amp; ctx)  Json commit_to_json (const AttributeCollectionCommit &amp; acc, SerialSharedAttributeContext &amp; ctx)  AttributeCollectionCommit diff (const AttributeCollection &amp; current, const AttributeCollection &amp; reference) Get the difference between the current and reference attribute collections. S&lt; AttributeCollection &gt; from_json (const Json &amp; j, DeserialSharedAttributeContext &amp; ctx) Create an attribute collection from a json object and a pool of shared attributes. Json to_json (const AttributeCollection &amp; ac, SerialSharedAttributeContext &amp; ctx)  ~AttributeCollectionFactory ()"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#function-attributecollectionfactory","title":"function AttributeCollectionFactory","text":"<pre><code>uipc::geometry::AttributeCollectionFactory::AttributeCollectionFactory () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#function-commit_from_json","title":"function commit_from_json","text":"<pre><code>S&lt; AttributeCollectionCommit &gt; uipc::geometry::AttributeCollectionFactory::commit_from_json (\n    const Json &amp; j,\n    DeserialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#function-commit_to_json","title":"function commit_to_json","text":"<pre><code>Json uipc::geometry::AttributeCollectionFactory::commit_to_json (\n    const AttributeCollectionCommit &amp; acc,\n    SerialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#function-diff","title":"function diff","text":"<p>Get the difference between the current and reference attribute collections. </p><pre><code>AttributeCollectionCommit uipc::geometry::AttributeCollectionFactory::diff (\n    const AttributeCollection &amp; current,\n    const AttributeCollection &amp; reference\n) \n</code></pre> <ul> <li>New Attributes and Modified Attributes will be copied to the diff_copy.</li> <li>Deleted Attributes will be collected in the removed_names. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#function-from_json","title":"function from_json","text":"<p>Create an attribute collection from a json object and a pool of shared attributes. </p><pre><code>S&lt; AttributeCollection &gt; uipc::geometry::AttributeCollectionFactory::from_json (\n    const Json &amp; j,\n    DeserialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::geometry::AttributeCollectionFactory::to_json (\n    const AttributeCollection &amp; ac,\n    SerialSharedAttributeContext &amp; ctx\n) \n</code></pre> <p>@breif Convert an attribute collection to a json object, while using index to replace the attributes pointer </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_collection_factory/#function-attributecollectionfactory_1","title":"function ~AttributeCollectionFactory","text":"<pre><code>uipc::geometry::AttributeCollectionFactory::~AttributeCollectionFactory () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection_factory.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/","title":"Class uipc::geometry::AttributeCopy","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#class-uipcgeometryattributecopy","title":"Class uipc::geometry::AttributeCopy","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeCopy</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#public-types","title":"Public Types","text":"Type Name enum CopyType"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#public-functions","title":"Public Functions","text":"Type Name AttributeCopy () noexceptDst[i] = Src[i]. CopyType type () noexcept const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#public-static-functions","title":"Public Static Functions","text":"Type Name AttributeCopy pair (span&lt; const std::pair&lt; SizeT, SizeT &gt; &gt; pairs) noexceptDst[Pairs[i].first] = Src[Pairs[i].second]. AttributeCopy pull (span&lt; const SizeT &gt; mapping) noexceptDst[i] = Src[Mapping[i]]. AttributeCopy push (span&lt; const SizeT &gt; mapping) noexceptDst[Mapping[i]] = Src[i]. AttributeCopy range (SizeT dst_offset, SizeT src_offset, SizeT count) noexceptDst[dst_offset + i] = Src[src_offset + i] $$ i \\in [0, count) $$. AttributeCopy same_dim () noexceptDst[i] = Src[i]."},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#enum-copytype","title":"enum CopyType","text":"<pre><code>enum uipc::geometry::AttributeCopy::CopyType {\n    None = 0,\n    SameDim,\n    Range,\n    Pull,\n    Push,\n    Pair\n};\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#function-attributecopy","title":"function AttributeCopy","text":"<p>Dst[i] = Src[i]. </p><pre><code>uipc::geometry::AttributeCopy::AttributeCopy () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#function-type","title":"function type","text":"<pre><code>CopyType uipc::geometry::AttributeCopy::type () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#function-pair","title":"function pair","text":"<p>Dst[Pairs[i].first] = Src[Pairs[i].second]. </p><pre><code>static AttributeCopy uipc::geometry::AttributeCopy::pair (\n    span&lt; const std::pair&lt; SizeT, SizeT &gt; &gt; pairs\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#function-pull","title":"function pull","text":"<p>Dst[i] = Src[Mapping[i]]. </p><pre><code>static AttributeCopy uipc::geometry::AttributeCopy::pull (\n    span&lt; const SizeT &gt; mapping\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#function-push","title":"function push","text":"<p>Dst[Mapping[i]] = Src[i]. </p><pre><code>static AttributeCopy uipc::geometry::AttributeCopy::push (\n    span&lt; const SizeT &gt; mapping\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#function-range","title":"function range","text":"<p>Dst[dst_offset + i] = Src[src_offset + i] $$ i \\in [0, count) $$. </p><pre><code>static AttributeCopy uipc::geometry::AttributeCopy::range (\n    SizeT dst_offset,\n    SizeT src_offset,\n    SizeT count\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_copy/#function-same_dim","title":"function same_dim","text":"<p>Dst[i] = Src[i]. </p><pre><code>static AttributeCopy uipc::geometry::AttributeCopy::same_dim () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_copy.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/","title":"Class uipc::geometry::AttributeFactory","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/#class-uipcgeometryattributefactory","title":"Class uipc::geometry::AttributeFactory","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeFactory</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/#public-functions","title":"Public Functions","text":"Type Name AttributeFactory ()  vector&lt; S&lt; IAttributeSlot &gt; &gt; from_json (const Json &amp; j)  Json to_json (span&lt; IAttribute * &gt; attributes)  ~AttributeFactory ()"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/#function-attributefactory","title":"function AttributeFactory","text":"<pre><code>uipc::geometry::AttributeFactory::AttributeFactory () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/#function-from_json","title":"function from_json","text":"<pre><code>vector&lt; S&lt; IAttributeSlot &gt; &gt; uipc::geometry::AttributeFactory::from_json (\n    const Json &amp; j\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::geometry::AttributeFactory::to_json (\n    span&lt; IAttribute * &gt; attributes\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_factory/#function-attributefactory_1","title":"function ~AttributeFactory","text":"<pre><code>uipc::geometry::AttributeFactory::~AttributeFactory () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_factory.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_friend/","title":"Class uipc::geometry::AttributeFriend","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_friend/#class-uipcgeometryattributefriend","title":"Class uipc::geometry::AttributeFriend","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; AttributeFriend</p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_friend.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o/","title":"Class uipc::geometry::AttributeIO","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o/#class-uipcgeometryattributeio","title":"Class uipc::geometry::AttributeIO","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeIO</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o/#public-functions","title":"Public Functions","text":"Type Name AttributeIO (std::string_view file)  void read (std::string_view name, IAttributeSlot &amp; slot)  ~AttributeIO () noexcept"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o/#function-attributeio","title":"function AttributeIO","text":"<pre><code>uipc::geometry::AttributeIO::AttributeIO (\n    std::string_view file\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o/#function-read","title":"function read","text":"<pre><code>void uipc::geometry::AttributeIO::read (\n    std::string_view name,\n    IAttributeSlot &amp; slot\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o/#function-attributeio_1","title":"function ~AttributeIO","text":"<pre><code>uipc::geometry::AttributeIO::~AttributeIO () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/io/attribute_io.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o_error/","title":"Class uipc::geometry::AttributeIOError","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o_error/#class-uipcgeometryattributeioerror","title":"Class uipc::geometry::AttributeIOError","text":"<p>ClassList &gt; uipc &gt; geometry &gt; AttributeIOError</p> <p>Inherits the following classes: uipc::Exception</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o_error/#public-functions","title":"Public Functions","text":"Type Name Exception (const string &amp; msg)"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o_error/#public-functions-inherited-from-uipcexception","title":"Public Functions inherited from uipc::Exception","text":"<p>See uipc::Exception</p> Type Name Exception (const string &amp; msg)  virtual const char * what () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_i_o_error/#function-exception","title":"function Exception","text":"<pre><code>uipc::geometry::AttributeIOError::Exception (\n    const string &amp; msg\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/io/attribute_io.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/","title":"Class uipc::geometry::AttributeSlot","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#class-uipcgeometryattributeslot","title":"Class uipc::geometry::AttributeSlot","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; AttributeSlot</p> <p>Template class to represent a geometries attribute slot of type T in a geometries attribute collection. More...</p> <ul> <li><code>#include &lt;attribute_slot.h&gt;</code></li> </ul> <p>Inherits the following classes: uipc::geometry::IAttributeSlot</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#public-types","title":"Public Types","text":"Type Name typedef T value_type"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#public-functions","title":"Public Functions","text":"Type Name AttributeSlot (std::string_view m_name, S&lt; Attribute&lt; T &gt; &gt; attribute, bool allow_destroy)  span&lt; const T &gt; view () noexcept constGet the const attribute values."},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#public-functions-inherited-from-uipcgeometryiattributeslot","title":"Public Functions inherited from uipc::geometry::IAttributeSlot","text":"<p>See uipc::geometry::IAttributeSlot</p> Type Name IAttributeSlot () = default IAttributeSlot (const IAttributeSlot &amp;) = delete IAttributeSlot (IAttributeSlot &amp;&amp;) noexcept bool allow_destroy () noexcept constCheck if the underlying attribute is allowed to be destroyed. bool is_evolving () noexcept const void is_evolving (bool v) noexcept bool is_shared () noexcept constCheck if the underlying attribute is shared. TimePoint last_modified () noexcept constGet the last modification time of the attribute slot. std::string_view name () noexcept constGet the name of the attribute slot. IAttributeSlot &amp; operator= (const IAttributeSlot &amp;) = delete IAttributeSlot &amp; operator= (IAttributeSlot &amp;&amp;) noexcept SizeT size () noexcept const Json to_json () const std::string_view type_name () noexcept constGet the type name of data stored in the attribute slot. virtual ~IAttributeSlot () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#protected-functions-inherited-from-uipcgeometryiattributeslot","title":"Protected Functions inherited from uipc::geometry::IAttributeSlot","text":"<p>See uipc::geometry::IAttributeSlot</p> Type Name virtual IAttribute &amp; attribute () noexcept virtual const IAttribute &amp; attribute () noexcept const S&lt; IAttributeSlot &gt; clone (std::string_view name, bool allow_destroy) const S&lt; IAttributeSlot &gt; clone_empty (std::string_view name, bool allow_destroy) const virtual S&lt; IAttributeSlot &gt; do_clone (std::string_view name, bool allow_destroy) const = 0 virtual S&lt; IAttributeSlot &gt; do_clone_empty (std::string_view name, bool allow_destroy) const = 0 virtual void do_make_owned () = 0 virtual void do_share_from (const IAttributeSlot &amp; other) noexcept = 0 virtual bool get_allow_destroy () noexcept const = 0 virtual IAttribute &amp; get_attribute () noexcept = 0 virtual const IAttribute &amp; get_attribute () noexcept const = 0 virtual bool get_is_evolving () noexcept const = 0 virtual TimePoint get_last_modified () noexcept const = 0 virtual std::string_view get_name () noexcept const = 0 virtual SizeT get_use_count () const = 0 void make_owned ()  virtual void set_is_evolving (bool v) noexcept = 0 void share_from (const IAttributeSlot &amp; other) noexcept SizeT use_count () const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> The type of the attribute values. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#typedef-value_type","title":"typedef value_type","text":"<pre><code>using uipc::geometry::AttributeSlot&lt; T &gt;::value_type =  T;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#function-attributeslot","title":"function AttributeSlot","text":"<pre><code>uipc::geometry::AttributeSlot::AttributeSlot (\n    std::string_view m_name,\n    S&lt; Attribute &lt; T &gt; &gt; attribute,\n    bool allow_destroy\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#function-view-22","title":"function view [2/2]","text":"<p>Get the const attribute values. </p><pre><code>span&lt; const T &gt; uipc::geometry::AttributeSlot::view () noexcept const\n</code></pre> <p>Returns:</p> <p><code>span&lt;const T&gt;</code> </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_attribute_slot/#friend-view-12","title":"friend view [1/2]","text":"<p>Get the non-const attribute values. </p><pre><code>template&lt;typename U&gt;\nspan&lt; U &gt; uipc::geometry::AttributeSlot::view (\n    AttributeSlot &lt; U &gt; &amp; slot\n) \n</code></pre> <p>Returns:</p> <p><code>span&lt;T&gt;</code> </p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_slot.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/","title":"Class uipc::geometry::BVH","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#class-uipcgeometrybvh","title":"Class uipc::geometry::BVH","text":"<p>ClassList &gt; uipc &gt; geometry &gt; BVH</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#public-types","title":"Public Types","text":"Type Name typedef Eigen::AlignedBox&lt; Float, 3 &gt; AABB"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#public-functions","title":"Public Functions","text":"Type Name BVH ()  void build (span&lt; const AABB &gt; aabbs) Build the BVH tree from a list of AABBs. void clear () Clear the BVH tree. void query (span&lt; const AABB &gt; aabbs, std::function&lt; void(IndexT, IndexT)&gt; &amp;&amp; QF) constQuery the BVH tree with a list of AABBs. ~BVH ()"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#typedef-aabb","title":"typedef AABB","text":"<pre><code>using uipc::geometry::BVH::AABB =  Eigen::AlignedBox&lt;Float, 3&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#function-bvh","title":"function BVH","text":"<pre><code>uipc::geometry::BVH::BVH () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#function-build","title":"function build","text":"<p>Build the BVH tree from a list of AABBs. </p><pre><code>void uipc::geometry::BVH::build (\n    span&lt; const AABB &gt; aabbs\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>aabbs</code> AABBs </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#function-clear","title":"function clear","text":"<p>Clear the BVH tree. </p><pre><code>void uipc::geometry::BVH::clear () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#function-query","title":"function query","text":"<p>Query the BVH tree with a list of AABBs. </p><pre><code>void uipc::geometry::BVH::query (\n    span&lt; const AABB &gt; aabbs,\n    std::function&lt; void(IndexT, IndexT)&gt; &amp;&amp; QF\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>aabbs</code> AABBs </li> <li><code>QF</code> f:void(IndexT, IndexT), where the two indices are the indices of the two AABBs that intersect, the first index is from the input list, and the second index is from the BVH tree's AABBs. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_b_v_h/#function-bvh_1","title":"function ~BVH","text":"<pre><code>uipc::geometry::BVH::~BVH () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/bvh.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_deserial_shared_attribute_context/","title":"Class uipc::geometry::DeserialSharedAttributeContext","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_deserial_shared_attribute_context/#class-uipcgeometrydeserialsharedattributecontext","title":"Class uipc::geometry::DeserialSharedAttributeContext","text":"<p>ClassList &gt; uipc &gt; geometry &gt; DeserialSharedAttributeContext</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_deserial_shared_attribute_context/#public-functions","title":"Public Functions","text":"Type Name DeserialSharedAttributeContext () = default S&lt; IAttributeSlot &gt; attribute_slot_of (IndexT index) const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_deserial_shared_attribute_context/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_deserial_shared_attribute_context/#function-deserialsharedattributecontext","title":"function DeserialSharedAttributeContext","text":"<pre><code>uipc::geometry::DeserialSharedAttributeContext::DeserialSharedAttributeContext () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_deserial_shared_attribute_context/#function-attribute_slot_of","title":"function attribute_slot_of","text":"<pre><code>S&lt; IAttributeSlot &gt; uipc::geometry::DeserialSharedAttributeContext::attribute_slot_of (\n    IndexT index\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/shared_attribute_context.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/","title":"Class uipc::geometry::Geometry","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#class-uipcgeometrygeometry","title":"Class uipc::geometry::Geometry","text":"<p>ClassList &gt; uipc &gt; geometry &gt; Geometry</p> <p>A base geometries class that contains the instance attributes and the meta attributes. </p> <ul> <li><code>#include &lt;geometry.h&gt;</code></li> </ul> <p>Inherits the following classes: uipc::geometry::IGeometry</p> <p>Inherited by the following classes: uipc::geometry::AbstractSimplicialComplex,  uipc::geometry::ImplicitGeometry,  uipc::geometry::SimplicialComplex</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#classes","title":"Classes","text":"Type Name class InstanceAttributesT &lt;IsConst&gt;A wrapper class for the instance attributes of a geometries. class MetaAttributesT &lt;IsConst&gt;A wrapper class for the meta attributes of a geometries."},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#public-types","title":"Public Types","text":"Type Name typedef InstanceAttributesT&lt; true &gt; CInstanceAttributes typedef MetaAttributesT&lt; true &gt; CMetaAttributes typedef InstanceAttributesT&lt; false &gt; InstanceAttributes typedef MetaAttributesT&lt; false &gt; MetaAttributes"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#public-functions","title":"Public Functions","text":"Type Name Geometry ()  Geometry (const Geometry &amp; o)  Geometry (Geometry &amp;&amp; o) = default T * as ()  const T * as () const InstanceAttributes instances () Get the instance attributes of the geometries. CInstanceAttributes instances () const MetaAttributes meta () Get the meta attributes of the geometries. CMetaAttributes meta () const Geometry &amp; operator= (const Geometry &amp; o) = delete Geometry &amp; operator= (Geometry &amp;&amp; o) = delete"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#public-functions-inherited-from-uipcgeometryigeometry","title":"Public Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name S&lt; IGeometry &gt; clone () const Json to_json () const std::string_view type () noexcept constGet the type of the geometries, check the type to downcast the geometries to a specific type. void update_from (const GeometryCommit &amp; commit)  virtual ~IGeometry () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#protected-functions","title":"Protected Functions","text":"Type Name S&lt; AttributeCollection &gt; create (std::string_view name)  virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) override virtual S&lt; IGeometry &gt; do_clone () override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) override virtual Json do_to_json () override const virtual void do_update_from (const GeometryCommit &amp; commit) override S&lt; const AttributeCollection &gt; find (std::string_view name) const S&lt; AttributeCollection &gt; find (std::string_view name)  virtual std::string_view get_type () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#protected-functions-inherited-from-uipcgeometryigeometry","title":"Protected Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) = 0 virtual S&lt; IGeometry &gt; do_clone () const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) = 0 virtual Json do_to_json () const = 0 virtual void do_update_from (const GeometryCommit &amp; commit) = 0 virtual std::string_view get_type () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#typedef-cinstanceattributes","title":"typedef CInstanceAttributes","text":"<pre><code>using uipc::geometry::Geometry::CInstanceAttributes =  InstanceAttributesT&lt;true&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#typedef-cmetaattributes","title":"typedef CMetaAttributes","text":"<pre><code>using uipc::geometry::Geometry::CMetaAttributes =  MetaAttributesT&lt;true&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#typedef-instanceattributes","title":"typedef InstanceAttributes","text":"<pre><code>using uipc::geometry::Geometry::InstanceAttributes =  InstanceAttributesT&lt;false&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#typedef-metaattributes","title":"typedef MetaAttributes","text":"<pre><code>using uipc::geometry::Geometry::MetaAttributes =  MetaAttributesT&lt;false&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-geometry-13","title":"function Geometry [1/3]","text":"<pre><code>uipc::geometry::Geometry::Geometry () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-geometry-23","title":"function Geometry [2/3]","text":"<pre><code>uipc::geometry::Geometry::Geometry (\n    const Geometry &amp; o\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-geometry-33","title":"function Geometry [3/3]","text":"<pre><code>uipc::geometry::Geometry::Geometry (\n    Geometry &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-as-12","title":"function as [1/2]","text":"<pre><code>template&lt;std::derived_from&lt; Geometry &gt; T&gt;\nT * uipc::geometry::Geometry::as () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-as-22","title":"function as [2/2]","text":"<pre><code>template&lt;std::derived_from&lt; Geometry &gt; T&gt;\nconst T * uipc::geometry::Geometry::as () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-instances-12","title":"function instances [1/2]","text":"<p>Get the instance attributes of the geometries. </p><pre><code>InstanceAttributes uipc::geometry::Geometry::instances () \n</code></pre> <p>Returns:</p> <p>The instance attributes of the geometries. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-instances-22","title":"function instances [2/2]","text":"<pre><code>CInstanceAttributes uipc::geometry::Geometry::instances () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-meta-12","title":"function meta [1/2]","text":"<p>Get the meta attributes of the geometries. </p><pre><code>MetaAttributes uipc::geometry::Geometry::meta () \n</code></pre> <p>Returns:</p> <p>The meta attributes of the geometries. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-meta-22","title":"function meta [2/2]","text":"<pre><code>CMetaAttributes uipc::geometry::Geometry::meta () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-operator","title":"function operator=","text":"<pre><code>Geometry &amp; uipc::geometry::Geometry::operator= (\n    const Geometry &amp; o\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-operator_1","title":"function operator=","text":"<pre><code>Geometry &amp; uipc::geometry::Geometry::operator= (\n    Geometry &amp;&amp; o\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-create","title":"function create","text":"<pre><code>S&lt; AttributeCollection &gt; uipc::geometry::Geometry::create (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-do_build_from_attribute_collections","title":"function do_build_from_attribute_collections","text":"<pre><code>virtual void uipc::geometry::Geometry::do_build_from_attribute_collections (\n    span&lt; const std::string &gt; names,\n    span&lt; const AttributeCollection * &gt; collections\n) override\n</code></pre> <p>Implements uipc::geometry::IGeometry::do_build_from_attribute_collections</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; IGeometry &gt; uipc::geometry::Geometry::do_clone () override const\n</code></pre> <p>Implements uipc::geometry::IGeometry::do_clone</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-do_collect_attribute_collections-12","title":"function do_collect_attribute_collections [1/2]","text":"<pre><code>virtual void uipc::geometry::Geometry::do_collect_attribute_collections (\n    vector&lt; std::string &gt; &amp; names,\n    vector&lt; const AttributeCollection * &gt; &amp; collections\n) override const\n</code></pre> <p>Implements uipc::geometry::IGeometry::do_collect_attribute_collections</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-do_collect_attribute_collections-22","title":"function do_collect_attribute_collections [2/2]","text":"<pre><code>virtual void uipc::geometry::Geometry::do_collect_attribute_collections (\n    vector&lt; std::string &gt; &amp; names,\n    vector&lt; AttributeCollection * &gt; &amp; collections\n) override\n</code></pre> <p>Implements uipc::geometry::IGeometry::do_collect_attribute_collections</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-do_to_json","title":"function do_to_json","text":"<pre><code>virtual Json uipc::geometry::Geometry::do_to_json () override const\n</code></pre> <p>Implements uipc::geometry::IGeometry::do_to_json</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-do_update_from","title":"function do_update_from","text":"<pre><code>virtual void uipc::geometry::Geometry::do_update_from (\n    const GeometryCommit &amp; commit\n) override\n</code></pre> <p>Implements uipc::geometry::IGeometry::do_update_from</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-find-12","title":"function find [1/2]","text":"<pre><code>S&lt; const AttributeCollection &gt; uipc::geometry::Geometry::find (\n    std::string_view name\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-find-22","title":"function find [2/2]","text":"<pre><code>S&lt; AttributeCollection &gt; uipc::geometry::Geometry::find (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry/#function-get_type","title":"function get_type","text":"<pre><code>virtual std::string_view uipc::geometry::Geometry::get_type () noexcept override const\n</code></pre> <p>Implements uipc::geometry::IGeometry::get_type</p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/","title":"Class uipc::geometry::Geometry::InstanceAttributesT","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#class-uipcgeometrygeometryinstanceattributest","title":"Class uipc::geometry::Geometry::InstanceAttributesT","text":"<p>template &lt;bool IsConst&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; Geometry &gt; InstanceAttributesT</p> <p>A wrapper class for the instance attributes of a geometries. </p> <ul> <li><code>#include &lt;geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#public-functions","title":"Public Functions","text":"Type Name InstanceAttributesT (AutoAttributeCollection &amp; attributes)  InstanceAttributesT (const InstanceAttributesT&lt; OtherIsConst &gt; &amp; o) noexcept InstanceAttributesT (const InstanceAttributesT &amp; o) = default InstanceAttributesT (InstanceAttributesT &amp;&amp; o) = default void clear ()  void copy_from (InstanceAttributesT&lt; true &gt; other, const AttributeCopy &amp; copy={}, span&lt; const string &gt; include_names={}, span&lt; const string &gt; exclude_names={})  decltype(auto) create (std::string_view name, const T &amp; init_value={}) Create an attribute with the given name. void destroy (std::string_view name)  auto find (std::string_view name) Find an attribute by type and name, if the attribute does not exist, return nullptr. InstanceAttributesT &amp; operator= (const InstanceAttributesT &amp; o) = default InstanceAttributesT &amp; operator= (InstanceAttributesT &amp;&amp; o) = default void reserve (size_t size)  void resize (size_t size)  decltype(auto) share (std::string_view name, const AttributeSlot&lt; T &gt; &amp; slot)  SizeT size ()  Json to_json () const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-instanceattributest-25","title":"function InstanceAttributesT [2/5]","text":"<pre><code>inline uipc::geometry::Geometry::InstanceAttributesT::InstanceAttributesT (\n    AutoAttributeCollection &amp; attributes\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-instanceattributest-35","title":"function InstanceAttributesT [3/5]","text":"<pre><code>template&lt;bool OtherIsConst&gt;\ninline uipc::geometry::Geometry::InstanceAttributesT::InstanceAttributesT (\n    const InstanceAttributesT &lt; OtherIsConst &gt; &amp; o\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-instanceattributest-45","title":"function InstanceAttributesT [4/5]","text":"<pre><code>uipc::geometry::Geometry::InstanceAttributesT::InstanceAttributesT (\n    const InstanceAttributesT &amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-instanceattributest-55","title":"function InstanceAttributesT [5/5]","text":"<pre><code>uipc::geometry::Geometry::InstanceAttributesT::InstanceAttributesT (\n    InstanceAttributesT &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-clear","title":"function clear","text":"<pre><code>void uipc::geometry::Geometry::InstanceAttributesT::clear () \n</code></pre> <p>See also: AttributeCollection::clear </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-copy_from","title":"function copy_from","text":"<pre><code>inline void uipc::geometry::Geometry::InstanceAttributesT::copy_from (\n    InstanceAttributesT &lt; true &gt; other,\n    const AttributeCopy &amp; copy={},\n    span&lt; const string &gt; include_names={},\n    span&lt; const string &gt; exclude_names={}\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-create","title":"function create","text":"<p>Create an attribute with the given name. </p><pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::Geometry::InstanceAttributesT::create (\n    std::string_view name,\n    const T &amp; init_value={}\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-destroy","title":"function destroy","text":"<pre><code>void uipc::geometry::Geometry::InstanceAttributesT::destroy (\n    std::string_view name\n) \n</code></pre> <p>See also: AttributeCollection::destroy </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-find","title":"function find","text":"<p>Find an attribute by type and name, if the attribute does not exist, return nullptr. </p><pre><code>template&lt;typename T&gt;\ninline auto uipc::geometry::Geometry::InstanceAttributesT::find (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-operator","title":"function operator=","text":"<pre><code>InstanceAttributesT &amp; uipc::geometry::Geometry::InstanceAttributesT::operator= (\n    const InstanceAttributesT &amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-operator_1","title":"function operator=","text":"<pre><code>InstanceAttributesT &amp; uipc::geometry::Geometry::InstanceAttributesT::operator= (\n    InstanceAttributesT &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-reserve","title":"function reserve","text":"<pre><code>void uipc::geometry::Geometry::InstanceAttributesT::reserve (\n    size_t size\n) \n</code></pre> <p>See also: AttributeCollection::reserve </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-resize","title":"function resize","text":"<pre><code>void uipc::geometry::Geometry::InstanceAttributesT::resize (\n    size_t size\n) \n</code></pre> <p>See also: AttributeCollection::resize </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-share","title":"function share","text":"<pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::Geometry::InstanceAttributesT::share (\n    std::string_view name,\n    const AttributeSlot &lt; T &gt; &amp; slot\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-size","title":"function size","text":"<pre><code>SizeT uipc::geometry::Geometry::InstanceAttributesT::size () \n</code></pre> <p>See also: AttributeCollection::size </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::geometry::Geometry::InstanceAttributesT::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_instance_attributes_t/#friend-formatter-instanceattributest-isconst","title":"friend formatter&lt; InstanceAttributesT&lt; IsConst &gt; &gt;","text":"<pre><code>struct uipc::geometry::Geometry::InstanceAttributesT::formatter&lt; InstanceAttributesT&lt; IsConst &gt; &gt; (\n    fmt::formatter&lt; InstanceAttributesT &lt; IsConst &gt; &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/","title":"Class uipc::geometry::Geometry::MetaAttributesT","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#class-uipcgeometrygeometrymetaattributest","title":"Class uipc::geometry::Geometry::MetaAttributesT","text":"<p>template &lt;bool IsConst&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; Geometry &gt; MetaAttributesT</p> <p>A wrapper class for the meta attributes of a geometries. </p> <ul> <li><code>#include &lt;geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#public-functions","title":"Public Functions","text":"Type Name MetaAttributesT (AutoAttributeCollection &amp; attributes)  MetaAttributesT (const MetaAttributesT&lt; OtherIsConst &gt; &amp; o) noexcept MetaAttributesT (const MetaAttributesT &amp; o) = default MetaAttributesT (MetaAttributesT &amp;&amp; o) = default void copy_from (MetaAttributesT&lt; true &gt; other, const AttributeCopy &amp; copy={}, span&lt; const string &gt; include_names={}, span&lt; const string &gt; exclude_names={})  decltype(auto) create (std::string_view name, const T &amp; init_value={}) Create an attribute with the given name. void destroy (std::string_view name)  auto find (std::string_view name) Find an attribute by type and name, if the attribute does not exist, return nullptr. MetaAttributesT &amp; operator= (const MetaAttributesT &amp; o) = default MetaAttributesT &amp; operator= (MetaAttributesT &amp;&amp; o) = default decltype(auto) share (std::string_view name, const AttributeSlot&lt; T &gt; &amp; slot)  Json to_json () const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-metaattributest-25","title":"function MetaAttributesT [2/5]","text":"<pre><code>inline uipc::geometry::Geometry::MetaAttributesT::MetaAttributesT (\n    AutoAttributeCollection &amp; attributes\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-metaattributest-35","title":"function MetaAttributesT [3/5]","text":"<pre><code>template&lt;bool OtherIsConst&gt;\ninline uipc::geometry::Geometry::MetaAttributesT::MetaAttributesT (\n    const MetaAttributesT &lt; OtherIsConst &gt; &amp; o\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-metaattributest-45","title":"function MetaAttributesT [4/5]","text":"<pre><code>uipc::geometry::Geometry::MetaAttributesT::MetaAttributesT (\n    const MetaAttributesT &amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-metaattributest-55","title":"function MetaAttributesT [5/5]","text":"<pre><code>uipc::geometry::Geometry::MetaAttributesT::MetaAttributesT (\n    MetaAttributesT &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-copy_from","title":"function copy_from","text":"<pre><code>inline void uipc::geometry::Geometry::MetaAttributesT::copy_from (\n    MetaAttributesT &lt; true &gt; other,\n    const AttributeCopy &amp; copy={},\n    span&lt; const string &gt; include_names={},\n    span&lt; const string &gt; exclude_names={}\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-create","title":"function create","text":"<p>Create an attribute with the given name. </p><pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::Geometry::MetaAttributesT::create (\n    std::string_view name,\n    const T &amp; init_value={}\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-destroy","title":"function destroy","text":"<pre><code>inline void uipc::geometry::Geometry::MetaAttributesT::destroy (\n    std::string_view name\n) \n</code></pre> <p>See also: AttributeCollection::destroy </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-find","title":"function find","text":"<p>Find an attribute by type and name, if the attribute does not exist, return nullptr. </p><pre><code>template&lt;typename T&gt;\ninline auto uipc::geometry::Geometry::MetaAttributesT::find (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-operator","title":"function operator=","text":"<pre><code>MetaAttributesT &amp; uipc::geometry::Geometry::MetaAttributesT::operator= (\n    const MetaAttributesT &amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-operator_1","title":"function operator=","text":"<pre><code>MetaAttributesT &amp; uipc::geometry::Geometry::MetaAttributesT::operator= (\n    MetaAttributesT &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-share","title":"function share","text":"<pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::Geometry::MetaAttributesT::share (\n    std::string_view name,\n    const AttributeSlot &lt; T &gt; &amp; slot\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::geometry::Geometry::MetaAttributesT::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_1_1_meta_attributes_t/#friend-formatter-metaattributest-isconst","title":"friend formatter&lt; MetaAttributesT&lt; IsConst &gt; &gt;","text":"<pre><code>struct uipc::geometry::Geometry::MetaAttributesT::formatter&lt; MetaAttributesT&lt; IsConst &gt; &gt; (\n    fmt::formatter&lt; MetaAttributesT &lt; IsConst &gt; &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/","title":"Class uipc::geometry::GeometryAtlas","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#class-uipcgeometrygeometryatlas","title":"Class uipc::geometry::GeometryAtlas","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometryAtlas</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#public-functions","title":"Public Functions","text":"Type Name GeometryAtlas ()  SizeT attribute_collection_count () noexcept const vector&lt; std::string &gt; attribute_collection_names () noexcept const IndexT create (const Geometry &amp; geo, bool evolving_only=false) Create a geometry in the atlas. void create (std::string_view name, const AttributeCollection &amp; ac, bool evolving_only=false) Create a named AttributeCollection in the atlas. S&lt; const GeometrySlot &gt; find (IndexT id) constFind the geometry slot by id. S&lt; const AttributeCollection &gt; find (std::string_view name) constFind the AttributeCollection by name. void from_json (const Json &amp; j) Create geometry atlas from json. SizeT geometry_count () noexcept const Json to_json () constCreate json representation of the geometry atlas. ~GeometryAtlas ()"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-geometryatlas","title":"function GeometryAtlas","text":"<pre><code>uipc::geometry::GeometryAtlas::GeometryAtlas () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-attribute_collection_count","title":"function attribute_collection_count","text":"<pre><code>SizeT uipc::geometry::GeometryAtlas::attribute_collection_count () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-attribute_collection_names","title":"function attribute_collection_names","text":"<pre><code>vector&lt; std::string &gt; uipc::geometry::GeometryAtlas::attribute_collection_names () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-create-12","title":"function create [1/2]","text":"<p>Create a geometry in the atlas. </p><pre><code>IndexT uipc::geometry::GeometryAtlas::create (\n    const Geometry &amp; geo,\n    bool evolving_only=false\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-create-22","title":"function create [2/2]","text":"<p>Create a named AttributeCollection in the atlas. </p><pre><code>void uipc::geometry::GeometryAtlas::create (\n    std::string_view name,\n    const AttributeCollection &amp; ac,\n    bool evolving_only=false\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-find-12","title":"function find [1/2]","text":"<p>Find the geometry slot by id. </p><pre><code>S&lt; const GeometrySlot &gt; uipc::geometry::GeometryAtlas::find (\n    IndexT id\n) const\n</code></pre> <p>Only return const version, not allow to modify the geometry. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-find-22","title":"function find [2/2]","text":"<p>Find the AttributeCollection by name. </p><pre><code>S&lt; const AttributeCollection &gt; uipc::geometry::GeometryAtlas::find (\n    std::string_view name\n) const\n</code></pre> <p>Only return const version, not allow to modify the geometry. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-from_json","title":"function from_json","text":"<p>Create geometry atlas from json. </p><pre><code>void uipc::geometry::GeometryAtlas::from_json (\n    const Json &amp; j\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>j</code> The json representation of the geometry atlas </li> <li><code>attributes</code> The attributes to be used in the geometry </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-geometry_count","title":"function geometry_count","text":"<pre><code>SizeT uipc::geometry::GeometryAtlas::geometry_count () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-to_json","title":"function to_json","text":"<p>Create json representation of the geometry atlas. </p><pre><code>Json uipc::geometry::GeometryAtlas::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas/#function-geometryatlas_1","title":"function ~GeometryAtlas","text":"<pre><code>uipc::geometry::GeometryAtlas::~GeometryAtlas () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_atlas.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/","title":"Class uipc::geometry::GeometryAtlasCommit","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#class-uipcgeometrygeometryatlascommit","title":"Class uipc::geometry::GeometryAtlasCommit","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometryAtlasCommit</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#public-attributes","title":"Public Attributes","text":"Type Name U&lt; Impl &gt; m_impl"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#public-functions","title":"Public Functions","text":"Type Name GeometryAtlasCommit ()  SizeT attribute_collection_count () noexcept const vector&lt; std::string &gt; attribute_collection_names () noexcept const IndexT create (const GeometryCommit &amp; geo_commit)  void create (std::string_view name, const AttributeCollectionCommit &amp; ac_commit)  S&lt; const GeometryCommit &gt; find (IndexT id) const S&lt; const AttributeCollectionCommit &gt; find (std::string_view name) const void from_json (const Json &amp; j)  SizeT geometry_count () noexcept const Json to_json () const ~GeometryAtlasCommit ()"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#variable-m_impl","title":"variable m_impl","text":"<pre><code>U&lt;Impl&gt; uipc::geometry::GeometryAtlasCommit::m_impl;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-geometryatlascommit","title":"function GeometryAtlasCommit","text":"<pre><code>uipc::geometry::GeometryAtlasCommit::GeometryAtlasCommit () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-attribute_collection_count","title":"function attribute_collection_count","text":"<pre><code>SizeT uipc::geometry::GeometryAtlasCommit::attribute_collection_count () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-attribute_collection_names","title":"function attribute_collection_names","text":"<pre><code>vector&lt; std::string &gt; uipc::geometry::GeometryAtlasCommit::attribute_collection_names () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-create-12","title":"function create [1/2]","text":"<pre><code>IndexT uipc::geometry::GeometryAtlasCommit::create (\n    const GeometryCommit &amp; geo_commit\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-create-22","title":"function create [2/2]","text":"<pre><code>void uipc::geometry::GeometryAtlasCommit::create (\n    std::string_view name,\n    const AttributeCollectionCommit &amp; ac_commit\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-find-12","title":"function find [1/2]","text":"<pre><code>S&lt; const GeometryCommit &gt; uipc::geometry::GeometryAtlasCommit::find (\n    IndexT id\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-find-22","title":"function find [2/2]","text":"<pre><code>S&lt; const AttributeCollectionCommit &gt; uipc::geometry::GeometryAtlasCommit::find (\n    std::string_view name\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-from_json","title":"function from_json","text":"<pre><code>void uipc::geometry::GeometryAtlasCommit::from_json (\n    const Json &amp; j\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-geometry_count","title":"function geometry_count","text":"<pre><code>SizeT uipc::geometry::GeometryAtlasCommit::geometry_count () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::geometry::GeometryAtlasCommit::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_atlas_commit/#function-geometryatlascommit_1","title":"function ~GeometryAtlasCommit","text":"<pre><code>uipc::geometry::GeometryAtlasCommit::~GeometryAtlasCommit () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_atlas.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/","title":"Class uipc::geometry::GeometryCollection","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#class-uipcgeometrygeometrycollection","title":"Class uipc::geometry::GeometryCollection","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometryCollection</p> <p>Inherits the following classes: uipc::geometry::IGeometryCollection</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#public-functions","title":"Public Functions","text":"Type Name GeometryCollection () = default GeometryCollection (const GeometryCollection &amp;)  GeometryCollection (GeometryCollection &amp;&amp;) noexcept void destroy (IndexT id) noexcept S&lt; geometry::GeometrySlotT&lt; GeometryT &gt; &gt; emplace (const GeometryT &amp; geometry)  S&lt; geometry::GeometrySlot &gt; emplace (const geometry::Geometry &amp; geometry)  S&lt; geometry::GeometrySlotT&lt; GeometryT &gt; &gt; find (IndexT id) noexcept S&lt; geometry::GeometrySlot &gt; find (IndexT id) noexcept S&lt; const geometry::GeometrySlotT&lt; GeometryT &gt; &gt; find (IndexT id) noexcept const S&lt; const geometry::GeometrySlot &gt; find (IndexT id) noexcept const span&lt; S&lt; geometry::GeometrySlot &gt; &gt; geometry_slots () noexcept const GeometryCollection &amp; operator= (const GeometryCollection &amp;) = delete GeometryCollection &amp; operator= (GeometryCollection &amp;&amp;) = default span&lt; S&lt; geometry::GeometrySlot &gt; &gt; pending_create_slots () noexcept const void pending_destroy (IndexT id) noexcept span&lt; IndexT &gt; pending_destroy_ids () noexcept const S&lt; geometry::GeometrySlotT&lt; GeometryT &gt; &gt; pending_emplace (const GeometryT &amp; geometry)  void solve_pending () noexcept"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#public-functions-inherited-from-uipcgeometryigeometrycollection","title":"Public Functions inherited from uipc::geometry::IGeometryCollection","text":"<p>See uipc::geometry::IGeometryCollection</p> Type Name void clear () noexcept IndexT next_id () noexcept const void reserve (SizeT size) noexcept SizeT size () noexcept const virtual ~IGeometryCollection () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#protected-functions","title":"Protected Functions","text":"Type Name virtual void do_clear () noexcept override virtual void do_reserve (SizeT size) noexcept override virtual IndexT get_next_id () noexcept override const virtual SizeT get_size () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#protected-functions-inherited-from-uipcgeometryigeometrycollection","title":"Protected Functions inherited from uipc::geometry::IGeometryCollection","text":"<p>See uipc::geometry::IGeometryCollection</p> Type Name virtual void do_clear () noexcept = 0 virtual void do_reserve (SizeT size) noexcept = 0 virtual IndexT get_next_id () noexcept const = 0 virtual SizeT get_size () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-geometrycollection-13","title":"function GeometryCollection [1/3]","text":"<pre><code>uipc::geometry::GeometryCollection::GeometryCollection () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-geometrycollection-23","title":"function GeometryCollection [2/3]","text":"<pre><code>uipc::geometry::GeometryCollection::GeometryCollection (\n    const GeometryCollection &amp;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-geometrycollection-33","title":"function GeometryCollection [3/3]","text":"<pre><code>uipc::geometry::GeometryCollection::GeometryCollection (\n    GeometryCollection &amp;&amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-destroy","title":"function destroy","text":"<pre><code>void uipc::geometry::GeometryCollection::destroy (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-emplace-12","title":"function emplace [1/2]","text":"<pre><code>template&lt;std::derived_from&lt; geometry::Geometry &gt; GeometryT&gt;\nS&lt; geometry::GeometrySlotT &lt; GeometryT &gt; &gt; uipc::geometry::GeometryCollection::emplace (\n    const GeometryT &amp; geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-emplace-22","title":"function emplace [2/2]","text":"<pre><code>S&lt; geometry::GeometrySlot &gt; uipc::geometry::GeometryCollection::emplace (\n    const geometry::Geometry &amp; geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-find-14","title":"function find [1/4]","text":"<pre><code>template&lt;std::derived_from&lt; geometry::Geometry &gt; GeometryT&gt;\nS&lt; geometry::GeometrySlotT &lt; GeometryT &gt; &gt; uipc::geometry::GeometryCollection::find (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-find-24","title":"function find [2/4]","text":"<pre><code>S&lt; geometry::GeometrySlot &gt; uipc::geometry::GeometryCollection::find (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-find-34","title":"function find [3/4]","text":"<pre><code>template&lt;std::derived_from&lt; geometry::Geometry &gt; GeometryT&gt;\nS&lt; const geometry::GeometrySlotT &lt; GeometryT &gt; &gt; uipc::geometry::GeometryCollection::find (\n    IndexT id\n) noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-find-44","title":"function find [4/4]","text":"<pre><code>S&lt; const geometry::GeometrySlot &gt; uipc::geometry::GeometryCollection::find (\n    IndexT id\n) noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-geometry_slots","title":"function geometry_slots","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::geometry::GeometryCollection::geometry_slots () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-operator","title":"function operator=","text":"<pre><code>GeometryCollection &amp; uipc::geometry::GeometryCollection::operator= (\n    const GeometryCollection &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-operator_1","title":"function operator=","text":"<pre><code>GeometryCollection &amp; uipc::geometry::GeometryCollection::operator= (\n    GeometryCollection &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-pending_create_slots","title":"function pending_create_slots","text":"<pre><code>span&lt; S&lt; geometry::GeometrySlot &gt; &gt; uipc::geometry::GeometryCollection::pending_create_slots () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-pending_destroy","title":"function pending_destroy","text":"<pre><code>void uipc::geometry::GeometryCollection::pending_destroy (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-pending_destroy_ids","title":"function pending_destroy_ids","text":"<pre><code>span&lt; IndexT &gt; uipc::geometry::GeometryCollection::pending_destroy_ids () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-pending_emplace","title":"function pending_emplace","text":"<pre><code>template&lt;std::derived_from&lt; geometry::Geometry &gt; GeometryT&gt;\nS&lt; geometry::GeometrySlotT &lt; GeometryT &gt; &gt; uipc::geometry::GeometryCollection::pending_emplace (\n    const GeometryT &amp; geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-solve_pending","title":"function solve_pending","text":"<pre><code>void uipc::geometry::GeometryCollection::solve_pending () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-do_clear","title":"function do_clear","text":"<pre><code>virtual void uipc::geometry::GeometryCollection::do_clear () noexcept override\n</code></pre> <p>Implements uipc::geometry::IGeometryCollection::do_clear</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-do_reserve","title":"function do_reserve","text":"<pre><code>virtual void uipc::geometry::GeometryCollection::do_reserve (\n    SizeT size\n) noexcept override\n</code></pre> <p>Implements uipc::geometry::IGeometryCollection::do_reserve</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-get_next_id","title":"function get_next_id","text":"<pre><code>virtual IndexT uipc::geometry::GeometryCollection::get_next_id () noexcept override const\n</code></pre> <p>Implements uipc::geometry::IGeometryCollection::get_next_id</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#function-get_size","title":"function get_size","text":"<pre><code>virtual SizeT uipc::geometry::GeometryCollection::get_size () noexcept override const\n</code></pre> <p>Implements uipc::geometry::IGeometryCollection::get_size</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#friend-scenefactory","title":"friend SceneFactory","text":"<pre><code>class uipc::geometry::GeometryCollection::SceneFactory (\n    core::SceneFactory\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection/#friend-scene","title":"friend Scene","text":"<pre><code>class uipc::geometry::GeometryCollection::Scene (\n    core::internal::Scene\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection_commit/","title":"Class uipc::geometry::GeometryCollectionCommit","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection_commit/#class-uipcgeometrygeometrycollectioncommit","title":"Class uipc::geometry::GeometryCollectionCommit","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometryCollectionCommit</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection_commit/#public-functions","title":"Public Functions","text":"Type Name GeometryCollectionCommit () = default GeometryCollectionCommit (const GeometryCollection &amp; dst, const GeometryCollection &amp; src)"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection_commit/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection_commit/#function-geometrycollectioncommit-12","title":"function GeometryCollectionCommit [1/2]","text":"<pre><code>uipc::geometry::GeometryCollectionCommit::GeometryCollectionCommit () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_collection_commit/#function-geometrycollectioncommit-22","title":"function GeometryCollectionCommit [2/2]","text":"<pre><code>uipc::geometry::GeometryCollectionCommit::GeometryCollectionCommit (\n    const GeometryCollection &amp; dst,\n    const GeometryCollection &amp; src\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_collection_commit.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/","title":"Class uipc::geometry::GeometryCommit","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#class-uipcgeometrygeometrycommit","title":"Class uipc::geometry::GeometryCommit","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometryCommit</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#public-functions","title":"Public Functions","text":"Type Name GeometryCommit () = default GeometryCommit (const GeometryCommit &amp;)  GeometryCommit (const Geometry &amp; dst)  const unordered_map&lt; std::string, AttributeCollectionCommit &gt; &amp; attribute_collections () noexcept const bool is_modification () noexcept const bool is_new () noexcept const bool is_valid () noexcept const S&lt; Geometry &gt; new_geometry () noexcept const GeometryCommit &amp; operator= (const GeometryCommit &amp;)  const std::string &amp; type () noexcept const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-geometrycommit-14","title":"function GeometryCommit [1/4]","text":"<pre><code>uipc::geometry::GeometryCommit::GeometryCommit () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-geometrycommit-24","title":"function GeometryCommit [2/4]","text":"<pre><code>uipc::geometry::GeometryCommit::GeometryCommit (\n    const GeometryCommit &amp;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-geometrycommit-34","title":"function GeometryCommit [3/4]","text":"<pre><code>explicit uipc::geometry::GeometryCommit::GeometryCommit (\n    const Geometry &amp; dst\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-attribute_collections","title":"function attribute_collections","text":"<pre><code>inline const unordered_map&lt; std::string, AttributeCollectionCommit &gt; &amp; uipc::geometry::GeometryCommit::attribute_collections () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-is_modification","title":"function is_modification","text":"<pre><code>inline bool uipc::geometry::GeometryCommit::is_modification () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-is_new","title":"function is_new","text":"<pre><code>inline bool uipc::geometry::GeometryCommit::is_new () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-is_valid","title":"function is_valid","text":"<pre><code>inline bool uipc::geometry::GeometryCommit::is_valid () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-new_geometry","title":"function new_geometry","text":"<pre><code>inline S&lt; Geometry &gt; uipc::geometry::GeometryCommit::new_geometry () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-operator","title":"function operator=","text":"<pre><code>GeometryCommit &amp; uipc::geometry::GeometryCommit::operator= (\n    const GeometryCommit &amp;\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_commit/#function-type","title":"function type","text":"<pre><code>inline const std::string &amp; uipc::geometry::GeometryCommit::type () noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_commit.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/","title":"Class uipc::geometry::GeometryFactory","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#class-uipcgeometrygeometryfactory","title":"Class uipc::geometry::GeometryFactory","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometryFactory</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#public-functions","title":"Public Functions","text":"Type Name GeometryFactory ()  S&lt; GeometryCommit &gt; commit_from_json (const Json &amp; j, DeserialSharedAttributeContext &amp; ctx)  Json commit_to_json (const GeometryCommit &amp; gc, SerialSharedAttributeContext &amp; ctx)  S&lt; GeometrySlot &gt; create_slot (IndexT id, const Geometry &amp; geometry)  vector&lt; S&lt; Geometry &gt; &gt; from_json (const Json &amp; j, DeserialSharedAttributeContext &amp; ctx)  Json to_json (span&lt; Geometry * &gt; geos, SerialSharedAttributeContext &amp; ctx)  Json to_json (Geometry &amp; geos, SerialSharedAttributeContext &amp; ctx)  ~GeometryFactory ()"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-geometryfactory","title":"function GeometryFactory","text":"<pre><code>uipc::geometry::GeometryFactory::GeometryFactory () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-commit_from_json","title":"function commit_from_json","text":"<pre><code>S&lt; GeometryCommit &gt; uipc::geometry::GeometryFactory::commit_from_json (\n    const Json &amp; j,\n    DeserialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-commit_to_json","title":"function commit_to_json","text":"<pre><code>Json uipc::geometry::GeometryFactory::commit_to_json (\n    const GeometryCommit &amp; gc,\n    SerialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-create_slot","title":"function create_slot","text":"<pre><code>S&lt; GeometrySlot &gt; uipc::geometry::GeometryFactory::create_slot (\n    IndexT id,\n    const Geometry &amp; geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-from_json","title":"function from_json","text":"<pre><code>vector&lt; S&lt; Geometry &gt; &gt; uipc::geometry::GeometryFactory::from_json (\n    const Json &amp; j,\n    DeserialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-to_json-12","title":"function to_json [1/2]","text":"<pre><code>Json uipc::geometry::GeometryFactory::to_json (\n    span&lt; Geometry * &gt; geos,\n    SerialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-to_json-22","title":"function to_json [2/2]","text":"<pre><code>Json uipc::geometry::GeometryFactory::to_json (\n    Geometry &amp; geos,\n    SerialSharedAttributeContext &amp; ctx\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_factory/#function-geometryfactory_1","title":"function ~GeometryFactory","text":"<pre><code>uipc::geometry::GeometryFactory::~GeometryFactory () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_factory.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_friend/","title":"Class uipc::geometry::GeometryFriend","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_friend/#class-uipcgeometrygeometryfriend","title":"Class uipc::geometry::GeometryFriend","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; GeometryFriend</p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_friend.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_i_o_error/","title":"Class uipc::geometry::GeometryIOError","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_i_o_error/#class-uipcgeometrygeometryioerror","title":"Class uipc::geometry::GeometryIOError","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometryIOError</p> <p>Inherits the following classes: uipc::Exception</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_i_o_error/#public-functions","title":"Public Functions","text":"Type Name Exception (const string &amp; msg)"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_i_o_error/#public-functions-inherited-from-uipcexception","title":"Public Functions inherited from uipc::Exception","text":"<p>See uipc::Exception</p> Type Name Exception (const string &amp; msg)  virtual const char * what () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_i_o_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_i_o_error/#function-exception","title":"function Exception","text":"<pre><code>uipc::geometry::GeometryIOError::Exception (\n    const string &amp; msg\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/io/simplicial_complex_io.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/","title":"Class uipc::geometry::GeometrySlot","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#class-uipcgeometrygeometryslot","title":"Class uipc::geometry::GeometrySlot","text":"<p>ClassList &gt; uipc &gt; geometry &gt; GeometrySlot</p> <p>Inherited by the following classes: uipc::geometry::GeometrySlotT&lt; Geometry &gt;,  uipc::geometry::GeometrySlotT&lt; ImplicitGeometry &gt;,  uipc::geometry::GeometrySlotT&lt; SimplicialComplex &gt;</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#public-functions","title":"Public Functions","text":"Type Name GeometrySlot (IndexT id) noexcept GeometrySlot (const GeometrySlot &amp;) = delete GeometrySlot (GeometrySlot &amp;&amp;) = delete S&lt; GeometrySlot &gt; clone () const Geometry &amp; geometry () noexcept const Geometry &amp; geometry () noexcept const IndexT id () noexcept const GeometrySlot &amp; operator= (const GeometrySlot &amp;) = delete GeometrySlot &amp; operator= (GeometrySlot &amp;&amp;) = delete GeometrySlotState state () noexcept const virtual ~GeometrySlot () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#protected-functions","title":"Protected Functions","text":"Type Name virtual S&lt; GeometrySlot &gt; do_clone () const = 0 virtual Geometry &amp; get_geometry () noexcept = 0 virtual const Geometry &amp; get_geometry () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-geometryslot-13","title":"function GeometrySlot [1/3]","text":"<pre><code>uipc::geometry::GeometrySlot::GeometrySlot (\n    IndexT id\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-geometryslot-23","title":"function GeometrySlot [2/3]","text":"<pre><code>uipc::geometry::GeometrySlot::GeometrySlot (\n    const GeometrySlot &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-geometryslot-33","title":"function GeometrySlot [3/3]","text":"<pre><code>uipc::geometry::GeometrySlot::GeometrySlot (\n    GeometrySlot &amp;&amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-clone","title":"function clone","text":"<pre><code>S&lt; GeometrySlot &gt; uipc::geometry::GeometrySlot::clone () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-geometry-12","title":"function geometry [1/2]","text":"<pre><code>Geometry &amp; uipc::geometry::GeometrySlot::geometry () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-geometry-22","title":"function geometry [2/2]","text":"<pre><code>const Geometry &amp; uipc::geometry::GeometrySlot::geometry () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-id-12","title":"function id [1/2]","text":"<pre><code>IndexT uipc::geometry::GeometrySlot::id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-operator","title":"function operator=","text":"<pre><code>GeometrySlot &amp; uipc::geometry::GeometrySlot::operator= (\n    const GeometrySlot &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-operator_1","title":"function operator=","text":"<pre><code>GeometrySlot &amp; uipc::geometry::GeometrySlot::operator= (\n    GeometrySlot &amp;&amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-state-12","title":"function state [1/2]","text":"<pre><code>GeometrySlotState uipc::geometry::GeometrySlot::state () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-geometryslot","title":"function ~GeometrySlot","text":"<pre><code>virtual uipc::geometry::GeometrySlot::~GeometrySlot () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; GeometrySlot &gt; uipc::geometry::GeometrySlot::do_clone () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-get_geometry-12","title":"function get_geometry [1/2]","text":"<pre><code>virtual Geometry &amp; uipc::geometry::GeometrySlot::get_geometry () noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#function-get_geometry-22","title":"function get_geometry [2/2]","text":"<pre><code>virtual const Geometry &amp; uipc::geometry::GeometrySlot::get_geometry () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot/#friend-scenefactory","title":"friend SceneFactory","text":"<pre><code>class uipc::geometry::GeometrySlot::SceneFactory (\n    core::SceneFactory\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_slot.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t/","title":"Class uipc::geometry::GeometrySlotT","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t/#class-uipcgeometrygeometryslott","title":"Class uipc::geometry::GeometrySlotT","text":"<p>template &lt;std::derived_from&lt; Geometry &gt; GeometryT&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; GeometrySlotT</p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_slot.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/","title":"Class uipc::geometry::GeometrySlotT&lt; Geometry &gt;","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#class-uipcgeometrygeometryslott-geometry","title":"Class uipc::geometry::GeometrySlotT&lt; Geometry &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; GeometrySlotT&lt; Geometry &gt;</p> <p>Inherits the following classes: uipc::geometry::GeometrySlot</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#public-functions","title":"Public Functions","text":"Type Name GeometrySlotT (IndexT id, const Geometry &amp; geometry)"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#public-functions-inherited-from-uipcgeometrygeometryslot","title":"Public Functions inherited from uipc::geometry::GeometrySlot","text":"<p>See uipc::geometry::GeometrySlot</p> Type Name GeometrySlot (IndexT id) noexcept GeometrySlot (const GeometrySlot &amp;) = delete GeometrySlot (GeometrySlot &amp;&amp;) = delete S&lt; GeometrySlot &gt; clone () const Geometry &amp; geometry () noexcept const Geometry &amp; geometry () noexcept const IndexT id () noexcept const GeometrySlot &amp; operator= (const GeometrySlot &amp;) = delete GeometrySlot &amp; operator= (GeometrySlot &amp;&amp;) = delete GeometrySlotState state () noexcept const virtual ~GeometrySlot () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#protected-functions","title":"Protected Functions","text":"Type Name virtual S&lt; GeometrySlot &gt; do_clone () override const virtual Geometry &amp; get_geometry () noexcept override virtual const Geometry &amp; get_geometry () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#protected-functions-inherited-from-uipcgeometrygeometryslot","title":"Protected Functions inherited from uipc::geometry::GeometrySlot","text":"<p>See uipc::geometry::GeometrySlot</p> Type Name virtual S&lt; GeometrySlot &gt; do_clone () const = 0 virtual Geometry &amp; get_geometry () noexcept = 0 virtual const Geometry &amp; get_geometry () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#function-geometryslott","title":"function GeometrySlotT","text":"<pre><code>uipc::geometry::GeometrySlotT&lt; Geometry &gt;::GeometrySlotT (\n    IndexT id,\n    const Geometry &amp; geometry\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; GeometrySlot &gt; uipc::geometry::GeometrySlotT&lt; Geometry &gt;::do_clone () override const\n</code></pre> <p>Implements uipc::geometry::GeometrySlot::do_clone</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#function-get_geometry-12","title":"function get_geometry [1/2]","text":"<pre><code>virtual Geometry &amp; uipc::geometry::GeometrySlotT&lt; Geometry &gt;::get_geometry () noexcept override\n</code></pre> <p>Implements uipc::geometry::GeometrySlot::get_geometry</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_geometry_slot_t_3_01_geometry_01_4/#function-get_geometry-22","title":"function get_geometry [2/2]","text":"<pre><code>virtual const Geometry &amp; uipc::geometry::GeometrySlotT&lt; Geometry &gt;::get_geometry () noexcept override const\n</code></pre> <p>Implements uipc::geometry::GeometrySlot::get_geometry</p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_slot.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/","title":"Class uipc::geometry::IAttribute","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#class-uipcgeometryiattribute","title":"Class uipc::geometry::IAttribute","text":"<p>ClassList &gt; uipc &gt; geometry &gt; IAttribute</p> <p>An abstract class to represent a geometries attribute. </p> <ul> <li><code>#include &lt;attribute.h&gt;</code></li> </ul> <p>Inherited by the following classes: uipc::geometry::Attribute</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#public-functions","title":"Public Functions","text":"Type Name IAttribute () = default void from_json (const Json &amp; j) noexcept SizeT size () noexcept constGet the size of the attribute. Json to_json (SizeT i) noexcept const Json to_json () noexcept const std::string_view type_name () noexcept constGet the type name of data stored in the attribute slot. virtual ~IAttribute () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#protected-functions","title":"Protected Functions","text":"Type Name virtual void do_clear () = 0 virtual S&lt; IAttribute &gt; do_clone () const = 0 virtual S&lt; IAttribute &gt; do_clone_empty () const = 0 virtual void do_copy_from (const IAttribute &amp; other, const AttributeCopy &amp; copy) noexcept = 0 virtual void do_from_json (const Json &amp; j) noexcept = 0 virtual void do_reorder (span&lt; const SizeT &gt; O) noexcept = 0 virtual void do_reserve (SizeT N) = 0 virtual void do_resize (SizeT N) = 0 virtual Json do_to_json (SizeT i) noexcept const = 0 virtual Json do_to_json () noexcept const = 0 virtual SizeT get_size () const = 0 virtual std::string_view get_type_name () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-iattribute","title":"function IAttribute","text":"<pre><code>uipc::geometry::IAttribute::IAttribute () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-from_json","title":"function from_json","text":"<pre><code>void uipc::geometry::IAttribute::from_json (\n    const Json &amp; j\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-size","title":"function size","text":"<p>Get the size of the attribute. </p><pre><code>SizeT uipc::geometry::IAttribute::size () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-to_json-12","title":"function to_json [1/2]","text":"<pre><code>Json uipc::geometry::IAttribute::to_json (\n    SizeT i\n) noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-to_json-22","title":"function to_json [2/2]","text":"<pre><code>Json uipc::geometry::IAttribute::to_json () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-type_name","title":"function type_name","text":"<p>Get the type name of data stored in the attribute slot. </p><pre><code>std::string_view uipc::geometry::IAttribute::type_name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-iattribute_1","title":"function ~IAttribute","text":"<pre><code>virtual uipc::geometry::IAttribute::~IAttribute () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_clear","title":"function do_clear","text":"<pre><code>virtual void uipc::geometry::IAttribute::do_clear () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; IAttribute &gt; uipc::geometry::IAttribute::do_clone () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_clone_empty","title":"function do_clone_empty","text":"<pre><code>virtual S&lt; IAttribute &gt; uipc::geometry::IAttribute::do_clone_empty () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_copy_from","title":"function do_copy_from","text":"<pre><code>virtual void uipc::geometry::IAttribute::do_copy_from (\n    const IAttribute &amp; other,\n    const AttributeCopy &amp; copy\n) noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_from_json","title":"function do_from_json","text":"<pre><code>virtual void uipc::geometry::IAttribute::do_from_json (\n    const Json &amp; j\n) noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_reorder","title":"function do_reorder","text":"<pre><code>virtual void uipc::geometry::IAttribute::do_reorder (\n    span&lt; const SizeT &gt; O\n) noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_reserve","title":"function do_reserve","text":"<pre><code>virtual void uipc::geometry::IAttribute::do_reserve (\n    SizeT N\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_resize","title":"function do_resize","text":"<pre><code>virtual void uipc::geometry::IAttribute::do_resize (\n    SizeT N\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_to_json-12","title":"function do_to_json [1/2]","text":"<pre><code>virtual Json uipc::geometry::IAttribute::do_to_json (\n    SizeT i\n) noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-do_to_json-22","title":"function do_to_json [2/2]","text":"<pre><code>virtual Json uipc::geometry::IAttribute::do_to_json () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-get_size","title":"function get_size","text":"<pre><code>virtual SizeT uipc::geometry::IAttribute::get_size () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute/#function-get_type_name","title":"function get_type_name","text":"<pre><code>virtual std::string_view uipc::geometry::IAttribute::get_type_name () noexcept const = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/","title":"Class uipc::geometry::IAttributeSlot","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#class-uipcgeometryiattributeslot","title":"Class uipc::geometry::IAttributeSlot","text":"<p>ClassList &gt; uipc &gt; geometry &gt; IAttributeSlot</p> <p>An abstract class to represent a geometries attribute slot in a geometries attribute collection. </p> <ul> <li><code>#include &lt;attribute_slot.h&gt;</code></li> </ul> <p>Inherited by the following classes: uipc::geometry::AttributeSlot</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#public-functions","title":"Public Functions","text":"Type Name IAttributeSlot () = default IAttributeSlot (const IAttributeSlot &amp;) = delete IAttributeSlot (IAttributeSlot &amp;&amp;) noexcept bool allow_destroy () noexcept constCheck if the underlying attribute is allowed to be destroyed. bool is_evolving () noexcept const void is_evolving (bool v) noexcept bool is_shared () noexcept constCheck if the underlying attribute is shared. TimePoint last_modified () noexcept constGet the last modification time of the attribute slot. std::string_view name () noexcept constGet the name of the attribute slot. IAttributeSlot &amp; operator= (const IAttributeSlot &amp;) = delete IAttributeSlot &amp; operator= (IAttributeSlot &amp;&amp;) noexcept SizeT size () noexcept const Json to_json () const std::string_view type_name () noexcept constGet the type name of data stored in the attribute slot. virtual ~IAttributeSlot () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#protected-functions","title":"Protected Functions","text":"Type Name virtual IAttribute &amp; attribute () noexcept virtual const IAttribute &amp; attribute () noexcept const S&lt; IAttributeSlot &gt; clone (std::string_view name, bool allow_destroy) const S&lt; IAttributeSlot &gt; clone_empty (std::string_view name, bool allow_destroy) const virtual S&lt; IAttributeSlot &gt; do_clone (std::string_view name, bool allow_destroy) const = 0 virtual S&lt; IAttributeSlot &gt; do_clone_empty (std::string_view name, bool allow_destroy) const = 0 virtual void do_make_owned () = 0 virtual void do_share_from (const IAttributeSlot &amp; other) noexcept = 0 virtual bool get_allow_destroy () noexcept const = 0 virtual IAttribute &amp; get_attribute () noexcept = 0 virtual const IAttribute &amp; get_attribute () noexcept const = 0 virtual bool get_is_evolving () noexcept const = 0 virtual TimePoint get_last_modified () noexcept const = 0 virtual std::string_view get_name () noexcept const = 0 virtual SizeT get_use_count () const = 0 void make_owned ()  virtual void set_is_evolving (bool v) noexcept = 0 void share_from (const IAttributeSlot &amp; other) noexcept SizeT use_count () const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-iattributeslot-13","title":"function IAttributeSlot [1/3]","text":"<pre><code>uipc::geometry::IAttributeSlot::IAttributeSlot () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-iattributeslot-23","title":"function IAttributeSlot [2/3]","text":"<pre><code>uipc::geometry::IAttributeSlot::IAttributeSlot (\n    const IAttributeSlot &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-iattributeslot-33","title":"function IAttributeSlot [3/3]","text":"<pre><code>uipc::geometry::IAttributeSlot::IAttributeSlot (\n    IAttributeSlot &amp;&amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-allow_destroy","title":"function allow_destroy","text":"<p>Check if the underlying attribute is allowed to be destroyed. </p><pre><code>bool uipc::geometry::IAttributeSlot::allow_destroy () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-is_evolving-12","title":"function is_evolving [1/2]","text":"<pre><code>bool uipc::geometry::IAttributeSlot::is_evolving () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-is_evolving-22","title":"function is_evolving [2/2]","text":"<pre><code>void uipc::geometry::IAttributeSlot::is_evolving (\n    bool v\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-is_shared","title":"function is_shared","text":"<p>Check if the underlying attribute is shared. </p><pre><code>bool uipc::geometry::IAttributeSlot::is_shared () noexcept const\n</code></pre> <p>Returns:</p> <p>true, if the underlying attribute is shared, more than one geometries reference to the underlying attribute. </p> <p>Returns:</p> <p>false, if the underlying attribute is owned, only this geometries reference to the underlying attribute. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-last_modified","title":"function last_modified","text":"<p>Get the last modification time of the attribute slot. </p><pre><code>TimePoint uipc::geometry::IAttributeSlot::last_modified () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-name","title":"function name","text":"<p>Get the name of the attribute slot. </p><pre><code>std::string_view uipc::geometry::IAttributeSlot::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-operator","title":"function operator=","text":"<pre><code>IAttributeSlot &amp; uipc::geometry::IAttributeSlot::operator= (\n    const IAttributeSlot &amp;\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-operator_1","title":"function operator=","text":"<pre><code>IAttributeSlot &amp; uipc::geometry::IAttributeSlot::operator= (\n    IAttributeSlot &amp;&amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-size","title":"function size","text":"<pre><code>SizeT uipc::geometry::IAttributeSlot::size () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::geometry::IAttributeSlot::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-type_name","title":"function type_name","text":"<p>Get the type name of data stored in the attribute slot. </p><pre><code>std::string_view uipc::geometry::IAttributeSlot::type_name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-iattributeslot","title":"function ~IAttributeSlot","text":"<pre><code>virtual uipc::geometry::IAttributeSlot::~IAttributeSlot () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-attribute-12","title":"function attribute [1/2]","text":"<pre><code>virtual IAttribute &amp; uipc::geometry::IAttributeSlot::attribute () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-attribute-22","title":"function attribute [2/2]","text":"<pre><code>virtual const IAttribute &amp; uipc::geometry::IAttributeSlot::attribute () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-clone","title":"function clone","text":"<pre><code>S&lt; IAttributeSlot &gt; uipc::geometry::IAttributeSlot::clone (\n    std::string_view name,\n    bool allow_destroy\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-clone_empty","title":"function clone_empty","text":"<pre><code>S&lt; IAttributeSlot &gt; uipc::geometry::IAttributeSlot::clone_empty (\n    std::string_view name,\n    bool allow_destroy\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; IAttributeSlot &gt; uipc::geometry::IAttributeSlot::do_clone (\n    std::string_view name,\n    bool allow_destroy\n) const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-do_clone_empty","title":"function do_clone_empty","text":"<pre><code>virtual S&lt; IAttributeSlot &gt; uipc::geometry::IAttributeSlot::do_clone_empty (\n    std::string_view name,\n    bool allow_destroy\n) const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-do_make_owned","title":"function do_make_owned","text":"<pre><code>virtual void uipc::geometry::IAttributeSlot::do_make_owned () = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-do_share_from","title":"function do_share_from","text":"<pre><code>virtual void uipc::geometry::IAttributeSlot::do_share_from (\n    const IAttributeSlot &amp; other\n) noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-get_allow_destroy","title":"function get_allow_destroy","text":"<pre><code>virtual bool uipc::geometry::IAttributeSlot::get_allow_destroy () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-get_attribute-12","title":"function get_attribute [1/2]","text":"<pre><code>virtual IAttribute &amp; uipc::geometry::IAttributeSlot::get_attribute () noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-get_attribute-22","title":"function get_attribute [2/2]","text":"<pre><code>virtual const IAttribute &amp; uipc::geometry::IAttributeSlot::get_attribute () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-get_is_evolving","title":"function get_is_evolving","text":"<pre><code>virtual bool uipc::geometry::IAttributeSlot::get_is_evolving () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-get_last_modified","title":"function get_last_modified","text":"<pre><code>virtual TimePoint uipc::geometry::IAttributeSlot::get_last_modified () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-get_name","title":"function get_name","text":"<pre><code>virtual std::string_view uipc::geometry::IAttributeSlot::get_name () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-get_use_count","title":"function get_use_count","text":"<pre><code>virtual SizeT uipc::geometry::IAttributeSlot::get_use_count () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-make_owned","title":"function make_owned","text":"<pre><code>void uipc::geometry::IAttributeSlot::make_owned () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-set_is_evolving","title":"function set_is_evolving","text":"<pre><code>virtual void uipc::geometry::IAttributeSlot::set_is_evolving (\n    bool v\n) noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-share_from","title":"function share_from","text":"<pre><code>void uipc::geometry::IAttributeSlot::share_from (\n    const IAttributeSlot &amp; other\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#function-use_count","title":"function use_count","text":"<pre><code>SizeT uipc::geometry::IAttributeSlot::use_count () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_attribute_slot/#friend-attributefriend","title":"friend AttributeFriend","text":"<pre><code>template&lt;typename T&gt;\nclass uipc::geometry::IAttributeSlot::AttributeFriend (\n    AttributeFriend\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_slot.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/","title":"Class uipc::geometry::IGeometry","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#class-uipcgeometryigeometry","title":"Class uipc::geometry::IGeometry","text":"<p>ClassList &gt; uipc &gt; geometry &gt; IGeometry</p> <p>An abstract class for geometries. </p> <ul> <li><code>#include &lt;geometry.h&gt;</code></li> </ul> <p>Inherited by the following classes: uipc::geometry::Geometry</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#public-functions","title":"Public Functions","text":"Type Name S&lt; IGeometry &gt; clone () const Json to_json () const std::string_view type () noexcept constGet the type of the geometries, check the type to downcast the geometries to a specific type. void update_from (const GeometryCommit &amp; commit)  virtual ~IGeometry () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#protected-functions","title":"Protected Functions","text":"Type Name virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) = 0 virtual S&lt; IGeometry &gt; do_clone () const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) = 0 virtual Json do_to_json () const = 0 virtual void do_update_from (const GeometryCommit &amp; commit) = 0 virtual std::string_view get_type () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-clone","title":"function clone","text":"<pre><code>S&lt; IGeometry &gt; uipc::geometry::IGeometry::clone () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-to_json","title":"function to_json","text":"<pre><code>Json uipc::geometry::IGeometry::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-type","title":"function type","text":"<p>Get the type of the geometries, check the type to downcast the geometries to a specific type. </p><pre><code>std::string_view uipc::geometry::IGeometry::type () noexcept const\n</code></pre> <p>Returns:</p> <p>a string_view of the type of the geometries </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-update_from","title":"function update_from","text":"<pre><code>void uipc::geometry::IGeometry::update_from (\n    const GeometryCommit &amp; commit\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-igeometry","title":"function ~IGeometry","text":"<pre><code>virtual uipc::geometry::IGeometry::~IGeometry () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-do_build_from_attribute_collections","title":"function do_build_from_attribute_collections","text":"<pre><code>virtual void uipc::geometry::IGeometry::do_build_from_attribute_collections (\n    span&lt; const std::string &gt; names,\n    span&lt; const AttributeCollection * &gt; collections\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; IGeometry &gt; uipc::geometry::IGeometry::do_clone () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-do_collect_attribute_collections-12","title":"function do_collect_attribute_collections [1/2]","text":"<pre><code>virtual void uipc::geometry::IGeometry::do_collect_attribute_collections (\n    vector&lt; std::string &gt; &amp; names,\n    vector&lt; const AttributeCollection * &gt; &amp; collections\n) const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-do_collect_attribute_collections-22","title":"function do_collect_attribute_collections [2/2]","text":"<pre><code>virtual void uipc::geometry::IGeometry::do_collect_attribute_collections (\n    vector&lt; std::string &gt; &amp; names,\n    vector&lt; AttributeCollection * &gt; &amp; collections\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-do_to_json","title":"function do_to_json","text":"<pre><code>virtual Json uipc::geometry::IGeometry::do_to_json () const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-do_update_from","title":"function do_update_from","text":"<pre><code>virtual void uipc::geometry::IGeometry::do_update_from (\n    const GeometryCommit &amp; commit\n) = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#function-get_type","title":"function get_type","text":"<pre><code>virtual std::string_view uipc::geometry::IGeometry::get_type () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry/#friend-geometryvisitor","title":"friend GeometryVisitor","text":"<pre><code>class uipc::geometry::IGeometry::GeometryVisitor (\n    backend::GeometryVisitor\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/","title":"Class uipc::geometry::IGeometryCollection","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#class-uipcgeometryigeometrycollection","title":"Class uipc::geometry::IGeometryCollection","text":"<p>ClassList &gt; uipc &gt; geometry &gt; IGeometryCollection</p> <p>Inherited by the following classes: uipc::geometry::GeometryCollection</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#public-functions","title":"Public Functions","text":"Type Name void clear () noexcept IndexT next_id () noexcept const void reserve (SizeT size) noexcept SizeT size () noexcept const virtual ~IGeometryCollection () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#protected-functions","title":"Protected Functions","text":"Type Name virtual void do_clear () noexcept = 0 virtual void do_reserve (SizeT size) noexcept = 0 virtual IndexT get_next_id () noexcept const = 0 virtual SizeT get_size () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-clear","title":"function clear","text":"<pre><code>void uipc::geometry::IGeometryCollection::clear () noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-next_id","title":"function next_id","text":"<pre><code>IndexT uipc::geometry::IGeometryCollection::next_id () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-reserve","title":"function reserve","text":"<pre><code>void uipc::geometry::IGeometryCollection::reserve (\n    SizeT size\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-size","title":"function size","text":"<pre><code>SizeT uipc::geometry::IGeometryCollection::size () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-igeometrycollection","title":"function ~IGeometryCollection","text":"<pre><code>virtual uipc::geometry::IGeometryCollection::~IGeometryCollection () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-do_clear","title":"function do_clear","text":"<pre><code>virtual void uipc::geometry::IGeometryCollection::do_clear () noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-do_reserve","title":"function do_reserve","text":"<pre><code>virtual void uipc::geometry::IGeometryCollection::do_reserve (\n    SizeT size\n) noexcept = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-get_next_id","title":"function get_next_id","text":"<pre><code>virtual IndexT uipc::geometry::IGeometryCollection::get_next_id () noexcept const = 0\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_i_geometry_collection/#function-get_size","title":"function get_size","text":"<pre><code>virtual SizeT uipc::geometry::IGeometryCollection::get_size () noexcept const = 0\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_collection.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/","title":"Class uipc::geometry::ImplicitGeometry","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#class-uipcgeometryimplicitgeometry","title":"Class uipc::geometry::ImplicitGeometry","text":"<p>ClassList &gt; uipc &gt; geometry &gt; ImplicitGeometry</p> <p>Inherits the following classes: uipc::geometry::Geometry</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#public-types-inherited-from-uipcgeometrygeometry","title":"Public Types inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name typedef InstanceAttributesT&lt; true &gt; CInstanceAttributes typedef MetaAttributesT&lt; true &gt; CMetaAttributes typedef InstanceAttributesT&lt; false &gt; InstanceAttributes typedef MetaAttributesT&lt; false &gt; MetaAttributes"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#public-functions","title":"Public Functions","text":"Type Name ImplicitGeometry ()  std::string_view name () noexcept const const builtin::UIDInfo &amp; uid_info () noexcept const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#public-functions-inherited-from-uipcgeometrygeometry","title":"Public Functions inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name Geometry ()  Geometry (const Geometry &amp; o)  Geometry (Geometry &amp;&amp; o) = default T * as ()  const T * as () const InstanceAttributes instances () Get the instance attributes of the geometries. CInstanceAttributes instances () const MetaAttributes meta () Get the meta attributes of the geometries. CMetaAttributes meta () const Geometry &amp; operator= (const Geometry &amp; o) = delete Geometry &amp; operator= (Geometry &amp;&amp; o) = delete"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#public-functions-inherited-from-uipcgeometryigeometry","title":"Public Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name S&lt; IGeometry &gt; clone () const Json to_json () const std::string_view type () noexcept constGet the type of the geometries, check the type to downcast the geometries to a specific type. void update_from (const GeometryCommit &amp; commit)  virtual ~IGeometry () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#protected-functions","title":"Protected Functions","text":"Type Name virtual S&lt; IGeometry &gt; do_clone () override const virtual std::string_view get_type () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#protected-functions-inherited-from-uipcgeometrygeometry","title":"Protected Functions inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name S&lt; AttributeCollection &gt; create (std::string_view name)  virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) override virtual S&lt; IGeometry &gt; do_clone () override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) override virtual Json do_to_json () override const virtual void do_update_from (const GeometryCommit &amp; commit) override S&lt; const AttributeCollection &gt; find (std::string_view name) const S&lt; AttributeCollection &gt; find (std::string_view name)  virtual std::string_view get_type () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#protected-functions-inherited-from-uipcgeometryigeometry","title":"Protected Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) = 0 virtual S&lt; IGeometry &gt; do_clone () const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) = 0 virtual Json do_to_json () const = 0 virtual void do_update_from (const GeometryCommit &amp; commit) = 0 virtual std::string_view get_type () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#function-implicitgeometry","title":"function ImplicitGeometry","text":"<pre><code>uipc::geometry::ImplicitGeometry::ImplicitGeometry () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#function-name","title":"function name","text":"<pre><code>std::string_view uipc::geometry::ImplicitGeometry::name () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#function-uid_info","title":"function uid_info","text":"<pre><code>const builtin::UIDInfo &amp; uipc::geometry::ImplicitGeometry::uid_info () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; IGeometry &gt; uipc::geometry::ImplicitGeometry::do_clone () override const\n</code></pre> <p>Implements uipc::geometry::Geometry::do_clone</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_implicit_geometry/#function-get_type","title":"function get_type","text":"<pre><code>virtual std::string_view uipc::geometry::ImplicitGeometry::get_type () noexcept override const\n</code></pre> <p>Implements uipc::geometry::Geometry::get_type</p> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/implicit_geometry.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/","title":"Class uipc::geometry::Octree","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#class-uipcgeometryoctree","title":"Class uipc::geometry::Octree","text":"<p>ClassList &gt; uipc &gt; geometry &gt; Octree</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#public-types","title":"Public Types","text":"Type Name typedef Eigen::AlignedBox&lt; Float, 3 &gt; AABB"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#public-functions","title":"Public Functions","text":"Type Name Octree ()  void build (span&lt; const AABB &gt; aabbs) Build the octree from a list of AABBs. void clear () Clear the octree. void detect (std::function&lt; void(IndexT, IndexT)&gt; &amp;&amp; QF) constDetect the self-intersections of the octree. void query (span&lt; const AABB &gt; aabbs, std::function&lt; void(IndexT, IndexT)&gt; &amp;&amp; QF) constQuery the octree with a list of AABBs. ~Octree ()"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#typedef-aabb","title":"typedef AABB","text":"<pre><code>using uipc::geometry::Octree::AABB =  Eigen::AlignedBox&lt;Float, 3&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#function-octree","title":"function Octree","text":"<pre><code>uipc::geometry::Octree::Octree () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#function-build","title":"function build","text":"<p>Build the octree from a list of AABBs. </p><pre><code>void uipc::geometry::Octree::build (\n    span&lt; const AABB &gt; aabbs\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>aabbs</code> AABBs </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#function-clear","title":"function clear","text":"<p>Clear the octree. </p><pre><code>void uipc::geometry::Octree::clear () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#function-detect","title":"function detect","text":"<p>Detect the self-intersections of the octree. </p><pre><code>void uipc::geometry::Octree::detect (\n    std::function&lt; void(IndexT, IndexT)&gt; &amp;&amp; QF\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>QF</code> f:void(IndexT, IndexT), where the two indices are the indices of the two AABBs that intersect, the two indices are from the octree's AABBs. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#function-query","title":"function query","text":"<p>Query the octree with a list of AABBs. </p><pre><code>void uipc::geometry::Octree::query (\n    span&lt; const AABB &gt; aabbs,\n    std::function&lt; void(IndexT, IndexT)&gt; &amp;&amp; QF\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>aabbs</code> AABBs </li> <li><code>QF</code> f:void(IndexT, IndexT), where the two indices are the indices of the two AABBs that intersect, the first index is from the input list, and the second index is from the octree's AABBs. </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_octree/#function-octree_1","title":"function ~Octree","text":"<pre><code>uipc::geometry::Octree::~Octree () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/octree.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_serial_shared_attribute_context/","title":"Class uipc::geometry::SerialSharedAttributeContext","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_serial_shared_attribute_context/#class-uipcgeometryserialsharedattributecontext","title":"Class uipc::geometry::SerialSharedAttributeContext","text":"<p>ClassList &gt; uipc &gt; geometry &gt; SerialSharedAttributeContext</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_serial_shared_attribute_context/#public-functions","title":"Public Functions","text":"Type Name SerialSharedAttributeContext () = default IAttribute * attribute_of (IndexT index) const IndexT index_of (IAttribute * attr) const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_serial_shared_attribute_context/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_serial_shared_attribute_context/#function-serialsharedattributecontext","title":"function SerialSharedAttributeContext","text":"<pre><code>uipc::geometry::SerialSharedAttributeContext::SerialSharedAttributeContext () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_serial_shared_attribute_context/#function-attribute_of","title":"function attribute_of","text":"<pre><code>IAttribute * uipc::geometry::SerialSharedAttributeContext::attribute_of (\n    IndexT index\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_serial_shared_attribute_context/#function-index_of","title":"function index_of","text":"<pre><code>IndexT uipc::geometry::SerialSharedAttributeContext::index_of (\n    IAttribute * attr\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/shared_attribute_context.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/","title":"Class uipc::geometry::SimplexUtils","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#class-uipcgeometrysimplexutils","title":"Class uipc::geometry::SimplexUtils","text":"<p>ClassList &gt; uipc &gt; geometry &gt; SimplexUtils</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#public-static-functions","title":"Public Static Functions","text":"Type Name bool compare_edge (const Vector2i &amp;, const Vector2i &amp;) noexcept bool compare_tet (const Vector4i &amp;, const Vector4i &amp;) noexcept bool compare_tri (const Vector3i &amp;, const Vector3i &amp;) noexcept bool is_same_edge (const Vector2i &amp;, const Vector2i &amp;) noexcept bool is_same_oriented_edge (const Vector2i &amp;, const Vector2i &amp;) noexcept bool is_same_oriented_tet (const Vector4i &amp;, const Vector4i &amp;) noexcept bool is_same_oriented_tri (const Vector3i &amp;, const Vector3i &amp;) noexcept bool is_same_tet (const Vector4i &amp;, const Vector4i &amp;) noexcept bool is_same_tri (const Vector3i &amp;, const Vector3i &amp;) noexcept void outward_tri_from_tet (span&lt; const Vector3, 4 &gt; Vs, span&lt; Vector3i, 4 &gt; Fs) noexcept"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-compare_edge","title":"function compare_edge","text":"<pre><code>static bool uipc::geometry::SimplexUtils::compare_edge (\n    const Vector2i &amp;,\n    const Vector2i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-compare_tet","title":"function compare_tet","text":"<pre><code>static bool uipc::geometry::SimplexUtils::compare_tet (\n    const Vector4i &amp;,\n    const Vector4i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-compare_tri","title":"function compare_tri","text":"<pre><code>static bool uipc::geometry::SimplexUtils::compare_tri (\n    const Vector3i &amp;,\n    const Vector3i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-is_same_edge","title":"function is_same_edge","text":"<pre><code>static bool uipc::geometry::SimplexUtils::is_same_edge (\n    const Vector2i &amp;,\n    const Vector2i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-is_same_oriented_edge","title":"function is_same_oriented_edge","text":"<pre><code>static bool uipc::geometry::SimplexUtils::is_same_oriented_edge (\n    const Vector2i &amp;,\n    const Vector2i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-is_same_oriented_tet","title":"function is_same_oriented_tet","text":"<pre><code>static bool uipc::geometry::SimplexUtils::is_same_oriented_tet (\n    const Vector4i &amp;,\n    const Vector4i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-is_same_oriented_tri","title":"function is_same_oriented_tri","text":"<pre><code>static bool uipc::geometry::SimplexUtils::is_same_oriented_tri (\n    const Vector3i &amp;,\n    const Vector3i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-is_same_tet","title":"function is_same_tet","text":"<pre><code>static bool uipc::geometry::SimplexUtils::is_same_tet (\n    const Vector4i &amp;,\n    const Vector4i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-is_same_tri","title":"function is_same_tri","text":"<pre><code>static bool uipc::geometry::SimplexUtils::is_same_tri (\n    const Vector3i &amp;,\n    const Vector3i &amp;\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplex_utils/#function-outward_tri_from_tet","title":"function outward_tri_from_tet","text":"<pre><code>static void uipc::geometry::SimplexUtils::outward_tri_from_tet (\n    span&lt; const Vector3, 4 &gt; Vs,\n    span&lt; Vector3i, 4 &gt; Fs\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/simplex_utils.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/","title":"Class uipc::geometry::SimplicialComplex","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#class-uipcgeometrysimplicialcomplex","title":"Class uipc::geometry::SimplicialComplex","text":"<p>ClassList &gt; uipc &gt; geometry &gt; SimplicialComplex</p> <p>A simplicial complex is a collection of simplices. More...</p> <ul> <li><code>#include &lt;simplicial_complex.h&gt;</code></li> </ul> <p>Inherits the following classes: uipc::geometry::Geometry</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#public-types","title":"Public Types","text":"Type Name typedef SimplicialComplexAttributes&lt; true, 1 &gt; CEdgeAttributes typedef SimplicialComplexAttributes&lt; true, 3 &gt; CTetrahedronAttributes typedef SimplicialComplexAttributes&lt; true, 2 &gt; CTriangleAttributes typedef SimplicialComplexAttributes&lt; true, 0 &gt; CVertexAttributes typedef SimplicialComplexAttributes&lt; false, 1 &gt; EdgeAttributes Alias for the edge attributes. typedef SimplicialComplexAttributes&lt; false, 3 &gt; TetrahedronAttributes Alias for the tetrahedron attributes. typedef SimplicialComplexAttributes&lt; false, 2 &gt; TriangleAttributes Alias for the triangle attributes. typedef SimplicialComplexAttributes&lt; false, 0 &gt; VertexAttributes Alias for the vertex attributes."},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#public-types-inherited-from-uipcgeometrygeometry","title":"Public Types inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name typedef InstanceAttributesT&lt; true &gt; CInstanceAttributes typedef MetaAttributesT&lt; true &gt; CMetaAttributes typedef InstanceAttributesT&lt; false &gt; InstanceAttributes typedef MetaAttributesT&lt; false &gt; MetaAttributes"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#public-functions","title":"Public Functions","text":"Type Name SimplicialComplex ()  SimplicialComplex (const SimplicialComplex &amp; o)  SimplicialComplex (SimplicialComplex &amp;&amp; o) = default IndexT dim () noexcept constGet the dimension of the simplicial complex. EdgeAttributes edges () noexceptA wrapper of the edges and its attributes of the simplicial complex. CEdgeAttributes edges () noexcept const SimplicialComplex &amp; operator= (const SimplicialComplex &amp; o) = delete SimplicialComplex &amp; operator= (SimplicialComplex &amp;&amp; o) = delete AttributeSlot&lt; Vector3 &gt; &amp; positions () noexceptGet the positions of the vertices. const AttributeSlot&lt; Vector3 &gt; &amp; positions () noexcept constA short cut to get the positions of the vertices. TetrahedronAttributes tetrahedra () noexceptA wrapper of the tetrahedra and its attributes of the simplicial complex. CTetrahedronAttributes tetrahedra () noexcept const AttributeSlot&lt; Matrix4x4 &gt; &amp; transforms () A short-cut to get the non-const transforms attribute slot. const AttributeSlot&lt; Matrix4x4 &gt; &amp; transforms () constA short-cut to get the const transforms attribute slot. TriangleAttributes triangles () noexceptA wrapper of the triangles and its attributes of the simplicial complex. CTriangleAttributes triangles () noexcept const VertexAttributes vertices () noexceptA wrapper of the vertices and its attributes of the simplicial complex. CVertexAttributes vertices () noexcept const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#public-functions-inherited-from-uipcgeometrygeometry","title":"Public Functions inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name Geometry ()  Geometry (const Geometry &amp; o)  Geometry (Geometry &amp;&amp; o) = default T * as ()  const T * as () const InstanceAttributes instances () Get the instance attributes of the geometries. CInstanceAttributes instances () const MetaAttributes meta () Get the meta attributes of the geometries. CMetaAttributes meta () const Geometry &amp; operator= (const Geometry &amp; o) = delete Geometry &amp; operator= (Geometry &amp;&amp; o) = delete"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#public-functions-inherited-from-uipcgeometryigeometry","title":"Public Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name S&lt; IGeometry &gt; clone () const Json to_json () const std::string_view type () noexcept constGet the type of the geometries, check the type to downcast the geometries to a specific type. void update_from (const GeometryCommit &amp; commit)  virtual ~IGeometry () = default"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#protected-functions","title":"Protected Functions","text":"Type Name virtual S&lt; IGeometry &gt; do_clone () override const virtual std::string_view get_type () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#protected-functions-inherited-from-uipcgeometrygeometry","title":"Protected Functions inherited from uipc::geometry::Geometry","text":"<p>See uipc::geometry::Geometry</p> Type Name S&lt; AttributeCollection &gt; create (std::string_view name)  virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) override virtual S&lt; IGeometry &gt; do_clone () override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) override const virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) override virtual Json do_to_json () override const virtual void do_update_from (const GeometryCommit &amp; commit) override S&lt; const AttributeCollection &gt; find (std::string_view name) const S&lt; AttributeCollection &gt; find (std::string_view name)  virtual std::string_view get_type () noexcept override const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#protected-functions-inherited-from-uipcgeometryigeometry","title":"Protected Functions inherited from uipc::geometry::IGeometry","text":"<p>See uipc::geometry::IGeometry</p> Type Name virtual void do_build_from_attribute_collections (span&lt; const std::string &gt; names, span&lt; const AttributeCollection * &gt; collections) = 0 virtual S&lt; IGeometry &gt; do_clone () const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; const AttributeCollection * &gt; &amp; collections) const = 0 virtual void do_collect_attribute_collections (vector&lt; std::string &gt; &amp; names, vector&lt; AttributeCollection * &gt; &amp; collections) = 0 virtual Json do_to_json () const = 0 virtual void do_update_from (const GeometryCommit &amp; commit) = 0 virtual std::string_view get_type () noexcept const = 0"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#detailed-description","title":"Detailed Description","text":"<p>In \\(\\mathbb{R}^3\\), a simplicial complex is defined as follows: $$ K = (V, E, F, T), $$ where \\(V\\) is the set of vertices, \\(E\\) is the set of edges, \\(F\\) is the set of triangles, and \\(T\\) is the set of tetrahedra.</p> <p>See also: Tutorial/Geometry </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-cedgeattributes","title":"typedef CEdgeAttributes","text":"<pre><code>using uipc::geometry::SimplicialComplex::CEdgeAttributes =  SimplicialComplexAttributes&lt;true, 1&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-ctetrahedronattributes","title":"typedef CTetrahedronAttributes","text":"<pre><code>using uipc::geometry::SimplicialComplex::CTetrahedronAttributes =  SimplicialComplexAttributes&lt;true, 3&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-ctriangleattributes","title":"typedef CTriangleAttributes","text":"<pre><code>using uipc::geometry::SimplicialComplex::CTriangleAttributes =  SimplicialComplexAttributes&lt;true, 2&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-cvertexattributes","title":"typedef CVertexAttributes","text":"<pre><code>using uipc::geometry::SimplicialComplex::CVertexAttributes =  SimplicialComplexAttributes&lt;true, 0&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-edgeattributes","title":"typedef EdgeAttributes","text":"<p>Alias for the edge attributes. </p><pre><code>using uipc::geometry::SimplicialComplex::EdgeAttributes =  SimplicialComplexAttributes&lt;false, 1&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-tetrahedronattributes","title":"typedef TetrahedronAttributes","text":"<p>Alias for the tetrahedron attributes. </p><pre><code>using uipc::geometry::SimplicialComplex::TetrahedronAttributes =  SimplicialComplexAttributes&lt;false, 3&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-triangleattributes","title":"typedef TriangleAttributes","text":"<p>Alias for the triangle attributes. </p><pre><code>using uipc::geometry::SimplicialComplex::TriangleAttributes =  SimplicialComplexAttributes&lt;false, 2&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#typedef-vertexattributes","title":"typedef VertexAttributes","text":"<p>Alias for the vertex attributes. </p><pre><code>using uipc::geometry::SimplicialComplex::VertexAttributes =  SimplicialComplexAttributes&lt;false, 0&gt;;\n</code></pre> <p>See also: SimplicialComplexAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-simplicialcomplex-13","title":"function SimplicialComplex [1/3]","text":"<pre><code>uipc::geometry::SimplicialComplex::SimplicialComplex () \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-simplicialcomplex-23","title":"function SimplicialComplex [2/3]","text":"<pre><code>uipc::geometry::SimplicialComplex::SimplicialComplex (\n    const SimplicialComplex &amp; o\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-simplicialcomplex-33","title":"function SimplicialComplex [3/3]","text":"<pre><code>uipc::geometry::SimplicialComplex::SimplicialComplex (\n    SimplicialComplex &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-dim","title":"function dim","text":"<p>Get the dimension of the simplicial complex. </p><pre><code>IndexT uipc::geometry::SimplicialComplex::dim () noexcept const\n</code></pre> <p>Return the maximum dimension of the simplices in the simplicial complex.</p> <p>Returns:</p> <p>IndexT </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-edges-12","title":"function edges [1/2]","text":"<p>A wrapper of the edges and its attributes of the simplicial complex. </p><pre><code>EdgeAttributes uipc::geometry::SimplicialComplex::edges () noexcept\n</code></pre> <p>Returns:</p> <p>EdgeAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-edges-22","title":"function edges [2/2]","text":"<pre><code>CEdgeAttributes uipc::geometry::SimplicialComplex::edges () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-operator","title":"function operator=","text":"<pre><code>SimplicialComplex &amp; uipc::geometry::SimplicialComplex::operator= (\n    const SimplicialComplex &amp; o\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-operator_1","title":"function operator=","text":"<pre><code>SimplicialComplex &amp; uipc::geometry::SimplicialComplex::operator= (\n    SimplicialComplex &amp;&amp; o\n) = delete\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-positions-12","title":"function positions [1/2]","text":"<p>Get the positions of the vertices. </p><pre><code>AttributeSlot &lt; Vector3 &gt; &amp; uipc::geometry::SimplicialComplex::positions () noexcept\n</code></pre> <p>Returns:</p> <p>AttributeSlot&lt;Vector3&gt;&amp; </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-positions-22","title":"function positions [2/2]","text":"<p>A short cut to get the positions of the vertices. </p><pre><code>const AttributeSlot &lt; Vector3 &gt; &amp; uipc::geometry::SimplicialComplex::positions () noexcept const\n</code></pre> <p>Returns:</p> <p>const AttributeSlot&lt;Vector3&gt;&amp; </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-tetrahedra-12","title":"function tetrahedra [1/2]","text":"<p>A wrapper of the tetrahedra and its attributes of the simplicial complex. </p><pre><code>TetrahedronAttributes uipc::geometry::SimplicialComplex::tetrahedra () noexcept\n</code></pre> <p>Returns:</p> <p>TetrahedronAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-tetrahedra-22","title":"function tetrahedra [2/2]","text":"<pre><code>CTetrahedronAttributes uipc::geometry::SimplicialComplex::tetrahedra () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-transforms-12","title":"function transforms [1/2]","text":"<p>A short-cut to get the non-const transforms attribute slot. </p><pre><code>AttributeSlot &lt; Matrix4x4 &gt; &amp; uipc::geometry::SimplicialComplex::transforms () \n</code></pre> <p>Returns:</p> <p>The attribute slot of the non-const transforms. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-transforms-22","title":"function transforms [2/2]","text":"<p>A short-cut to get the const transforms attribute slot. </p><pre><code>const AttributeSlot &lt; Matrix4x4 &gt; &amp; uipc::geometry::SimplicialComplex::transforms () const\n</code></pre> <p>Returns:</p> <p>The attribute slot of the const transforms. </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-triangles-12","title":"function triangles [1/2]","text":"<p>A wrapper of the triangles and its attributes of the simplicial complex. </p><pre><code>TriangleAttributes uipc::geometry::SimplicialComplex::triangles () noexcept\n</code></pre> <p>Returns:</p> <p>TriangleAttributes </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-triangles-22","title":"function triangles [2/2]","text":"<pre><code>CTriangleAttributes uipc::geometry::SimplicialComplex::triangles () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-vertices-12","title":"function vertices [1/2]","text":"<p>A wrapper of the vertices and its attributes of the simplicial complex. </p><pre><code>VertexAttributes uipc::geometry::SimplicialComplex::vertices () noexcept\n</code></pre> <p>Returns:</p> <p>VertexAttributeInfo </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-vertices-22","title":"function vertices [2/2]","text":"<pre><code>CVertexAttributes uipc::geometry::SimplicialComplex::vertices () noexcept const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-do_clone","title":"function do_clone","text":"<pre><code>virtual S&lt; IGeometry &gt; uipc::geometry::SimplicialComplex::do_clone () override const\n</code></pre> <p>Implements uipc::geometry::Geometry::do_clone</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#function-get_type","title":"function get_type","text":"<pre><code>virtual std::string_view uipc::geometry::SimplicialComplex::get_type () noexcept override const\n</code></pre> <p>Implements uipc::geometry::Geometry::get_type</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex/#friend-formatter-simplicialcomplex","title":"friend formatter&lt; SimplicialComplex &gt;","text":"<pre><code>struct uipc::geometry::SimplicialComplex::formatter&lt; SimplicialComplex &gt; (\n    fmt::formatter&lt; SimplicialComplex &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/simplicial_complex.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/","title":"Class uipc::geometry::SimplicialComplexAttributes","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#class-uipcgeometrysimplicialcomplexattributes","title":"Class uipc::geometry::SimplicialComplexAttributes","text":"<p>template &lt;bool IsConst, IndexT N&gt;</p> <p>ClassList &gt; uipc &gt; geometry &gt; SimplicialComplexAttributes</p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#public-types","title":"Public Types","text":"Type Name typedef std::conditional_t&lt; IsConst, const AttributeCollection, AttributeCollection &gt; AutoAttributeCollection typedef std::conditional_t&lt; IsScalar, IndexT, Vector&lt; IndexT, N+1 &gt; &gt; TopoValueT"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#public-static-attributes","title":"Public Static Attributes","text":"Type Name bool IsScalar   = <code>(N == 0)</code>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#public-functions","title":"Public Functions","text":"Type Name SimplicialComplexAttributes (const SimplicialComplexAttributes &amp; o) = default SimplicialComplexAttributes (SimplicialComplexAttributes &amp;&amp; o) = default SimplicialComplexAttributes (const SimplicialComplexAttributes&lt; OtherIsConst, N &gt; &amp; o) noexcept void clear ()  void copy_from (SimplicialComplexAttributes&lt; true, N &gt; other, const AttributeCopy &amp; copy={}, span&lt; const string &gt; include_names={}, span&lt; const string &gt; exclude_names={})  decltype(auto) create (std::string_view name, const T &amp; default_value={}, bool allow_destroy=true)  void destroy (std::string_view name)  decltype(auto) find (std::string_view name) Find an attribute by type and name, if the attribute does not exist, return nullptr. decltype(auto) find (std::string_view name) constFind an attribute by type and name, if the attribute does not exist, return nullptr. SimplicialComplexAttributes &amp; operator= (const SimplicialComplexAttributes &amp; o) = default SimplicialComplexAttributes &amp; operator= (SimplicialComplexAttributes &amp;&amp; o) = default void reserve (SizeT size)  void resize (SizeT size)  decltype(auto) share (std::string_view name, const AttributeSlot&lt; T &gt; &amp; slot, bool allow_destroy=true)  SizeT size () noexcept const Json to_json () const AttributeSlot&lt; TopoValueT &gt; &amp; topo () Get the topology of the simplicial complex. const AttributeSlot&lt; TopoValueT &gt; &amp; topo () const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#typedef-autoattributecollection","title":"typedef AutoAttributeCollection","text":"<pre><code>using uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt;::AutoAttributeCollection = \n        std::conditional_t&lt;IsConst, const AttributeCollection, AttributeCollection&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#typedef-topovaluet","title":"typedef TopoValueT","text":"<pre><code>using uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt;::TopoValueT =  std::conditional_t&lt;IsScalar, IndexT, Vector&lt;IndexT, N + 1&gt;&gt;;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#variable-isscalar","title":"variable IsScalar","text":"<pre><code>bool uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt;::IsScalar;\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-simplicialcomplexattributes-25","title":"function SimplicialComplexAttributes [2/5]","text":"<pre><code>uipc::geometry::SimplicialComplexAttributes::SimplicialComplexAttributes (\n    const SimplicialComplexAttributes &amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-simplicialcomplexattributes-35","title":"function SimplicialComplexAttributes [3/5]","text":"<pre><code>uipc::geometry::SimplicialComplexAttributes::SimplicialComplexAttributes (\n    SimplicialComplexAttributes &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-simplicialcomplexattributes-45","title":"function SimplicialComplexAttributes [4/5]","text":"<pre><code>template&lt;bool OtherIsConst&gt;\ninline uipc::geometry::SimplicialComplexAttributes::SimplicialComplexAttributes (\n    const SimplicialComplexAttributes &lt; OtherIsConst, N &gt; &amp; o\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-clear","title":"function clear","text":"<pre><code>inline void uipc::geometry::SimplicialComplexAttributes::clear () \n</code></pre> <p>See also: AttributeCollection::clear </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-copy_from","title":"function copy_from","text":"<pre><code>inline void uipc::geometry::SimplicialComplexAttributes::copy_from (\n    SimplicialComplexAttributes &lt; true, N &gt; other,\n    const AttributeCopy &amp; copy={},\n    span&lt; const string &gt; include_names={},\n    span&lt; const string &gt; exclude_names={}\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-create","title":"function create","text":"<pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::SimplicialComplexAttributes::create (\n    std::string_view name,\n    const T &amp; default_value={},\n    bool allow_destroy=true\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-destroy","title":"function destroy","text":"<pre><code>inline void uipc::geometry::SimplicialComplexAttributes::destroy (\n    std::string_view name\n) \n</code></pre> <p>See also: AttributeCollection::destroy </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-find-12","title":"function find [1/2]","text":"<p>Find an attribute by type and name, if the attribute does not exist, return nullptr. </p><pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::SimplicialComplexAttributes::find (\n    std::string_view name\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-find-22","title":"function find [2/2]","text":"<p>Find an attribute by type and name, if the attribute does not exist, return nullptr. </p><pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::SimplicialComplexAttributes::find (\n    std::string_view name\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-operator","title":"function operator=","text":"<pre><code>SimplicialComplexAttributes &amp; uipc::geometry::SimplicialComplexAttributes::operator= (\n    const SimplicialComplexAttributes &amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-operator_1","title":"function operator=","text":"<pre><code>SimplicialComplexAttributes &amp; uipc::geometry::SimplicialComplexAttributes::operator= (\n    SimplicialComplexAttributes &amp;&amp; o\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-reserve","title":"function reserve","text":"<pre><code>inline void uipc::geometry::SimplicialComplexAttributes::reserve (\n    SizeT size\n) \n</code></pre> <p>See also: AttributeCollection::reserve </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-resize","title":"function resize","text":"<pre><code>inline void uipc::geometry::SimplicialComplexAttributes::resize (\n    SizeT size\n) \n</code></pre> <p>See also: AttributeCollection::resize </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-share","title":"function share","text":"<pre><code>template&lt;typename T&gt;\ninline decltype(auto) uipc::geometry::SimplicialComplexAttributes::share (\n    std::string_view name,\n    const AttributeSlot &lt; T &gt; &amp; slot,\n    bool allow_destroy=true\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-size","title":"function size","text":"<pre><code>inline SizeT uipc::geometry::SimplicialComplexAttributes::size () noexcept const\n</code></pre> <p>See also: AttributeCollection::size </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-to_json","title":"function to_json","text":"<pre><code>inline Json uipc::geometry::SimplicialComplexAttributes::to_json () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-topo-12","title":"function topo [1/2]","text":"<p>Get the topology of the simplicial complex. </p><pre><code>inline AttributeSlot &lt; TopoValueT &gt; &amp; uipc::geometry::SimplicialComplexAttributes::topo () \n</code></pre> <p>Returns:</p> <p>Topo </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#function-topo-22","title":"function topo [2/2]","text":"<pre><code>inline const AttributeSlot &lt; TopoValueT &gt; &amp; uipc::geometry::SimplicialComplexAttributes::topo () const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#friends-documentation","title":"Friends Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#friend-attributefriend","title":"friend AttributeFriend","text":"<pre><code>template&lt;typename T&gt;\nclass uipc::geometry::SimplicialComplexAttributes::AttributeFriend (\n    AttributeFriend\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#friend-simplicialcomplexattributes-15","title":"friend SimplicialComplexAttributes [1/5]","text":"<pre><code>template&lt;bool OtherIsConst, IndexT OtherN&gt;\nclass uipc::geometry::SimplicialComplexAttributes::SimplicialComplexAttributes (\n    SimplicialComplexAttributes\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_attributes/#friend-formatter-simplicialcomplexattributes-isconst-n","title":"friend formatter&lt; SimplicialComplexAttributes&lt; IsConst, N &gt; &gt;","text":"<pre><code>class uipc::geometry::SimplicialComplexAttributes::formatter&lt; SimplicialComplexAttributes&lt; IsConst, N &gt; &gt; (\n    fmt::formatter&lt; SimplicialComplexAttributes &lt; IsConst, N &gt; &gt;\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/simplicial_complex_attributes.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/","title":"Class uipc::geometry::SimplicialComplexIO","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#class-uipcgeometrysimplicialcomplexio","title":"Class uipc::geometry::SimplicialComplexIO","text":"<p>ClassList &gt; uipc &gt; geometry &gt; SimplicialComplexIO</p> <p>A class for reading and writing simplicial complex. </p> <ul> <li><code>#include &lt;simplicial_complex_io.h&gt;</code></li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#public-functions","title":"Public Functions","text":"Type Name SimplicialComplexIO () = default SimplicialComplexIO (const Matrix4x4 &amp; pre_transform) noexcept SimplicialComplexIO (const Transform &amp; pre_transform) noexcept SimplicialComplexIO (const SimplicialComplexIO &amp;) = default SimplicialComplexIO (SimplicialComplexIO &amp;&amp;) = default SimplicialComplexIO &amp; operator= (const SimplicialComplexIO &amp;) = default SimplicialComplexIO &amp; operator= (SimplicialComplexIO &amp;&amp;) = default SimplicialComplex read (std::string_view file_name) A unified interface for reading a simplicial complex from a file, the file type is determined by the file extension. SimplicialComplex read_msh (std::string_view file_name) Read a tetmesh from a .msh file. SimplicialComplex read_obj (std::string_view file_name) Read a trimesh, linemesh or particles from a .obj file. SimplicialComplex read_ply (std::string_view file_name) Read a trimesh, linemesh or particles from a .ply file. void write (std::string_view file_name, const SimplicialComplex &amp; sc) Write a simplicial complex to a file, the file type is determined by the file extension. void write_msh (std::string_view file_name, const SimplicialComplex &amp; sc) Write a simplicial complex to .msh file. void write_obj (std::string_view file_name, const SimplicialComplex &amp; sc) Write a simplicial complex to .obj file."},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-simplicialcomplexio-15","title":"function SimplicialComplexIO [1/5]","text":"<pre><code>uipc::geometry::SimplicialComplexIO::SimplicialComplexIO () = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-simplicialcomplexio-25","title":"function SimplicialComplexIO [2/5]","text":"<pre><code>explicit uipc::geometry::SimplicialComplexIO::SimplicialComplexIO (\n    const Matrix4x4 &amp; pre_transform\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-simplicialcomplexio-35","title":"function SimplicialComplexIO [3/5]","text":"<pre><code>explicit uipc::geometry::SimplicialComplexIO::SimplicialComplexIO (\n    const Transform &amp; pre_transform\n) noexcept\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-simplicialcomplexio-45","title":"function SimplicialComplexIO [4/5]","text":"<pre><code>uipc::geometry::SimplicialComplexIO::SimplicialComplexIO (\n    const SimplicialComplexIO &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-simplicialcomplexio-55","title":"function SimplicialComplexIO [5/5]","text":"<pre><code>uipc::geometry::SimplicialComplexIO::SimplicialComplexIO (\n    SimplicialComplexIO &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-operator","title":"function operator=","text":"<pre><code>SimplicialComplexIO &amp; uipc::geometry::SimplicialComplexIO::operator= (\n    const SimplicialComplexIO &amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-operator_1","title":"function operator=","text":"<pre><code>SimplicialComplexIO &amp; uipc::geometry::SimplicialComplexIO::operator= (\n    SimplicialComplexIO &amp;&amp;\n) = default\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-read","title":"function read","text":"<p>A unified interface for reading a simplicial complex from a file, the file type is determined by the file extension. </p><pre><code>SimplicialComplex uipc::geometry::SimplicialComplexIO::read (\n    std::string_view file_name\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>file_name</code> The file to read </li> </ul> <p>Returns:</p> <p>SimplicialComplex </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-read_msh","title":"function read_msh","text":"<p>Read a tetmesh from a .msh file. </p><pre><code>SimplicialComplex uipc::geometry::SimplicialComplexIO::read_msh (\n    std::string_view file_name\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>file_name</code> The file to read</li> </ul> <p>Returns:</p> <p>SimplicialComplex </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-read_obj","title":"function read_obj","text":"<p>Read a trimesh, linemesh or particles from a .obj file. </p><pre><code>SimplicialComplex uipc::geometry::SimplicialComplexIO::read_obj (\n    std::string_view file_name\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>file_name</code> The file to read</li> </ul> <p>Returns:</p> <p>SimplicialComplex </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-read_ply","title":"function read_ply","text":"<p>Read a trimesh, linemesh or particles from a .ply file. </p><pre><code>SimplicialComplex uipc::geometry::SimplicialComplexIO::read_ply (\n    std::string_view file_name\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>file_name</code> The file to read</li> </ul> <p>Returns:</p> <p>SimplicialComplex </p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-write","title":"function write","text":"<p>Write a simplicial complex to a file, the file type is determined by the file extension. </p><pre><code>void uipc::geometry::SimplicialComplexIO::write (\n    std::string_view file_name,\n    const SimplicialComplex &amp; sc\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>file_name</code> The file to write </li> <li><code>sc</code> The simplicial complex to write </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-write_msh","title":"function write_msh","text":"<p>Write a simplicial complex to .msh file. </p><pre><code>void uipc::geometry::SimplicialComplexIO::write_msh (\n    std::string_view file_name,\n    const SimplicialComplex &amp; sc\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>file_name</code> The file to write </li> <li><code>sc</code> The simplicial complex to write </li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_simplicial_complex_i_o/#function-write_obj","title":"function write_obj","text":"<p>Write a simplicial complex to .obj file. </p><pre><code>void uipc::geometry::SimplicialComplexIO::write_obj (\n    std::string_view file_name,\n    const SimplicialComplex &amp; sc\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>file_name</code> The file to write </li> <li><code>sc</code> The simplicial complex to write </li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/io/simplicial_complex_io.h</code></p>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/","title":"Class uipc::geometry::SpreadSheetIO","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#class-uipcgeometryspreadsheetio","title":"Class uipc::geometry::SpreadSheetIO","text":"<p>ClassList &gt; uipc &gt; geometry &gt; SpreadSheetIO</p> <p>A class for writing geometry spreadsheet. More...</p> <ul> <li><code>#include &lt;spread_sheet_io.h&gt;</code></li> </ul>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#public-functions","title":"Public Functions","text":"Type Name SpreadSheetIO (std::string_view output_folder=\"./\")  void write_csv (std::string_view geo_name, const Geometry &amp; simplicial_complex) const void write_csv (const Geometry &amp; simplicial_complex) const void write_json (std::string_view geo_name, const Geometry &amp; simplicial_complex) const void write_json (const Geometry &amp; simplicial_complex) const"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#detailed-description","title":"Detailed Description","text":"<pre><code>SimplicialComplexIO io;\nauto mesh = io.read(\"cube.msh\");\nSpreadSheetIO sio;\n// dump to csv\nsio.write_csv(\"spreadsheet\", mesh);\n// dump to json\nsio.write_json(\"spreadsheet\", mesh);\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#function-spreadsheetio","title":"function SpreadSheetIO","text":"<pre><code>uipc::geometry::SpreadSheetIO::SpreadSheetIO (\n    std::string_view output_folder=\"./\"\n) \n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#function-write_csv-12","title":"function write_csv [1/2]","text":"<pre><code>void uipc::geometry::SpreadSheetIO::write_csv (\n    std::string_view geo_name,\n    const Geometry &amp; simplicial_complex\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#function-write_csv-22","title":"function write_csv [2/2]","text":"<pre><code>void uipc::geometry::SpreadSheetIO::write_csv (\n    const Geometry &amp; simplicial_complex\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#function-write_json-12","title":"function write_json [1/2]","text":"<pre><code>void uipc::geometry::SpreadSheetIO::write_json (\n    std::string_view geo_name,\n    const Geometry &amp; simplicial_complex\n) const\n</code></pre>"},{"location":"Libuipc/classuipc_1_1geometry_1_1_spread_sheet_i_o/#function-write_json-22","title":"function write_json [2/2]","text":"<pre><code>void uipc::geometry::SpreadSheetIO::write_json (\n    const Geometry &amp; simplicial_complex\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/io/spread_sheet_io.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1geometry_1_1affine__body/","title":"Namespace uipc::geometry::affine_body","text":""},{"location":"Libuipc/namespaceuipc_1_1geometry_1_1affine__body/#namespace-uipcgeometryaffine_body","title":"Namespace uipc::geometry::affine_body","text":"<p>Namespace List &gt; uipc &gt; geometry &gt; affine_body</p>"},{"location":"Libuipc/namespaceuipc_1_1geometry_1_1affine__body/#public-functions","title":"Public Functions","text":"Type Name UIPC_GEOMETRY_API Vector12 compute_body_force (const SimplicialComplex &amp; sc, const Vector3 &amp; body_force_density) Compute the body force of an affine body. UIPC_GEOMETRY_API void compute_dyadic_mass (const SimplicialComplex &amp; sc, Float rho, Float &amp; m, Vector3 &amp; m_x_bar, Matrix3x3 &amp; m_x_bar_x_bar) Compute the dyadic mass of a simplicial complex."},{"location":"Libuipc/namespaceuipc_1_1geometry_1_1affine__body/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1geometry_1_1affine__body/#function-compute_body_force","title":"function compute_body_force","text":"<p>Compute the body force of an affine body. </p><pre><code>UIPC_GEOMETRY_API Vector12 uipc::geometry::affine_body::compute_body_force (\n    const SimplicialComplex &amp; sc,\n    const Vector3 &amp; body_force_density\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>sc</code> The simplicial complex. </li> <li><code>body_force_density</code> The body force density in N/m^3. </li> <li><code>body_force</code> The body force </li> </ul>"},{"location":"Libuipc/namespaceuipc_1_1geometry_1_1affine__body/#function-compute_dyadic_mass","title":"function compute_dyadic_mass","text":"<p>Compute the dyadic mass of a simplicial complex. </p><pre><code>UIPC_GEOMETRY_API void uipc::geometry::affine_body::compute_dyadic_mass (\n    const SimplicialComplex &amp; sc,\n    Float rho,\n    Float &amp; m,\n    Vector3 &amp; m_x_bar,\n    Matrix3x3 &amp; m_x_bar_x_bar\n) \n</code></pre> <p>Integrate the mass density over the simplicial complex to compute the dyadic mass.</p> <p>Parameters:</p> <ul> <li><code>sc</code> The simplicial complex.</li> <li><code>m</code> The total mass.</li> <li><code>m_x_bar</code> The total mass times the center of mass.</li> <li><code>m_x_bar_x_bar</code> The total mass times the center of mass times the center of mass transpose. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/affine_body/compute_body_force.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1gui/","title":"Namespace uipc::gui","text":""},{"location":"Libuipc/namespaceuipc_1_1gui/#namespace-uipcgui","title":"Namespace uipc::gui","text":"<p>Namespace List &gt; uipc &gt; gui</p>"},{"location":"Libuipc/namespaceuipc_1_1gui/#public-functions","title":"Public Functions","text":"Type Name void * glfw_native_window_handle (GLFWwindow * window)  void * native_display_handle ()  bgfx::NativeWindowHandleType::Enum native_window_handle_type ()"},{"location":"Libuipc/namespaceuipc_1_1gui/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Libuipc/namespaceuipc_1_1gui/#function-glfw_native_window_handle","title":"function glfw_native_window_handle","text":"<pre><code>void * uipc::gui::glfw_native_window_handle (\n    GLFWwindow * window\n) \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1gui/#function-native_display_handle","title":"function native_display_handle","text":"<pre><code>void * uipc::gui::native_display_handle () \n</code></pre>"},{"location":"Libuipc/namespaceuipc_1_1gui/#function-native_window_handle_type","title":"function native_window_handle_type","text":"<pre><code>bgfx::NativeWindowHandleType::Enum uipc::gui::native_window_handle_type () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc_gui/common/platform_handle.h</code></p>"},{"location":"Libuipc/classuipc_1_1is__matrix/","title":"Class uipc::is_matrix","text":""},{"location":"Libuipc/classuipc_1_1is__matrix/#class-uipcis_matrix","title":"Class uipc::is_matrix","text":"<p>template &lt;typename MatrixT&gt;</p> <p>ClassList &gt; uipc &gt; is_matrix</p> <p>Inherits the following classes: std::false_type</p> <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/classuipc_1_1is__matrix_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_options_00209f23989f4c2eaf53edf139526fd2cf/","title":"Class uipc::is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;","text":""},{"location":"Libuipc/classuipc_1_1is__matrix_3_01_eigen_1_1_matrix_3_01_scalar_00_01_rows_00_01_cols_00_01_options_00209f23989f4c2eaf53edf139526fd2cf/#class-uipcis_matrix-eigenmatrix-scalar-rows-cols-options-maxrows-maxcols","title":"Class uipc::is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;","text":"<p>template &lt;typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols&gt;</p> <p>ClassList &gt; uipc &gt; is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;</p> <p>Inherits the following classes: std::false_type,  std::true_type</p> <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1pmr/","title":"Namespace uipc::pmr","text":""},{"location":"Libuipc/namespaceuipc_1_1pmr/#namespace-uipcpmr","title":"Namespace uipc::pmr","text":"<p>Namespace List &gt; uipc &gt; pmr</p> <p>The documentation for this class was generated from the following file <code>include/uipc/common/string.h</code></p>"},{"location":"Libuipc/structuipc_1_1propagate__const/","title":"Struct uipc::propagate_const","text":""},{"location":"Libuipc/structuipc_1_1propagate__const/#struct-uipcpropagate_const","title":"Struct uipc::propagate_const","text":"<p>template &lt;typename T, typename DstT&gt;</p> <p>ClassList &gt; uipc &gt; propagate_const</p>"},{"location":"Libuipc/structuipc_1_1propagate__const/#public-types","title":"Public Types","text":"Type Name typedef std::conditional_t&lt; std::is_const_v&lt; T &gt;, const DstT_, DstT_ &gt; type"},{"location":"Libuipc/structuipc_1_1propagate__const/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/structuipc_1_1propagate__const/#typedef-type","title":"typedef type","text":"<pre><code>using uipc::propagate_const&lt; T, DstT &gt;::type =  std::conditional_t&lt;std::is_const_v&lt;T&gt;, const DstT_, DstT_&gt;;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/namespaceuipc_1_1sanity__check/","title":"Namespace uipc::sanity_check","text":""},{"location":"Libuipc/namespaceuipc_1_1sanity__check/#namespace-uipcsanity_check","title":"Namespace uipc::sanity_check","text":"<p>Namespace List &gt; uipc &gt; sanity_check</p> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature/","title":"Struct uipc::signature","text":""},{"location":"Libuipc/structuipc_1_1signature/#struct-uipcsignature","title":"Struct uipc::signature","text":"<p>template &lt;typename Sig&gt;</p> <p>ClassList &gt; uipc &gt; signature</p> <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_6_08_07_args_8_8_8_08_4/","title":"Struct uipc::signature&lt; R(&amp;)(Args...)&gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_6_08_07_args_8_8_8_08_4/#struct-uipcsignature-rargs","title":"Struct uipc::signature&lt; R(&amp;)(Args...)&gt;","text":"<p>template &lt;typename R, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(&amp;)(Args...)&gt;</p> <p>Inherits the following classes: uipc::signature&lt; R(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_6_08_07_args_8_8_8_08_4/#public-types-inherited-from-uipcsignature-rargs","title":"Public Types inherited from uipc::signature&lt; R(Args...)&gt;","text":"<p>See uipc::signature&lt; R(Args...)&gt;</p> Type Name typedef std::tuple&lt; R, Args... &gt; type <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_5_08_07_args_8_8_8_08_4/","title":"Struct uipc::signature&lt; R(*)(Args...)&gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_5_08_07_args_8_8_8_08_4/#struct-uipcsignature-rargs","title":"Struct uipc::signature&lt; R(*)(Args...)&gt;","text":"<p>template &lt;typename R, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(*)(Args...)&gt;</p> <p>Inherits the following classes: uipc::signature&lt; R(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_5_08_07_args_8_8_8_08_4/#public-types-inherited-from-uipcsignature-rargs","title":"Public Types inherited from uipc::signature&lt; R(Args...)&gt;","text":"<p>See uipc::signature&lt; R(Args...)&gt;</p> Type Name typedef std::tuple&lt; R, Args... &gt; type <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_args_8_8_8_08_4/","title":"Struct uipc::signature&lt; R(Args...)&gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_args_8_8_8_08_4/#struct-uipcsignature-rargs","title":"Struct uipc::signature&lt; R(Args...)&gt;","text":"<p>template &lt;typename R, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(Args...)&gt;</p> <p>Inherited by the following classes: uipc::signature&lt; R(&amp;)(Args...)&gt;,  uipc::signature&lt; R(*)(Args...)&gt;,  uipc::signature&lt; R(C::*)(Args...) &amp;&amp; &gt;,  uipc::signature&lt; R(C::*)(Args...) const &gt;,  uipc::signature&lt; R(C::*)(Args...) const volatile &gt;,  uipc::signature&lt; R(C::*)(Args...) volatile &gt;,  uipc::signature&lt; R(C::*)(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_args_8_8_8_08_4/#public-types","title":"Public Types","text":"Type Name typedef std::tuple&lt; R, Args... &gt; type"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_args_8_8_8_08_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_args_8_8_8_08_4/#typedef-type","title":"typedef type","text":"<pre><code>using uipc::signature&lt; R(Args...)&gt;::type =  std::tuple&lt;R, Args...&gt;;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01_6_6_01_4/","title":"Struct uipc::signature&lt; R(C::*)(Args...) &amp;&amp; &gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01_6_6_01_4/#struct-uipcsignature-rcargs","title":"Struct uipc::signature&lt; R(C::*)(Args...) &amp;&amp; &gt;","text":"<p>template &lt;typename R, typename C, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(C::*)(Args...) &amp;&amp; &gt;</p> <p>Inherits the following classes: uipc::signature&lt; R(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01_6_6_01_4/#public-types-inherited-from-uipcsignature-rargs","title":"Public Types inherited from uipc::signature&lt; R(Args...)&gt;","text":"<p>See uipc::signature&lt; R(Args...)&gt;</p> Type Name typedef std::tuple&lt; R, Args... &gt; type <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4/","title":"Struct uipc::signature&lt; R(C::*)(Args...) const &gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4/#struct-uipcsignature-rcargs-const","title":"Struct uipc::signature&lt; R(C::*)(Args...) const &gt;","text":"<p>template &lt;typename R, typename C, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(C::*)(Args...) const &gt;</p> <p>Inherits the following classes: uipc::signature&lt; R(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4/#public-types-inherited-from-uipcsignature-rargs","title":"Public Types inherited from uipc::signature&lt; R(Args...)&gt;","text":"<p>See uipc::signature&lt; R(Args...)&gt;</p> Type Name typedef std::tuple&lt; R, Args... &gt; type <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01_4/","title":"Struct uipc::signature&lt; R(C::*)(Args...) const volatile &gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01_4/#struct-uipcsignature-rcargs-const-volatile","title":"Struct uipc::signature&lt; R(C::*)(Args...) const volatile &gt;","text":"<p>template &lt;typename R, typename C, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(C::*)(Args...) const volatile &gt;</p> <p>Inherits the following classes: uipc::signature&lt; R(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01_4/#public-types-inherited-from-uipcsignature-rargs","title":"Public Types inherited from uipc::signature&lt; R(Args...)&gt;","text":"<p>See uipc::signature&lt; R(Args...)&gt;</p> Type Name typedef std::tuple&lt; R, Args... &gt; type <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01_4/","title":"Struct uipc::signature&lt; R(C::*)(Args...) volatile &gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01_4/#struct-uipcsignature-rcargs-volatile","title":"Struct uipc::signature&lt; R(C::*)(Args...) volatile &gt;","text":"<p>template &lt;typename R, typename C, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(C::*)(Args...) volatile &gt;</p> <p>Inherits the following classes: uipc::signature&lt; R(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01_4/#public-types-inherited-from-uipcsignature-rargs","title":"Public Types inherited from uipc::signature&lt; R(Args...)&gt;","text":"<p>See uipc::signature&lt; R(Args...)&gt;</p> Type Name typedef std::tuple&lt; R, Args... &gt; type <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_4/","title":"Struct uipc::signature&lt; R(C::*)(Args...)&gt;","text":""},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_4/#struct-uipcsignature-rcargs","title":"Struct uipc::signature&lt; R(C::*)(Args...)&gt;","text":"<p>template &lt;typename R, typename C, typename... Args&gt;</p> <p>ClassList &gt; uipc &gt; signature&lt; R(C::*)(Args...)&gt;</p> <p>Inherits the following classes: uipc::signature&lt; R(Args...)&gt;</p>"},{"location":"Libuipc/structuipc_1_1signature_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_4/#public-types-inherited-from-uipcsignature-rargs","title":"Public Types inherited from uipc::signature&lt; R(Args...)&gt;","text":"<p>See uipc::signature&lt; R(Args...)&gt;</p> Type Name typedef std::tuple&lt; R, Args... &gt; type <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/","title":"Struct uipc::GlobalTimer::MergeResult","text":""},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#struct-uipcglobaltimermergeresult","title":"Struct uipc::GlobalTimer::MergeResult","text":"<p>ClassList &gt; MergeResult</p>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#public-attributes","title":"Public Attributes","text":"Type Name std::list&lt; MergeResult * &gt; children size_t count   = <code>0</code> size_t depth   = <code>0</code> double duration   = <code>0.0</code> string name string parent_full_name string parent_name"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#variable-children","title":"variable children","text":"<pre><code>std::list&lt;MergeResult*&gt; uipc::GlobalTimer::MergeResult::children;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#variable-count","title":"variable count","text":"<pre><code>size_t uipc::GlobalTimer::MergeResult::count;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#variable-depth","title":"variable depth","text":"<pre><code>size_t uipc::GlobalTimer::MergeResult::depth;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#variable-duration","title":"variable duration","text":"<pre><code>double uipc::GlobalTimer::MergeResult::duration;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#variable-name","title":"variable name","text":"<pre><code>string uipc::GlobalTimer::MergeResult::name;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#variable-parent_full_name","title":"variable parent_full_name","text":"<pre><code>string uipc::GlobalTimer::MergeResult::parent_full_name;\n</code></pre>"},{"location":"Libuipc/structuipc_1_1_global_timer_1_1_merge_result/#variable-parent_name","title":"variable parent_name","text":"<pre><code>string uipc::GlobalTimer::MergeResult::parent_name;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/timer.h</code></p>"},{"location":"Libuipc/dir_d44c64559bbebec7f509842c48db8b23/","title":"Dir include","text":""},{"location":"Libuipc/dir_d44c64559bbebec7f509842c48db8b23/#dir-include","title":"Dir include","text":"<p>FileList &gt; include</p>"},{"location":"Libuipc/dir_d44c64559bbebec7f509842c48db8b23/#directories","title":"Directories","text":"Type Name dir uipc dir uipc_gui <p>The documentation for this class was generated from the following file <code>include/</code></p>"},{"location":"Libuipc/dir_9f30510905f1286cc334e7ecdb1aceca/","title":"Dir include/uipc","text":""},{"location":"Libuipc/dir_9f30510905f1286cc334e7ecdb1aceca/#dir-includeuipc","title":"Dir include/uipc","text":"<p>FileList &gt; include &gt; uipc</p>"},{"location":"Libuipc/dir_9f30510905f1286cc334e7ecdb1aceca/#files","title":"Files","text":"Type Name file core.h file geometry.h file io.h file uipc.h"},{"location":"Libuipc/dir_9f30510905f1286cc334e7ecdb1aceca/#directories","title":"Directories","text":"Type Name dir backend dir builtin dir common dir constitution dir core dir diff_sim dir geometry dir io <p>The documentation for this class was generated from the following file <code>include/uipc/</code></p>"},{"location":"Libuipc/core_8h/","title":"File core.h","text":""},{"location":"Libuipc/core_8h/#file-coreh","title":"File core.h","text":"<p>FileList &gt; include &gt; uipc &gt; core.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;Eigen/Core&gt;</code></li> <li><code>#include &lt;Eigen/Geometry&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> <li><code>#include &lt;uipc/common/range.h&gt;</code></li> <li><code>#include &lt;uipc/common/enumerate.h&gt;</code></li> <li><code>#include &lt;uipc/common/uipc.h&gt;</code></li> <li><code>#include &lt;uipc/core/engine.h&gt;</code></li> <li><code>#include &lt;uipc/core/world.h&gt;</code></li> <li><code>#include &lt;uipc/core/scene.h&gt;</code></li> <li><code>#include &lt;uipc/core/scene_snapshot.h&gt;</code></li> <li><code>#include &lt;uipc/core/scene_factory.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/implicit_geometry.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/implicit_geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/builtin/attribute_name.h&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/core.h</code></p>"},{"location":"Libuipc/core_8h_source/","title":"File core.h","text":""},{"location":"Libuipc/core_8h_source/#file-coreh","title":"File core.h","text":"<p>File List &gt; include &gt; uipc &gt; core.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;Eigen/Core&gt;\n#include &lt;Eigen/Geometry&gt;\n\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n#include &lt;uipc/common/range.h&gt;\n#include &lt;uipc/common/enumerate.h&gt;\n#include &lt;uipc/common/uipc.h&gt;\n\n#include &lt;uipc/core/engine.h&gt;\n#include &lt;uipc/core/world.h&gt;\n#include &lt;uipc/core/scene.h&gt;\n#include &lt;uipc/core/scene_snapshot.h&gt;\n#include &lt;uipc/core/scene_factory.h&gt;\n\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n#include &lt;uipc/geometry/simplicial_complex_slot.h&gt;\n#include &lt;uipc/geometry/implicit_geometry.h&gt;\n#include &lt;uipc/geometry/implicit_geometry_slot.h&gt;\n\n#include &lt;uipc/builtin/attribute_name.h&gt;\n</code></pre>"},{"location":"Libuipc/geometry_8h/","title":"File geometry.h","text":""},{"location":"Libuipc/geometry_8h/#file-geometryh","title":"File geometry.h","text":"<p>FileList &gt; include &gt; uipc &gt; geometry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/implicit_geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_atlas.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_commit.h&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry.h</code></p>"},{"location":"Libuipc/geometry_8h_source/","title":"File geometry.h","text":""},{"location":"Libuipc/geometry_8h_source/#file-geometryh","title":"File geometry.h","text":"<p>File List &gt; include &gt; uipc &gt; geometry.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry_slot.h&gt;\n#include &lt;uipc/geometry/simplicial_complex_slot.h&gt;\n#include &lt;uipc/geometry/implicit_geometry_slot.h&gt;\n#include &lt;uipc/geometry/geometry_atlas.h&gt;\n#include &lt;uipc/geometry/utils.h&gt;\n#include &lt;uipc/geometry/geometry_commit.h&gt;\n</code></pre>"},{"location":"Libuipc/dir_53d62147b82bd29328805b2087bd1012/","title":"Dir include/uipc/backend","text":""},{"location":"Libuipc/dir_53d62147b82bd29328805b2087bd1012/#dir-includeuipcbackend","title":"Dir include/uipc/backend","text":"<p>FileList &gt; backend</p>"},{"location":"Libuipc/dir_53d62147b82bd29328805b2087bd1012/#files","title":"Files","text":"Type Name file buffer.h file buffer_view.h file engine_create_info.h file macro.h file module_init_info.h file type_define.h"},{"location":"Libuipc/dir_53d62147b82bd29328805b2087bd1012/#directories","title":"Directories","text":"Type Name dir visitors <p>The documentation for this class was generated from the following file <code>include/uipc/backend/</code></p>"},{"location":"Libuipc/buffer_8h/","title":"File buffer.h","text":""},{"location":"Libuipc/buffer_8h/#file-bufferh","title":"File buffer.h","text":"<p>FileList &gt; backend &gt; buffer.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/backend/buffer_view.h&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> </ul>"},{"location":"Libuipc/buffer_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend"},{"location":"Libuipc/buffer_8h/#classes","title":"Classes","text":"Type Name class Buffer <p>The documentation for this class was generated from the following file <code>include/uipc/backend/buffer.h</code></p>"},{"location":"Libuipc/buffer_8h_source/","title":"File buffer.h","text":""},{"location":"Libuipc/buffer_8h_source/#file-bufferh","title":"File buffer.h","text":"<p>File List &gt; backend &gt; buffer.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/backend/buffer_view.h&gt;\n#include &lt;functional&gt;\n\nnamespace uipc::backend\n{\nclass UIPC_CORE_API Buffer\n{\n  public:\n    Buffer(std::function&lt;void(SizeT)&gt;  resize_func,\n           std::function&lt;BufferView()&gt; get_buffer_view_func);\n\n    void       resize(SizeT size);\n    BufferView view() const;\n\n  private:\n    std::function&lt;void(SizeT)&gt;  m_resize_func;\n    std::function&lt;BufferView()&gt; m_get_buffer_view_func;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/buffer__view_8h/","title":"File buffer_view.h","text":""},{"location":"Libuipc/buffer__view_8h/#file-buffer_viewh","title":"File buffer_view.h","text":"<p>FileList &gt; backend &gt; buffer_view.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/backend/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> </ul>"},{"location":"Libuipc/buffer__view_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend"},{"location":"Libuipc/buffer__view_8h/#classes","title":"Classes","text":"Type Name class BufferView <p>The documentation for this class was generated from the following file <code>include/uipc/backend/buffer_view.h</code></p>"},{"location":"Libuipc/buffer__view_8h_source/","title":"File buffer_view.h","text":""},{"location":"Libuipc/buffer__view_8h_source/#file-buffer_viewh","title":"File buffer_view.h","text":"<p>File List &gt; backend &gt; buffer_view.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/backend/type_define.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\nnamespace uipc::backend\n{\nclass UIPC_CORE_API BufferView\n{\n  private:\n    static constexpr SizeT INVALID = ~0;\n\n  public:\n    BufferView() = default;\n    BufferView(HandleT          handle,\n               SizeT            element_offset,\n               SizeT            element_count,\n               SizeT            element_size,\n               SizeT            element_stride,\n               std::string_view backend_name) noexcept;\n\n    HandleT          handle() const noexcept;\n    SizeT            offset() const noexcept;\n    SizeT            size() const noexcept;\n    SizeT            element_size() const noexcept;\n    SizeT            element_stride() const noexcept;\n    SizeT            size_in_bytes() const noexcept;\n    std::string_view backend() const noexcept;\n    operator bool() const noexcept;\n\n    BufferView subview(SizeT offset, SizeT element_count) const noexcept;\n\n  private:\n    HandleT m_handle = 0;\n    SizeT   m_offset = INVALID;\n    SizeT   m_size   = 0;\n\n    SizeT            m_element_size   = INVALID;\n    SizeT            m_element_stride = INVALID;\n    std::string_view m_backend;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/engine__create__info_8h/","title":"File engine_create_info.h","text":""},{"location":"Libuipc/engine__create__info_8h/#file-engine_create_infoh","title":"File engine_create_info.h","text":"<p>FileList &gt; backend &gt; engine_create_info.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> </ul>"},{"location":"Libuipc/engine__create__info_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend"},{"location":"Libuipc/engine__create__info_8h/#classes","title":"Classes","text":"Type Name class EngineCreateInfo"},{"location":"Libuipc/engine__create__info_8h/#public-types","title":"Public Types","text":"Type Name typedef uipc::backend::EngineCreateInfo EngineCreateInfo"},{"location":"Libuipc/engine__create__info_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Libuipc/engine__create__info_8h/#typedef-enginecreateinfo","title":"typedef EngineCreateInfo","text":"<pre><code>using EngineCreateInfo =  uipc::backend::EngineCreateInfo;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/engine_create_info.h</code></p>"},{"location":"Libuipc/engine__create__info_8h_source/","title":"File engine_create_info.h","text":""},{"location":"Libuipc/engine__create__info_8h_source/#file-engine_create_infoh","title":"File engine_create_info.h","text":"<p>File List &gt; backend &gt; engine_create_info.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/json.h&gt;\nnamespace uipc::backend\n{\nclass UIPC_CORE_API EngineCreateInfo\n{\n  public:\n    std::string_view workspace;\n    Json             config;\n};\n}  // namespace uipc::backend\n\nusing EngineCreateInfo = uipc::backend::EngineCreateInfo;\n</code></pre>"},{"location":"Libuipc/dir_007753111df00039ee3ec058cc286377/","title":"Dir include/uipc/backend/visitors","text":""},{"location":"Libuipc/dir_007753111df00039ee3ec058cc286377/#dir-includeuipcbackendvisitors","title":"Dir include/uipc/backend/visitors","text":"<p>FileList &gt; backend &gt; visitors</p>"},{"location":"Libuipc/dir_007753111df00039ee3ec058cc286377/#files","title":"Files","text":"Type Name file animator_visitor.h file contact_tabular_visitor.h file diff_sim_visitor.h file geometry_visitor.h file sanity_check_message_visitor.h file scene_visitor.h file world_visitor.h <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/</code></p>"},{"location":"Libuipc/animator__visitor_8h/","title":"File animator_visitor.h","text":""},{"location":"Libuipc/animator__visitor_8h/#file-animator_visitorh","title":"File animator_visitor.h","text":"<p>FileList &gt; backend &gt; visitors &gt; animator_visitor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> </ul>"},{"location":"Libuipc/animator__visitor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core"},{"location":"Libuipc/animator__visitor_8h/#classes","title":"Classes","text":"Type Name class AnimatorVisitor <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/animator_visitor.h</code></p>"},{"location":"Libuipc/animator__visitor_8h_source/","title":"File animator_visitor.h","text":""},{"location":"Libuipc/animator__visitor_8h_source/#file-animator_visitorh","title":"File animator_visitor.h","text":"<p>File List &gt; backend &gt; visitors &gt; animator_visitor.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n\nnamespace uipc::core\n{\nclass Animator;\n}\n\nnamespace uipc::backend\n{\nclass UIPC_CORE_API AnimatorVisitor\n{\n  public:\n    AnimatorVisitor(core::Animator&amp; animator) noexcept;\n    void  init();\n    void  update();\n    SizeT substep() noexcept;\n\n  private:\n    core::Animator&amp; m_animator;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/contact__tabular__visitor_8h/","title":"File contact_tabular_visitor.h","text":""},{"location":"Libuipc/contact__tabular__visitor_8h/#file-contact_tabular_visitorh","title":"File contact_tabular_visitor.h","text":"<p>FileList &gt; backend &gt; visitors &gt; contact_tabular_visitor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/attribute_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/contact__tabular__visitor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core"},{"location":"Libuipc/contact__tabular__visitor_8h/#classes","title":"Classes","text":"Type Name class ContactTabularVisitor <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/contact_tabular_visitor.h</code></p>"},{"location":"Libuipc/contact__tabular__visitor_8h_source/","title":"File contact_tabular_visitor.h","text":""},{"location":"Libuipc/contact__tabular__visitor_8h_source/#file-contact_tabular_visitorh","title":"File contact_tabular_visitor.h","text":"<p>File List &gt; backend &gt; visitors &gt; contact_tabular_visitor.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/attribute_collection.h&gt;\n\nnamespace uipc::core\n{\nclass ContactTabular;\n}\n\nnamespace uipc::backend\n{\nclass UIPC_CORE_API ContactTabularVisitor\n{\n  public:\n    ContactTabularVisitor(core::ContactTabular&amp; contact_tabular) noexcept\n        : m_contact_tabular(contact_tabular)\n    {\n    }\n\n    geometry::AttributeCollection&amp; contact_models() noexcept;\n\n  private:\n    core::ContactTabular&amp; m_contact_tabular;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/diff__sim__visitor_8h/","title":"File diff_sim_visitor.h","text":""},{"location":"Libuipc/diff__sim__visitor_8h/#file-diff_sim_visitorh","title":"File diff_sim_visitor.h","text":"<p>FileList &gt; backend &gt; visitors &gt; diff_sim_visitor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/diff_sim/parameter_collection.h&gt;</code></li> <li><code>#include &lt;uipc/diff_sim/sparse_coo_view.h&gt;</code></li> </ul>"},{"location":"Libuipc/diff__sim__visitor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core"},{"location":"Libuipc/diff__sim__visitor_8h/#classes","title":"Classes","text":"Type Name class DiffSimVisitor <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/diff_sim_visitor.h</code></p>"},{"location":"Libuipc/diff__sim__visitor_8h_source/","title":"File diff_sim_visitor.h","text":""},{"location":"Libuipc/diff__sim__visitor_8h_source/#file-diff_sim_visitorh","title":"File diff_sim_visitor.h","text":"<p>File List &gt; backend &gt; visitors &gt; diff_sim_visitor.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/diff_sim/parameter_collection.h&gt;\n#include &lt;uipc/diff_sim/sparse_coo_view.h&gt;\n\nnamespace uipc::core\n{\nclass DiffSim;\n}\nnamespace uipc::backend\n{\nclass UIPC_CORE_API DiffSimVisitor\n{\n  public:\n    DiffSimVisitor(core::DiffSim&amp; diff_sim);\n    ~DiffSimVisitor();\n    diff_sim::ParameterCollection&amp;       parameters();\n    const diff_sim::ParameterCollection&amp; parameters() const;\n    core::DiffSim&amp;                       ref();\n\n  private:\n    core::DiffSim&amp; m_diff_sim;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/geometry__visitor_8h/","title":"File geometry_visitor.h","text":""},{"location":"Libuipc/geometry__visitor_8h/#file-geometry_visitorh","title":"File geometry_visitor.h","text":"<p>FileList &gt; backend &gt; visitors &gt; geometry_visitor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/geometry__visitor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace geometry"},{"location":"Libuipc/geometry__visitor_8h/#classes","title":"Classes","text":"Type Name class GeometryVisitor <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/geometry_visitor.h</code></p>"},{"location":"Libuipc/geometry__visitor_8h_source/","title":"File geometry_visitor.h","text":""},{"location":"Libuipc/geometry__visitor_8h_source/#file-geometry_visitorh","title":"File geometry_visitor.h","text":"<p>File List &gt; backend &gt; visitors &gt; geometry_visitor.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string&gt;\n#include &lt;uipc/geometry/attribute_collection.h&gt;\nnamespace uipc::geometry\n{\nclass IGeometry;\n}\nnamespace uipc::backend\n{\nclass UIPC_CORE_API GeometryVisitor\n{\n  public:\n    GeometryVisitor(geometry::IGeometry&amp; geometry);\n    void collect_attribute_collections(vector&lt;std::string&gt;&amp; names,\n                                       vector&lt;geometry::AttributeCollection*&gt;&amp; collections);\n\n  private:\n    geometry::IGeometry&amp; m_geometry;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/sanity__check__message__visitor_8h/","title":"File sanity_check_message_visitor.h","text":""},{"location":"Libuipc/sanity__check__message__visitor_8h/#file-sanity_check_message_visitorh","title":"File sanity_check_message_visitor.h","text":"<p>FileList &gt; backend &gt; visitors &gt; sanity_check_message_visitor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/core/i_sanity_checker.h&gt;</code></li> </ul>"},{"location":"Libuipc/sanity__check__message__visitor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend"},{"location":"Libuipc/sanity__check__message__visitor_8h/#classes","title":"Classes","text":"Type Name class SanityCheckMessageVisitor <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/sanity_check_message_visitor.h</code></p>"},{"location":"Libuipc/sanity__check__message__visitor_8h_source/","title":"File sanity_check_message_visitor.h","text":""},{"location":"Libuipc/sanity__check__message__visitor_8h_source/#file-sanity_check_message_visitorh","title":"File sanity_check_message_visitor.h","text":"<p>File List &gt; backend &gt; visitors &gt; sanity_check_message_visitor.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/core/i_sanity_checker.h&gt;\n\nnamespace uipc::backend\n{\nclass UIPC_CORE_API SanityCheckMessageVisitor\n{\n  public:\n    SanityCheckMessageVisitor(core::SanityCheckMessage&amp; msg) noexcept;\n\n    auto&amp; id() const noexcept { return m_msg.m_id; }\n    auto&amp; name() const noexcept { return m_msg.m_name; }\n    auto&amp; result() const noexcept { return m_msg.m_result; }\n    auto&amp; message() const noexcept { return m_msg.m_message; }\n    auto&amp; geometries() const noexcept { return m_msg.m_geometries; }\n\n  private:\n    core::SanityCheckMessage&amp; m_msg;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/scene__visitor_8h/","title":"File scene_visitor.h","text":""},{"location":"Libuipc/scene__visitor_8h/#file-scene_visitorh","title":"File scene_visitor.h","text":"<p>FileList &gt; backend &gt; visitors &gt; scene_visitor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/core/object.h&gt;</code></li> <li><code>#include &lt;uipc/common/set.h&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_collection.h&gt;</code></li> <li><code>#include &lt;uipc/core/constitution_tabular.h&gt;</code></li> <li><code>#include &lt;uipc/core/contact_tabular.h&gt;</code></li> <li><code>#include &lt;uipc/backend/visitors/diff_sim_visitor.h&gt;</code></li> </ul>"},{"location":"Libuipc/scene__visitor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/scene__visitor_8h/#classes","title":"Classes","text":"Type Name class SceneVisitor <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/scene_visitor.h</code></p>"},{"location":"Libuipc/scene__visitor_8h_source/","title":"File scene_visitor.h","text":""},{"location":"Libuipc/scene__visitor_8h_source/#file-scene_visitorh","title":"File scene_visitor.h","text":"<p>File List &gt; backend &gt; visitors &gt; scene_visitor.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/core/object.h&gt;\n#include &lt;uipc/common/set.h&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n#include &lt;uipc/geometry/geometry_collection.h&gt;\n#include &lt;uipc/core/constitution_tabular.h&gt;\n#include &lt;uipc/core/contact_tabular.h&gt;\n#include &lt;uipc/backend/visitors/diff_sim_visitor.h&gt;\n\nnamespace uipc::core\n{\nclass Scene;\n}\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::backend\n{\nclass UIPC_CORE_API SceneVisitor\n{\n  public:\n    SceneVisitor(core::Scene&amp; scene) noexcept;\n    SceneVisitor(core::internal::Scene&amp; scene) noexcept;\n\n    SceneVisitor(const SceneVisitor&amp;)            = delete;\n    SceneVisitor(SceneVisitor&amp;&amp;)                 = default;\n    SceneVisitor&amp; operator=(const SceneVisitor&amp;) = delete;\n    SceneVisitor&amp; operator=(SceneVisitor&amp;&amp;)      = default;\n\n    void begin_pending() noexcept;\n    void solve_pending() noexcept;\n    bool is_pending() const noexcept;\n\n    span&lt;S&lt;geometry::GeometrySlot&gt;&gt; geometries() const noexcept;\n    S&lt;geometry::GeometrySlot&gt;       find_geometry(IndexT id) noexcept;\n    span&lt;S&lt;geometry::GeometrySlot&gt;&gt; pending_geometries() const noexcept;\n\n    span&lt;S&lt;geometry::GeometrySlot&gt;&gt; rest_geometries() const noexcept;\n    S&lt;geometry::GeometrySlot&gt;       find_rest_geometry(IndexT id) noexcept;\n    span&lt;S&lt;geometry::GeometrySlot&gt;&gt; pending_rest_geometries() const noexcept;\n\n    span&lt;IndexT&gt; pending_destroy_ids() const noexcept;\n    const Json&amp;  info() const noexcept;\n\n    const core::ConstitutionTabular&amp; constitution_tabular() const noexcept;\n    core::ConstitutionTabular&amp;       constitution_tabular() noexcept;\n\n    const core::ContactTabular&amp; contact_tabular() const noexcept;\n    core::ContactTabular&amp;       contact_tabular() noexcept;\n\n    const DiffSimVisitor&amp; diff_sim() const noexcept;\n    DiffSimVisitor&amp;       diff_sim() noexcept;\n\n    core::Scene&amp; ref() noexcept;\n\n  private:\n    mutable S&lt;core::Scene&gt; m_ref;\n    core::internal::Scene&amp; m_scene;\n    DiffSimVisitor         m_diff_sim_visitor;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/world__visitor_8h/","title":"File world_visitor.h","text":""},{"location":"Libuipc/world__visitor_8h/#file-world_visitorh","title":"File world_visitor.h","text":"<p>FileList &gt; backend &gt; visitors &gt; world_visitor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/backend/visitors/scene_visitor.h&gt;</code></li> <li><code>#include &lt;uipc/backend/visitors/animator_visitor.h&gt;</code></li> </ul>"},{"location":"Libuipc/world__visitor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/world__visitor_8h/#classes","title":"Classes","text":"Type Name class WorldVisitor <p>The documentation for this class was generated from the following file <code>include/uipc/backend/visitors/world_visitor.h</code></p>"},{"location":"Libuipc/world__visitor_8h_source/","title":"File world_visitor.h","text":""},{"location":"Libuipc/world__visitor_8h_source/#file-world_visitorh","title":"File world_visitor.h","text":"<p>File List &gt; backend &gt; visitors &gt; world_visitor.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/backend/visitors/scene_visitor.h&gt;\n#include &lt;uipc/backend/visitors/animator_visitor.h&gt;\nnamespace uipc::core\n{\nclass World;\nclass Engine;\n}  // namespace uipc::core\n\nnamespace uipc::core::internal\n{\nclass World;\nclass Scene;\nclass Engine;\n}  // namespace uipc::core::internal\n\nnamespace uipc::backend\n{\nclass UIPC_CORE_API WorldVisitor\n{\n  public:\n    WorldVisitor(core::World&amp; w) noexcept;\n    WorldVisitor(core::internal::World&amp; w) noexcept;\n\n    WorldVisitor(const WorldVisitor&amp;)            = delete;\n    WorldVisitor(WorldVisitor&amp;&amp;)                 = default;\n    WorldVisitor&amp; operator=(const WorldVisitor&amp;) = delete;\n    WorldVisitor&amp; operator=(WorldVisitor&amp;&amp;)      = default;\n\n    SceneVisitor    scene() noexcept;\n    AnimatorVisitor animator() noexcept;\n    core::World&amp;    ref() noexcept;\n\n  private:\n    mutable S&lt;core::World&gt; m_ref;\n    core::internal::World&amp; m_world;\n};\n}  // namespace uipc::backend\n</code></pre>"},{"location":"Libuipc/backend_2macro_8h/","title":"File macro.h","text":""},{"location":"Libuipc/backend_2macro_8h/#file-macroh","title":"File macro.h","text":"<p>FileList &gt; backend &gt; macro.h</p> <p>Go to the source code of this file</p>"},{"location":"Libuipc/backend_2macro_8h/#macros","title":"Macros","text":"Type Name define UIPC_BACKEND_API"},{"location":"Libuipc/backend_2macro_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/backend_2macro_8h/#define-uipc_backend_api","title":"define UIPC_BACKEND_API","text":"<pre><code>#define UIPC_BACKEND_API \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/backend/macro.h</code></p>"},{"location":"Libuipc/backend_2macro_8h_source/","title":"File macro.h","text":""},{"location":"Libuipc/backend_2macro_8h_source/#file-macroh","title":"File macro.h","text":"<p>File List &gt; backend &gt; macro.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#ifdef _MSC_VER\n#ifdef UIPC_BACKEND_EXPORT_DLL\n#define UIPC_BACKEND_API __declspec(dllexport)\n#else\n#define UIPC_BACKEND_API __declspec(dllimport)\n#endif\n\n#else\n#define UIPC_BACKEND_API\n#endif\n</code></pre>"},{"location":"Libuipc/module__init__info_8h/","title":"File module_init_info.h","text":""},{"location":"Libuipc/module__init__info_8h/#file-module_init_infoh","title":"File module_init_info.h","text":"<p>FileList &gt; backend &gt; module_init_info.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;memory_resource&gt;</code></li> </ul>"},{"location":"Libuipc/module__init__info_8h/#classes","title":"Classes","text":"Type Name class UIPCModuleInitInfo <p>The documentation for this class was generated from the following file <code>include/uipc/backend/module_init_info.h</code></p>"},{"location":"Libuipc/module__init__info_8h_source/","title":"File module_init_info.h","text":""},{"location":"Libuipc/module__init__info_8h_source/#file-module_init_infoh","title":"File module_init_info.h","text":"<p>File List &gt; backend &gt; module_init_info.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;memory_resource&gt;\n\n\nclass UIPC_CORE_API UIPCModuleInitInfo\n{\n  public:\n    std::string_view           module_name;\n    std::pmr::memory_resource* memory_resource = nullptr;\n};\n</code></pre>"},{"location":"Libuipc/backend_2type__define_8h/","title":"File type_define.h","text":""},{"location":"Libuipc/backend_2type__define_8h/#file-type_defineh","title":"File type_define.h","text":"<p>FileList &gt; backend &gt; type_define.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cinttypes&gt;</code></li> </ul>"},{"location":"Libuipc/backend_2type__define_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend <p>The documentation for this class was generated from the following file <code>include/uipc/backend/type_define.h</code></p>"},{"location":"Libuipc/backend_2type__define_8h_source/","title":"File type_define.h","text":""},{"location":"Libuipc/backend_2type__define_8h_source/#file-type_defineh","title":"File type_define.h","text":"<p>File List &gt; backend &gt; type_define.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;cinttypes&gt;\n\nnamespace uipc::backend\n{\n    using HandleT = std::uint64_t;\n}\n</code></pre>"},{"location":"Libuipc/dir_e46c520626162f9e42d80fd08f196511/","title":"Dir include/uipc/builtin","text":""},{"location":"Libuipc/dir_e46c520626162f9e42d80fd08f196511/#dir-includeuipcbuiltin","title":"Dir include/uipc/builtin","text":"<p>FileList &gt; builtin</p>"},{"location":"Libuipc/dir_e46c520626162f9e42d80fd08f196511/#files","title":"Files","text":"Type Name file attribute_name.h file constitution_type.h file constitution_uid_auto_register.h file constitution_uid_collection.h file factory_keyword.h file geometry_type.h file implicit_geometry_uid_auto_register.h file implicit_geometry_uid_collection.h file uid_info.h file uid_register.h"},{"location":"Libuipc/dir_e46c520626162f9e42d80fd08f196511/#directories","title":"Directories","text":"Type Name dir details <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/</code></p>"},{"location":"Libuipc/attribute__name_8h/","title":"File attribute_name.h","text":""},{"location":"Libuipc/attribute__name_8h/#file-attribute_nameh","title":"File attribute_name.h","text":"<p>FileList &gt; builtin &gt; attribute_name.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;uipc/builtin/details/attribute_name.h&gt;</code></li> </ul>"},{"location":"Libuipc/attribute__name_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin"},{"location":"Libuipc/attribute__name_8h/#macros","title":"Macros","text":"Type Name define UIPC_BUILTIN_ATTRIBUTE (name) <code>constexpr std::string\\_view name = #name</code>"},{"location":"Libuipc/attribute__name_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/attribute__name_8h/#define-uipc_builtin_attribute","title":"define UIPC_BUILTIN_ATTRIBUTE","text":"<pre><code>#define UIPC_BUILTIN_ATTRIBUTE (\n    name\n) `constexpr std::string_view name = #name`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/attribute_name.h</code></p>"},{"location":"Libuipc/attribute__name_8h_source/","title":"File attribute_name.h","text":""},{"location":"Libuipc/attribute__name_8h_source/#file-attribute_nameh","title":"File attribute_name.h","text":"<p>File List &gt; builtin &gt; attribute_name.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n\n#define UIPC_BUILTIN_ATTRIBUTE(name) constexpr std::string_view name = #name\n\nnamespace uipc::builtin\n{\n#include &lt;uipc/builtin/details/attribute_name.h&gt;\n}  // namespace uipc::builtin\n\n#undef UIPC_BUILTIN_ATTRIBUTE\n</code></pre>"},{"location":"Libuipc/constitution__type_8h/","title":"File constitution_type.h","text":""},{"location":"Libuipc/constitution__type_8h/#file-constitution_typeh","title":"File constitution_type.h","text":"<p>FileList &gt; builtin &gt; constitution_type.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> </ul>"},{"location":"Libuipc/constitution__type_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/constitution_type.h</code></p>"},{"location":"Libuipc/constitution__type_8h_source/","title":"File constitution_type.h","text":""},{"location":"Libuipc/constitution__type_8h_source/#file-constitution_typeh","title":"File constitution_type.h","text":"<p>File List &gt; builtin &gt; constitution_type.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n\nnamespace uipc::builtin\n{\nconstexpr std::string_view AffineBody    = \"AffineBody\";\nconstexpr std::string_view FiniteElement = \"FiniteElement\";\nconstexpr std::string_view Constraint    = \"Constraint\";\n}  // namespace uipc::builtin\n</code></pre>"},{"location":"Libuipc/constitution__uid__auto__register_8h/","title":"File constitution_uid_auto_register.h","text":""},{"location":"Libuipc/constitution__uid__auto__register_8h/#file-constitution_uid_auto_registerh","title":"File constitution_uid_auto_register.h","text":"<p>FileList &gt; builtin &gt; constitution_uid_auto_register.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/builtin/uid_register.h&gt;</code></li> <li><code>#include &lt;uipc/common/list.h&gt;</code></li> </ul>"},{"location":"Libuipc/constitution__uid__auto__register_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin"},{"location":"Libuipc/constitution__uid__auto__register_8h/#classes","title":"Classes","text":"Type Name class ConstitutionUIDAutoRegister"},{"location":"Libuipc/constitution__uid__auto__register_8h/#macros","title":"Macros","text":"Type Name define REGISTER_CONSTITUTION_UIDS (...) <code>REGISTER\\_CONSTITUTION\\_UIDS\\_INTERNAL(\\_\\_COUNTER\\_\\_)</code>Register ConstitutionUIDs. define REGISTER_CONSTITUTION_UIDS_INTERNAL (counter) <code>/* multi line expression */</code>"},{"location":"Libuipc/constitution__uid__auto__register_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/constitution__uid__auto__register_8h/#define-register_constitution_uids","title":"define REGISTER_CONSTITUTION_UIDS","text":"<p>Register ConstitutionUIDs. </p><pre><code>#define REGISTER_CONSTITUTION_UIDS (\n    ...\n) `REGISTER_CONSTITUTION_UIDS_INTERNAL(__COUNTER__)`\n</code></pre> <p>Example:</p> <pre><code>\n</code></pre>"},{"location":"Libuipc/constitution__uid__auto__register_8h/#define-register_constitution_uids_internal","title":"define REGISTER_CONSTITUTION_UIDS_INTERNAL","text":"<pre><code>#define REGISTER_CONSTITUTION_UIDS_INTERNAL (\n    counter\n) `/* multi line expression */`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/constitution_uid_auto_register.h</code></p>"},{"location":"Libuipc/constitution__uid__auto__register_8h_source/","title":"File constitution_uid_auto_register.h","text":""},{"location":"Libuipc/constitution__uid__auto__register_8h_source/#file-constitution_uid_auto_registerh","title":"File constitution_uid_auto_register.h","text":"<p>File List &gt; builtin &gt; constitution_uid_auto_register.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/builtin/uid_register.h&gt;\n#include &lt;uipc/common/list.h&gt;\n\nnamespace uipc::builtin\n{\nclass UIPC_CORE_API ConstitutionUIDAutoRegister\n{\n  public:\n    using Creator = std::function&lt;list&lt;UIDInfo&gt;()&gt;;\n    ConstitutionUIDAutoRegister(Creator creator) noexcept;\n\n  private:\n    friend class ConstitutionUIDCollection;\n    static list&lt;Creator&gt;&amp; creators() noexcept;\n};\n}  // namespace uipc::builtin\n\n#define REGISTER_CONSTITUTION_UIDS_INTERNAL(counter)                                                  \\\n    namespace auto_register                                                                           \\\n    {                                                                                                 \\\n        static ::uipc::list&lt;::uipc::builtin::UIDInfo&gt; ConstitutionUIDAutoRegisterFunction##counter(); \\\n        static ::uipc::builtin::ConstitutionUIDAutoRegister ConstitutionUIDAutoRegister##counter{     \\\n            ConstitutionUIDAutoRegisterFunction##counter};                                            \\\n    }                                                                                                 \\\n    static ::uipc::list&lt;::uipc::builtin::UIDInfo&gt; auto_register::ConstitutionUIDAutoRegisterFunction##counter()\n\n#define REGISTER_CONSTITUTION_UIDS(...)                                        \\\n    REGISTER_CONSTITUTION_UIDS_INTERNAL(__COUNTER__)\n</code></pre>"},{"location":"Libuipc/constitution__uid__collection_8h/","title":"File constitution_uid_collection.h","text":""},{"location":"Libuipc/constitution__uid__collection_8h/#file-constitution_uid_collectionh","title":"File constitution_uid_collection.h","text":"<p>FileList &gt; builtin &gt; constitution_uid_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/builtin/uid_register.h&gt;</code></li> <li><code>#include &lt;uipc/common/list.h&gt;</code></li> </ul>"},{"location":"Libuipc/constitution__uid__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin"},{"location":"Libuipc/constitution__uid__collection_8h/#classes","title":"Classes","text":"Type Name class ConstitutionUIDCollection <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/constitution_uid_collection.h</code></p>"},{"location":"Libuipc/constitution__uid__collection_8h_source/","title":"File constitution_uid_collection.h","text":""},{"location":"Libuipc/constitution__uid__collection_8h_source/#file-constitution_uid_collectionh","title":"File constitution_uid_collection.h","text":"<p>File List &gt; builtin &gt; constitution_uid_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/builtin/uid_register.h&gt;\n#include &lt;uipc/common/list.h&gt;\n\nnamespace uipc::builtin\n{\nclass UIPC_CORE_API ConstitutionUIDCollection : public details::UIDRegister\n{\n  public:\n    static const ConstitutionUIDCollection&amp; instance() noexcept;\n  private:\n    friend class ConstitutionUIDAutoRegister;\n    ConstitutionUIDCollection();\n};\n}  // namespace uipc::builtin\n</code></pre>"},{"location":"Libuipc/factory__keyword_8h/","title":"File factory_keyword.h","text":""},{"location":"Libuipc/factory__keyword_8h/#file-factory_keywordh","title":"File factory_keyword.h","text":"<p>FileList &gt; builtin &gt; factory_keyword.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> </ul>"},{"location":"Libuipc/factory__keyword_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/factory_keyword.h</code></p>"},{"location":"Libuipc/factory__keyword_8h_source/","title":"File factory_keyword.h","text":""},{"location":"Libuipc/factory__keyword_8h_source/#file-factory_keywordh","title":"File factory_keyword.h","text":"<p>File List &gt; builtin &gt; factory_keyword.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n\nnamespace uipc::builtin\n{\nconstexpr std::string_view __meta__ = \"__meta__\";\nconstexpr std::string_view __data__ = \"__data__\";\n}\n</code></pre>"},{"location":"Libuipc/geometry__type_8h/","title":"File geometry_type.h","text":""},{"location":"Libuipc/geometry__type_8h/#file-geometry_typeh","title":"File geometry_type.h","text":"<p>FileList &gt; builtin &gt; geometry_type.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> </ul>"},{"location":"Libuipc/geometry__type_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/geometry_type.h</code></p>"},{"location":"Libuipc/geometry__type_8h_source/","title":"File geometry_type.h","text":""},{"location":"Libuipc/geometry__type_8h_source/#file-geometry_typeh","title":"File geometry_type.h","text":"<p>File List &gt; builtin &gt; geometry_type.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n\nnamespace uipc::builtin\n{\nconstexpr std::string_view Geometry = \"Geometry\";\nconstexpr std::string_view AbstractSimplicialComplex = \"AbstractSimplicialComplex\";\nconstexpr std::string_view SimplicialComplex = \"SimplicialComplex\";\nconstexpr std::string_view ImplicitGeometry  = \"ImplicitGeometry\";\n}  // namespace uipc::builtin\n</code></pre>"},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/","title":"File implicit_geometry_uid_auto_register.h","text":""},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/#file-implicit_geometry_uid_auto_registerh","title":"File implicit_geometry_uid_auto_register.h","text":"<p>FileList &gt; builtin &gt; implicit_geometry_uid_auto_register.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/builtin/uid_register.h&gt;</code></li> <li><code>#include &lt;uipc/common/list.h&gt;</code></li> </ul>"},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin"},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/#classes","title":"Classes","text":"Type Name class ImplicitGeometryUIDAutoRegister"},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/#macros","title":"Macros","text":"Type Name define REGISTER_IMPLICIT_GEOMETRY_UIDS (...) <code>REGISTER\\_IMPLICIT\\_GEOMETRY\\_UIDS\\_INTERNAL(\\_\\_COUNTER\\_\\_)</code>Register ImplicitGeometryUIDs. define REGISTER_IMPLICIT_GEOMETRY_UIDS_INTERNAL (counter) <code>/* multi line expression */</code>"},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/#define-register_implicit_geometry_uids","title":"define REGISTER_IMPLICIT_GEOMETRY_UIDS","text":"<p>Register ImplicitGeometryUIDs. </p><pre><code>#define REGISTER_IMPLICIT_GEOMETRY_UIDS (\n    ...\n) `REGISTER_IMPLICIT_GEOMETRY_UIDS_INTERNAL(__COUNTER__)`\n</code></pre>"},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h/#define-register_implicit_geometry_uids_internal","title":"define REGISTER_IMPLICIT_GEOMETRY_UIDS_INTERNAL","text":"<pre><code>#define REGISTER_IMPLICIT_GEOMETRY_UIDS_INTERNAL (\n    counter\n) `/* multi line expression */`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/implicit_geometry_uid_auto_register.h</code></p>"},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h_source/","title":"File implicit_geometry_uid_auto_register.h","text":""},{"location":"Libuipc/implicit__geometry__uid__auto__register_8h_source/#file-implicit_geometry_uid_auto_registerh","title":"File implicit_geometry_uid_auto_register.h","text":"<p>File List &gt; builtin &gt; implicit_geometry_uid_auto_register.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/builtin/uid_register.h&gt;\n#include &lt;uipc/common/list.h&gt;\n\nnamespace uipc::builtin\n{\nclass UIPC_CORE_API ImplicitGeometryUIDAutoRegister\n{\n  public:\n    using Creator = std::function&lt;list&lt;UIDInfo&gt;()&gt;;\n    ImplicitGeometryUIDAutoRegister(Creator creator) noexcept;\n\n  private:\n    friend class ImplicitGeometryUIDCollection;\n    static list&lt;Creator&gt;&amp; creators() noexcept;\n};\n}  // namespace uipc::builtin\n\n#define REGISTER_IMPLICIT_GEOMETRY_UIDS_INTERNAL(counter)                                                 \\\n    namespace auto_register                                                                               \\\n    {                                                                                                     \\\n        static ::uipc::list&lt;::uipc::builtin::UIDInfo&gt; ImplicitGeometryUIDAutoRegisterFunction##counter(); \\\n        static ::uipc::builtin::ImplicitGeometryUIDAutoRegister ImplicitGeometryUIDAutoRegister##counter{ \\\n            ImplicitGeometryUIDAutoRegisterFunction##counter};                                            \\\n    }                                                                                                     \\\n    static ::uipc::list&lt;::uipc::builtin::UIDInfo&gt; auto_register::ImplicitGeometryUIDAutoRegisterFunction##counter()\n\n#define REGISTER_IMPLICIT_GEOMETRY_UIDS(...)                                   \\\n    REGISTER_IMPLICIT_GEOMETRY_UIDS_INTERNAL(__COUNTER__)\n\n//\n</code></pre>"},{"location":"Libuipc/implicit__geometry__uid__collection_8h/","title":"File implicit_geometry_uid_collection.h","text":""},{"location":"Libuipc/implicit__geometry__uid__collection_8h/#file-implicit_geometry_uid_collectionh","title":"File implicit_geometry_uid_collection.h","text":"<p>FileList &gt; builtin &gt; implicit_geometry_uid_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/builtin/uid_register.h&gt;</code></li> </ul>"},{"location":"Libuipc/implicit__geometry__uid__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin"},{"location":"Libuipc/implicit__geometry__uid__collection_8h/#classes","title":"Classes","text":"Type Name class ImplicitGeometryUIDCollection <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/implicit_geometry_uid_collection.h</code></p>"},{"location":"Libuipc/implicit__geometry__uid__collection_8h_source/","title":"File implicit_geometry_uid_collection.h","text":""},{"location":"Libuipc/implicit__geometry__uid__collection_8h_source/#file-implicit_geometry_uid_collectionh","title":"File implicit_geometry_uid_collection.h","text":"<p>File List &gt; builtin &gt; implicit_geometry_uid_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/builtin/uid_register.h&gt;\n\n\nnamespace uipc::builtin\n{\nclass UIPC_CORE_API ImplicitGeometryUIDCollection : public details::UIDRegister\n{\n  public:\n    static const ImplicitGeometryUIDCollection&amp; instance() noexcept;\n\n  private:\n    ImplicitGeometryUIDCollection();\n};\n}  // namespace uipc::builtin\n</code></pre>"},{"location":"Libuipc/dir_4db2109fccbcdb4025718aaa828a1196/","title":"Dir include/uipc/builtin/details","text":""},{"location":"Libuipc/dir_4db2109fccbcdb4025718aaa828a1196/#dir-includeuipcbuiltindetails","title":"Dir include/uipc/builtin/details","text":"<p>FileList &gt; builtin &gt; details</p>"},{"location":"Libuipc/dir_4db2109fccbcdb4025718aaa828a1196/#files","title":"Files","text":"Type Name file attribute_name.h This file records all the built-in attribute names in the libuipc specification. file backend_name.h This file records all the built-in backend names in the libuipc specification. <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/details/</code></p>"},{"location":"Libuipc/details_2attribute__name_8h/","title":"File attribute_name.h","text":""},{"location":"Libuipc/details_2attribute__name_8h/#file-attribute_nameh","title":"File attribute_name.h","text":"<p>FileList &gt; builtin &gt; details &gt; attribute_name.h</p> <p>Go to the source code of this file</p> <p>This file records all the built-in attribute names in the libuipc specification. More...</p>"},{"location":"Libuipc/details_2attribute__name_8h/#detailed-description","title":"Detailed Description","text":"<p>Programmers can define their own UIPC_BUILTIN_ATTRIBUTE macro outside this file, and include this file to get the built-in attribute names.</p> <pre><code>#define UIPC_BUILTIN_ATTRIBUTE(name) constexpr std::string_view name = #name\n#include &lt;pyuipc/builtin/attribute_name.h&gt;\n#undef UIPC_BUILTIN_ATTRIBUTE\n</code></pre> <p>Author:</p> <p>MuGdxy </p> <p>Date:</p> <p>September 2024 </p> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/details/attribute_name.h</code></p>"},{"location":"Libuipc/details_2attribute__name_8h_source/","title":"File attribute_name.h","text":""},{"location":"Libuipc/details_2attribute__name_8h_source/#file-attribute_nameh","title":"File attribute_name.h","text":"<p>File List &gt; builtin &gt; details &gt; attribute_name.h</p> <p>Go to the documentation of this file</p> <pre><code>// Don't put #pragma once here, this file may be included multiple times.\n\n/*****************************************************************/ \n\n#ifdef UIPC_BUILTIN_ATTRIBUTE\nUIPC_BUILTIN_ATTRIBUTE(topo);\n\nUIPC_BUILTIN_ATTRIBUTE(position);\n\nUIPC_BUILTIN_ATTRIBUTE(velocity);\n\nUIPC_BUILTIN_ATTRIBUTE(aim_position);\n\nUIPC_BUILTIN_ATTRIBUTE(transform);\n\nUIPC_BUILTIN_ATTRIBUTE(aim_transform);\n\n\nUIPC_BUILTIN_ATTRIBUTE(contact_element_id);\n\nUIPC_BUILTIN_ATTRIBUTE(constitution_uid);\n\nUIPC_BUILTIN_ATTRIBUTE(extra_constitution_uids);\n\nUIPC_BUILTIN_ATTRIBUTE(constraint_uid);\n\nUIPC_BUILTIN_ATTRIBUTE(implicit_geometry_uid);\n\nUIPC_BUILTIN_ATTRIBUTE(is_surf);\n\nUIPC_BUILTIN_ATTRIBUTE(is_facet);\n\nUIPC_BUILTIN_ATTRIBUTE(orient);\n\nUIPC_BUILTIN_ATTRIBUTE(parent_id);\n\nUIPC_BUILTIN_ATTRIBUTE(is_fixed);\n\nUIPC_BUILTIN_ATTRIBUTE(is_constrained);\n\nUIPC_BUILTIN_ATTRIBUTE(is_dynamic);\n\nUIPC_BUILTIN_ATTRIBUTE(volume);\n\nUIPC_BUILTIN_ATTRIBUTE(mass_density);\n\nUIPC_BUILTIN_ATTRIBUTE(gravity);\n\nUIPC_BUILTIN_ATTRIBUTE(thickness);\n\nUIPC_BUILTIN_ATTRIBUTE(backend_fem_vertex_offset);\n\nUIPC_BUILTIN_ATTRIBUTE(backend_abd_body_offset);\n\nUIPC_BUILTIN_ATTRIBUTE(dof_offset);\n\nUIPC_BUILTIN_ATTRIBUTE(dof_count);\n#endif\n</code></pre>"},{"location":"Libuipc/backend__name_8h/","title":"File backend_name.h","text":""},{"location":"Libuipc/backend__name_8h/#file-backend_nameh","title":"File backend_name.h","text":"<p>FileList &gt; builtin &gt; details &gt; backend_name.h</p> <p>Go to the source code of this file</p> <p>This file records all the built-in backend names in the libuipc specification. More...</p>"},{"location":"Libuipc/backend__name_8h/#detailed-description","title":"Detailed Description","text":"<p>Programmers can define their own UIPC_BUILTIN_BACKEND macro outside this file, and include this file to get the built-in backend names.</p> <pre><code>#define UIPC_BUILTIN_BACKEND(name) constexpr std::string_view name = #name\n#include &lt;pyuipc/builtin/backend_name.h&gt;\n#undef UIPC_BUILTIN_BACKEND\n</code></pre> <p>Author:</p> <p>MuGdxy </p> <p>Date:</p> <p>September 2024 </p> <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/details/backend_name.h</code></p>"},{"location":"Libuipc/backend__name_8h_source/","title":"File backend_name.h","text":""},{"location":"Libuipc/backend__name_8h_source/#file-backend_nameh","title":"File backend_name.h","text":"<p>File List &gt; builtin &gt; details &gt; backend_name.h</p> <p>Go to the documentation of this file</p> <pre><code>// Don't put #pragma once here, this file may be included multiple times.\n\n/*****************************************************************/ \n\n#ifdef UIPC_BUILTIN_BACKEND\nUIPC_BUILTIN_BACKEND(none);\nUIPC_BUILTIN_BACKEND(cuda);\n#endif\n</code></pre>"},{"location":"Libuipc/uid__info_8h/","title":"File uid_info.h","text":""},{"location":"Libuipc/uid__info_8h/#file-uid_infoh","title":"File uid_info.h","text":"<p>FileList &gt; builtin &gt; uid_info.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/string.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> </ul>"},{"location":"Libuipc/uid__info_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin"},{"location":"Libuipc/uid__info_8h/#classes","title":"Classes","text":"Type Name struct UIDInfo <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/uid_info.h</code></p>"},{"location":"Libuipc/uid__info_8h_source/","title":"File uid_info.h","text":""},{"location":"Libuipc/uid__info_8h_source/#file-uid_infoh","title":"File uid_info.h","text":"<p>File List &gt; builtin &gt; uid_info.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/common/json.h&gt;\n\nnamespace uipc::builtin\n{\nstruct UIPC_CORE_API UIDInfo\n{\n    static constexpr U64 OfficialBuiltinUIDStart = 0;\n    static constexpr U64 UserDefinedUIDStart     = 1ull &lt;&lt; 32;\n\n    U64    uid;\n    string name;\n    string type;\n    string author;\n    string email;\n    string website;\n    string description;\n    Json   extras;\n\n    bool is_official_builtin_uid(U64 uid) const noexcept;\n\n    bool is_user_defined_uid(U64 uid) const noexcept;\n\n    Json to_json() const noexcept;\n};\n}  // namespace uipc::builtin\n</code></pre>"},{"location":"Libuipc/uid__register_8h/","title":"File uid_register.h","text":""},{"location":"Libuipc/uid__register_8h/#file-uid_registerh","title":"File uid_register.h","text":"<p>FileList &gt; builtin &gt; uid_register.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/builtin/uid_info.h&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> </ul>"},{"location":"Libuipc/uid__register_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace builtin namespace details"},{"location":"Libuipc/uid__register_8h/#classes","title":"Classes","text":"Type Name class UIDRegister <p>The documentation for this class was generated from the following file <code>include/uipc/builtin/uid_register.h</code></p>"},{"location":"Libuipc/uid__register_8h_source/","title":"File uid_register.h","text":""},{"location":"Libuipc/uid__register_8h_source/#file-uid_registerh","title":"File uid_register.h","text":"<p>File List &gt; builtin &gt; uid_register.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/builtin/uid_info.h&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n\nnamespace uipc::builtin::details\n{\nclass UIPC_CORE_API UIDRegister\n{\n  public:\n    const UIDInfo&amp; find(U64 uid) const;\n    bool           exists(U64 uid) const;\n    Json           to_json() const noexcept;\n  private:\n    unordered_map&lt;U64, UIDInfo&gt; m_uid_to_info;\n\n  protected:\n    void create(const UIDInfo&amp; info);\n};\n}  // namespace uipc::builtin::details\n</code></pre>"},{"location":"Libuipc/dir_fe04c8fb910be76d82cd33e795163b9b/","title":"Dir include/uipc/common","text":""},{"location":"Libuipc/dir_fe04c8fb910be76d82cd33e795163b9b/#dir-includeuipccommon","title":"Dir include/uipc/common","text":"<p>FileList &gt; common</p>"},{"location":"Libuipc/dir_fe04c8fb910be76d82cd33e795163b9b/#files","title":"Files","text":"Type Name file allocator.h file buffer_info.h file config.h file dllexport.h file enumerate.h file exception.h file fmt_eigen.h file format.h file json.h file json_eigen.h file list.h file log.h file log_pattern_guard.h file macro.h file map.h file range.h file readable_type_name.h file set.h file smart_pointer.h file span.h file span_as_eigen.h file stack.h file string.h file timer.h file type_define.h file type_traits.h file uipc.h file unit.h file unordered_map.h file vector.h file zip.h"},{"location":"Libuipc/dir_fe04c8fb910be76d82cd33e795163b9b/#directories","title":"Directories","text":"Type Name dir algorithm <p>The documentation for this class was generated from the following file <code>include/uipc/common/</code></p>"},{"location":"Libuipc/allocator_8h/","title":"File allocator.h","text":""},{"location":"Libuipc/allocator_8h/#file-allocatorh","title":"File allocator.h","text":"<p>FileList &gt; common &gt; allocator.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory_resource&gt;</code></li> </ul>"},{"location":"Libuipc/allocator_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/allocator.h</code></p>"},{"location":"Libuipc/allocator_8h_source/","title":"File allocator.h","text":""},{"location":"Libuipc/allocator_8h_source/#file-allocatorh","title":"File allocator.h","text":"<p>File List &gt; common &gt; allocator.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;memory_resource&gt;\n\nnamespace uipc\n{\ntemplate &lt;typename T&gt;\nusing Allocator = std::pmr::polymorphic_allocator&lt;T&gt;;\n}\n</code></pre>"},{"location":"Libuipc/buffer__info_8h/","title":"File buffer_info.h","text":""},{"location":"Libuipc/buffer__info_8h/#file-buffer_infoh","title":"File buffer_info.h","text":"<p>FileList &gt; common &gt; buffer_info.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/vector.h&gt;</code></li> </ul>"},{"location":"Libuipc/buffer__info_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc"},{"location":"Libuipc/buffer__info_8h/#classes","title":"Classes","text":"Type Name class BufferInfo <p>The documentation for this class was generated from the following file <code>include/uipc/common/buffer_info.h</code></p>"},{"location":"Libuipc/buffer__info_8h_source/","title":"File buffer_info.h","text":""},{"location":"Libuipc/buffer__info_8h_source/#file-buffer_infoh","title":"File buffer_info.h","text":"<p>File List &gt; common &gt; buffer_info.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/vector.h&gt;\nnamespace uipc\n{\nclass BufferInfo\n{\n  public:\n    void*         data;\n    size_t        itemsize;\n    vector&lt;int64_t&gt; shape;\n    vector&lt;int64_t&gt; strides;\n};\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/config_8h/","title":"File config.h","text":""},{"location":"Libuipc/config_8h/#file-configh","title":"File config.h","text":"<p>FileList &gt; common &gt; config.h</p> <p>Go to the source code of this file</p>"},{"location":"Libuipc/config_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/config.h</code></p>"},{"location":"Libuipc/config_8h_source/","title":"File config.h","text":""},{"location":"Libuipc/config_8h_source/#file-configh","title":"File config.h","text":"<p>File List &gt; common &gt; config.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\nnamespace uipc\n{\n#if UIPC_RUNTIME_CHECK\nconstexpr bool RUNTIME_CHECK = true;\n#else\nconstexpr bool RUNTIME_CHECK = false;\n#endif\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/dllexport_8h/","title":"File dllexport.h","text":""},{"location":"Libuipc/dllexport_8h/#file-dllexporth","title":"File dllexport.h","text":"<p>FileList &gt; common &gt; dllexport.h</p> <p>Go to the source code of this file</p>"},{"location":"Libuipc/dllexport_8h/#macros","title":"Macros","text":"Type Name define UIPC_BACKEND_API define UIPC_CONSTITUTION_API define UIPC_CORE_API define UIPC_EXPORT_API <code>UIPC\\_EXTERN\\_C \\_\\_attribute\\_\\_((visibility(\"default\")))</code> define UIPC_EXTERN_C define UIPC_FORCE_INLINE <code>\\_\\_attribute\\_\\_((always\\_inline, hot)) inline</code> define UIPC_GEOMETRY_API define UIPC_IMPORT_API <code>UIPC\\_EXTERN\\_C</code> define UIPC_IO_API define UIPC_NEVER_INLINE <code>\\_\\_attribute\\_\\_((noinline))</code> define UIPC_NOEXCEPT"},{"location":"Libuipc/dllexport_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/dllexport_8h/#define-uipc_backend_api","title":"define UIPC_BACKEND_API","text":"<pre><code>#define UIPC_BACKEND_API \n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_constitution_api","title":"define UIPC_CONSTITUTION_API","text":"<pre><code>#define UIPC_CONSTITUTION_API \n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_core_api","title":"define UIPC_CORE_API","text":"<pre><code>#define UIPC_CORE_API \n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_export_api","title":"define UIPC_EXPORT_API","text":"<pre><code>#define UIPC_EXPORT_API `UIPC_EXTERN_C __attribute__((visibility(\"default\")))`\n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_extern_c","title":"define UIPC_EXTERN_C","text":"<pre><code>#define UIPC_EXTERN_C \n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_force_inline","title":"define UIPC_FORCE_INLINE","text":"<pre><code>#define UIPC_FORCE_INLINE `__attribute__((always_inline, hot)) inline`\n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_geometry_api","title":"define UIPC_GEOMETRY_API","text":"<pre><code>#define UIPC_GEOMETRY_API \n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_import_api","title":"define UIPC_IMPORT_API","text":"<pre><code>#define UIPC_IMPORT_API `UIPC_EXTERN_C`\n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_io_api","title":"define UIPC_IO_API","text":"<pre><code>#define UIPC_IO_API \n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_never_inline","title":"define UIPC_NEVER_INLINE","text":"<pre><code>#define UIPC_NEVER_INLINE `__attribute__((noinline))`\n</code></pre>"},{"location":"Libuipc/dllexport_8h/#define-uipc_noexcept","title":"define UIPC_NOEXCEPT","text":"<pre><code>#define UIPC_NOEXCEPT \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/dllexport.h</code></p>"},{"location":"Libuipc/dllexport_8h_source/","title":"File dllexport.h","text":""},{"location":"Libuipc/dllexport_8h_source/#file-dllexporth","title":"File dllexport.h","text":"<p>File List &gt; common &gt; dllexport.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#ifdef __cplusplus\n#define UIPC_EXTERN_C extern \"C\"\n#define UIPC_NOEXCEPT noexcept\n#else\n#define UIPC_EXTERN_C\n#define UIPC_NOEXCEPT\n#endif\n\n#ifdef _MSC_VER\n#define UIPC_FORCE_INLINE inline\n#define UIPC_NEVER_INLINE __declspec(noinline)\n#define UIPC_EXPORT_API UIPC_EXTERN_C __declspec(dllexport)\n#define UIPC_IMPORT_API UIPC_EXTERN_C __declspec(dllimport)\n#else\n#define UIPC_FORCE_INLINE __attribute__((always_inline, hot)) inline\n#define UIPC_NEVER_INLINE __attribute__((noinline))\n#define UIPC_EXPORT_API UIPC_EXTERN_C __attribute__((visibility(\"default\")))\n#define UIPC_IMPORT_API UIPC_EXTERN_C\n#endif\n\n#ifdef _MSC_VER\n\n// CORE\n#ifdef UIPC_CORE_EXPORT_DLL\n#define UIPC_CORE_API __declspec(dllexport)\n#else\n#define UIPC_CORE_API __declspec(dllimport)\n#endif\n// GEOMETRY\n#ifdef UIPC_GEOMETRY_EXPORT_DLL\n#define UIPC_GEOMETRY_API __declspec(dllexport)\n#else\n#define UIPC_GEOMETRY_API __declspec(dllimport)\n#endif\n// CONSTITUTION\n#ifdef UIPC_CONSTITUTION_EXPORT_DLL\n#define UIPC_CONSTITUTION_API __declspec(dllexport)\n#else\n#define UIPC_CONSTITUTION_API __declspec(dllimport)\n#endif\n// IO\n#ifdef UIPC_IO_EXPORT_DLL\n#define UIPC_IO_API __declspec(dllexport)\n#else\n#define UIPC_IO_API __declspec(dllimport)\n#endif\n// BACKEND\n#ifdef UIPC_BACKEND_EXPORT_DLL\n#define UIPC_BACKEND_API __declspec(dllexport)\n#else\n#define UIPC_BACKEND_API __declspec(dllimport)\n#endif\n\n#else\n\n// CORE\n#define UIPC_CORE_API\n// GEOMETRY\n#define UIPC_GEOMETRY_API\n// CONSTITUTION\n#define UIPC_CONSTITUTION_API\n// IO\n#define UIPC_IO_API\n// BACKEND\n#define UIPC_BACKEND_API\n\n#endif\n</code></pre>"},{"location":"Libuipc/enumerate_8h/","title":"File enumerate.h","text":""},{"location":"Libuipc/enumerate_8h/#file-enumerateh","title":"File enumerate.h","text":"<p>FileList &gt; common &gt; enumerate.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cppitertools/enumerate.hpp&gt;</code></li> </ul>"},{"location":"Libuipc/enumerate_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/enumerate.h</code></p>"},{"location":"Libuipc/enumerate_8h_source/","title":"File enumerate.h","text":""},{"location":"Libuipc/enumerate_8h_source/#file-enumerateh","title":"File enumerate.h","text":"<p>File List &gt; common &gt; enumerate.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;cppitertools/enumerate.hpp&gt;\n\nnamespace uipc\n{\nusing iter::enumerate;\n}\n</code></pre>"},{"location":"Libuipc/exception_8h/","title":"File exception.h","text":""},{"location":"Libuipc/exception_8h/#file-exceptionh","title":"File exception.h","text":"<p>FileList &gt; common &gt; exception.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/string.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;exception&gt;</code></li> </ul>"},{"location":"Libuipc/exception_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc"},{"location":"Libuipc/exception_8h/#classes","title":"Classes","text":"Type Name class Exception <p>The documentation for this class was generated from the following file <code>include/uipc/common/exception.h</code></p>"},{"location":"Libuipc/exception_8h_source/","title":"File exception.h","text":""},{"location":"Libuipc/exception_8h_source/#file-exceptionh","title":"File exception.h","text":"<p>File List &gt; common &gt; exception.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;exception&gt;\n\nnamespace uipc\n{\nclass UIPC_CORE_API Exception : public std::exception\n{\n  public:\n    Exception(const string&amp; msg);\n\n    virtual const char* what() const noexcept override;\n\n  private:\n    string m_msg;\n};\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/fmt__eigen_8h/","title":"File fmt_eigen.h","text":""},{"location":"Libuipc/fmt__eigen_8h/#file-fmt_eigenh","title":"File fmt_eigen.h","text":"<p>FileList &gt; common &gt; fmt_eigen.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;Eigen/Core&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/common/fmt_eigen.h</code></p>"},{"location":"Libuipc/fmt__eigen_8h_source/","title":"File fmt_eigen.h","text":""},{"location":"Libuipc/fmt__eigen_8h_source/#file-fmt_eigenh","title":"File fmt_eigen.h","text":"<p>File List &gt; common &gt; fmt_eigen.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n//#include &lt;fmt/ostream.h&gt;\n#include &lt;Eigen/Core&gt;\n\n//template &lt;typename T&gt;\n//    requires std::derived_from&lt;T, Eigen::DenseBase&lt;T&gt;&gt;\n//struct fmt::formatter&lt;T&gt; : ostream_formatter\n//{\n//};\n</code></pre>"},{"location":"Libuipc/format_8h/","title":"File format.h","text":""},{"location":"Libuipc/format_8h/#file-formath","title":"File format.h","text":"<p>FileList &gt; common &gt; format.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;fmt/format.h&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/common/format.h</code></p>"},{"location":"Libuipc/format_8h_source/","title":"File format.h","text":""},{"location":"Libuipc/format_8h_source/#file-formath","title":"File format.h","text":"<p>File List &gt; common &gt; format.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;fmt/format.h&gt;\n// #include &lt;format&gt;\n</code></pre>"},{"location":"Libuipc/dir_c185d05b92bc8b629594f315306e85d1/","title":"Dir include/uipc/common/algorithm","text":""},{"location":"Libuipc/dir_c185d05b92bc8b629594f315306e85d1/#dir-includeuipccommonalgorithm","title":"Dir include/uipc/common/algorithm","text":"<p>FileList &gt; algorithm</p>"},{"location":"Libuipc/dir_c185d05b92bc8b629594f315306e85d1/#files","title":"Files","text":"Type Name file run_length_encode.h <p>The documentation for this class was generated from the following file <code>include/uipc/common/algorithm/</code></p>"},{"location":"Libuipc/run__length__encode_8h/","title":"File run_length_encode.h","text":""},{"location":"Libuipc/run__length__encode_8h/#file-run_length_encodeh","title":"File run_length_encode.h","text":"<p>FileList &gt; algorithm &gt; run_length_encode.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;concepts&gt;</code></li> <li><code>#include &lt;iterator&gt;</code></li> </ul>"},{"location":"Libuipc/run__length__encode_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/algorithm/run_length_encode.h</code></p>"},{"location":"Libuipc/run__length__encode_8h_source/","title":"File run_length_encode.h","text":""},{"location":"Libuipc/run__length__encode_8h_source/#file-run_length_encodeh","title":"File run_length_encode.h","text":"<p>File List &gt; algorithm &gt; run_length_encode.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;concepts&gt;\n#include &lt;iterator&gt;\n\nnamespace uipc\n{\ntemplate &lt;typename InputIt, typename OutputIt, typename OutputCountIt, typename Pred&gt;\n    requires requires(InputIt in_first, InputIt in_last, OutputIt out_unique, OutputCountIt out_counts, Pred p) {\n        // able to assign value from input to output\n        *out_unique = *in_first;\n        // out_counts must be a iterator to integral type\n        std::integral&lt;typename std::iterator_traits&lt;OutputCountIt&gt;::value_type&gt;;\n        // able to assign value to out_counts\n        *out_counts = 0;\n        // able to compare two values\n        {\n            p(*in_first, *in_first)\n        } -&gt; std::convertible_to&lt;bool&gt;;\n    }\nstd::size_t run_length_encode(InputIt       in_first,\n                              InputIt       in_last,\n                              OutputIt      out_unique,\n                              OutputCountIt out_counts,\n                              Pred&amp;&amp;        pred)\n{\n    if(in_first == in_last)  // empty input\n    {\n        return 0ull;\n    }\n\n    auto in_current        = in_first;\n    auto out_current       = out_unique;\n    auto out_count_current = out_counts;\n\n    auto        current_value = *in_current;\n    std::size_t current_count = 1;\n    std::size_t unique_count  = 1;\n\n    for(++in_current; in_current != in_last; ++in_current)\n    {\n        if(pred(*in_current, current_value))\n        {\n            ++current_count;\n        }\n        else\n        {\n            *out_current       = current_value;\n            *out_count_current = current_count;\n\n            ++out_current;\n            ++out_count_current;\n\n            current_value = *in_current;\n            current_count = 1;\n            ++unique_count;\n        }\n    }\n\n    *out_current       = current_value;\n    *out_count_current = current_count;\n\n    return unique_count;\n}\n\ntemplate &lt;typename InputIt, typename OutputIt, typename OutputCountIt&gt;\nauto run_length_encode(InputIt in_first, InputIt in_last, OutputIt out_unique, OutputCountIt out_counts)\n{\n    return run_length_encode(in_first, in_last, out_unique, out_counts, std::equal_to&lt;&gt;{});\n}\n\n\ntemplate &lt;typename RandIt, typename OffsetCountIt, typename Pred&gt;\nsize_t encode_offset_count(RandIt first, RandIt last, OffsetCountIt offsets, OffsetCountIt counts, Pred&amp;&amp; pred)\n{\n    if(first == last)\n    {\n        return 0;\n    }\n\n    auto current        = first;\n    auto offset_current = offsets;\n    auto count_current  = counts;\n\n    auto        current_value = *current;\n    std::size_t current_count = 1;\n    std::size_t unique_count  = 1;\n    *offset_current           = 0;\n\n    for(++current; current != last; ++current)\n    {\n        if(pred(*current, current_value))\n        {\n            ++current_count;\n        }\n        else\n        {\n            *offset_current = current - first;\n            *count_current  = current_count;\n\n            ++offset_current;\n            ++count_current;\n\n            current_value = *current;\n            current_count = 1;\n            ++unique_count;\n        }\n    }\n\n    *count_current = current_count;\n    return unique_count;\n}\n\ntemplate &lt;typename RandIt, typename OffsetCountIt&gt;\nauto encode_offset_count(RandIt first, RandIt last, OffsetCountIt offset, OffsetCountIt count)\n{\n    return encode_offset_count(first, last, offset, count, std::equal_to&lt;&gt;{});\n}\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/json_8h/","title":"File json.h","text":""},{"location":"Libuipc/json_8h/#file-jsonh","title":"File json.h","text":"<p>FileList &gt; common &gt; json.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;nlohmann/json.hpp&gt;</code></li> </ul>"},{"location":"Libuipc/json_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/json.h</code></p>"},{"location":"Libuipc/json_8h_source/","title":"File json.h","text":""},{"location":"Libuipc/json_8h_source/#file-jsonh","title":"File json.h","text":"<p>File List &gt; common &gt; json.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;nlohmann/json.hpp&gt;\n\nnamespace uipc\n{\nusing Json = nlohmann::json;\n}\n</code></pre>"},{"location":"Libuipc/json__eigen_8h/","title":"File json_eigen.h","text":""},{"location":"Libuipc/json__eigen_8h/#file-json_eigenh","title":"File json_eigen.h","text":"<p>FileList &gt; common &gt; json_eigen.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;nlohmann/adl_serializer.hpp&gt;</code></li> <li><code>#include &lt;Eigen/Core&gt;</code></li> <li><code>#include &lt;uipc/common/exception.h&gt;</code></li> <li><code>#include \"details/eigen_json.inl\"</code></li> </ul>"},{"location":"Libuipc/json__eigen_8h/#namespaces","title":"Namespaces","text":"Type Name namespace nlohmann namespace uipc"},{"location":"Libuipc/json__eigen_8h/#classes","title":"Classes","text":"Type Name struct adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; &lt;typename Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt; class JsonIOError <p>The documentation for this class was generated from the following file <code>include/uipc/common/json_eigen.h</code></p>"},{"location":"Libuipc/json__eigen_8h_source/","title":"File json_eigen.h","text":""},{"location":"Libuipc/json__eigen_8h_source/#file-json_eigenh","title":"File json_eigen.h","text":"<p>File List &gt; common &gt; json_eigen.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;nlohmann/adl_serializer.hpp&gt;\n#include &lt;Eigen/Core&gt;\n#include &lt;uipc/common/exception.h&gt;\n\nnamespace uipc\n{\nclass JsonIOError : public Exception\n{\n  public:\n    using Exception::Exception;\n};\n}  // namespace uipc\n\nnamespace nlohmann\n{\ntemplate &lt;typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols&gt;\nstruct adl_serializer&lt;Eigen::Matrix&lt;Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt;&gt;\n{\n    static void to_json(json&amp; j,\n                        const Eigen::Matrix&lt;Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt;&amp; m);\n\n    static void from_json(const json&amp; j,\n                          Eigen::Matrix&lt;Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt;&amp; m);\n};\n}  // namespace nlohmann\n\n#include \"details/eigen_json.inl\"\n</code></pre>"},{"location":"Libuipc/list_8h/","title":"File list.h","text":""},{"location":"Libuipc/list_8h/#file-listh","title":"File list.h","text":"<p>FileList &gt; common &gt; list.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory_resource&gt;</code></li> <li><code>#include &lt;list&gt;</code></li> </ul>"},{"location":"Libuipc/list_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/list.h</code></p>"},{"location":"Libuipc/list_8h_source/","title":"File list.h","text":""},{"location":"Libuipc/list_8h_source/#file-listh","title":"File list.h","text":"<p>File List &gt; common &gt; list.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;memory_resource&gt;\n#include &lt;list&gt;\n\nnamespace uipc\n{\nusing std::pmr::list;\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/log_8h/","title":"File log.h","text":""},{"location":"Libuipc/log_8h/#file-logh","title":"File log.h","text":"<p>FileList &gt; common &gt; log.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;spdlog/spdlog.h&gt;</code></li> <li><code>#include &lt;uipc/common/string.h&gt;</code></li> <li><code>#include &lt;uipc/common/config.h&gt;</code></li> </ul>"},{"location":"Libuipc/log_8h/#macros","title":"Macros","text":"Type Name define UIPC_ASSERT (condition, ...) <code>/* multi line expression */</code> define UIPC_ERROR_WITH_LOCATION (...) <code>UIPC\\_LOG\\_WITH\\_LOCATION(spdlog::level::err, \\_\\_VA\\_ARGS\\_\\_)</code> define UIPC_INFO_WITH_LOCATION (...) <code>UIPC\\_LOG\\_WITH\\_LOCATION(spdlog::level::info, \\_\\_VA\\_ARGS\\_\\_)</code> define UIPC_LOG_WITH_LOCATION (level, ...) <code>/* multi line expression */</code> define UIPC_WARN_WITH_LOCATION (...) <code>UIPC\\_LOG\\_WITH\\_LOCATION(spdlog::level::warn, \\_\\_VA\\_ARGS\\_\\_)</code>"},{"location":"Libuipc/log_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/log_8h/#define-uipc_assert","title":"define UIPC_ASSERT","text":"<pre><code>#define UIPC_ASSERT (\n    condition,\n    ...\n) `/* multi line expression */`\n</code></pre>"},{"location":"Libuipc/log_8h/#define-uipc_error_with_location","title":"define UIPC_ERROR_WITH_LOCATION","text":"<pre><code>#define UIPC_ERROR_WITH_LOCATION (\n    ...\n) `UIPC_LOG_WITH_LOCATION(spdlog::level::err, __VA_ARGS__)`\n</code></pre>"},{"location":"Libuipc/log_8h/#define-uipc_info_with_location","title":"define UIPC_INFO_WITH_LOCATION","text":"<pre><code>#define UIPC_INFO_WITH_LOCATION (\n    ...\n) `UIPC_LOG_WITH_LOCATION(spdlog::level::info, __VA_ARGS__)`\n</code></pre>"},{"location":"Libuipc/log_8h/#define-uipc_log_with_location","title":"define UIPC_LOG_WITH_LOCATION","text":"<pre><code>#define UIPC_LOG_WITH_LOCATION (\n    level,\n    ...\n) `/* multi line expression */`\n</code></pre>"},{"location":"Libuipc/log_8h/#define-uipc_warn_with_location","title":"define UIPC_WARN_WITH_LOCATION","text":"<pre><code>#define UIPC_WARN_WITH_LOCATION (\n    ...\n) `UIPC_LOG_WITH_LOCATION(spdlog::level::warn, __VA_ARGS__)`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/log.h</code></p>"},{"location":"Libuipc/log_8h_source/","title":"File log.h","text":""},{"location":"Libuipc/log_8h_source/#file-logh","title":"File log.h","text":"<p>File List &gt; common &gt; log.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;spdlog/spdlog.h&gt;\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/common/config.h&gt;\n\n#define UIPC_LOG_WITH_LOCATION(level, ...)                                     \\\n    {                                                                          \\\n        ::uipc::string msg = ::fmt::format(__VA_ARGS__);                       \\\n        spdlog::log((level), \"{} {}({})\", msg, __FILE__, __LINE__);            \\\n    }\n\n#define UIPC_INFO_WITH_LOCATION(...)                                           \\\n    UIPC_LOG_WITH_LOCATION(spdlog::level::info, __VA_ARGS__)\n\n#define UIPC_WARN_WITH_LOCATION(...)                                           \\\n    UIPC_LOG_WITH_LOCATION(spdlog::level::warn, __VA_ARGS__)\n\n#define UIPC_ERROR_WITH_LOCATION(...)                                          \\\n    UIPC_LOG_WITH_LOCATION(spdlog::level::err, __VA_ARGS__)\n\n#define UIPC_ASSERT(condition, ...)                                                       \\\n    if constexpr(::uipc::RUNTIME_CHECK)                                                   \\\n    {                                                                                     \\\n        if(!(condition))                                                                  \\\n        {                                                                                 \\\n            ::uipc::string msg = ::fmt::format(__VA_ARGS__);                              \\\n            ::uipc::string assert_meg =                                                   \\\n                ::fmt::format(\"Assertion \" #condition \" failed. {}\", msg);                \\\n            spdlog::log(spdlog::level::err, \"{} {}({})\", assert_meg, __FILE__, __LINE__); \\\n            ::std::abort();                                                               \\\n        }                                                                                 \\\n    }\n</code></pre>"},{"location":"Libuipc/log__pattern__guard_8h/","title":"File log_pattern_guard.h","text":""},{"location":"Libuipc/log__pattern__guard_8h/#file-log_pattern_guardh","title":"File log_pattern_guard.h","text":"<p>FileList &gt; common &gt; log_pattern_guard.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;spdlog/spdlog.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> </ul>"},{"location":"Libuipc/log__pattern__guard_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc"},{"location":"Libuipc/log__pattern__guard_8h/#classes","title":"Classes","text":"Type Name class LogPatternGuard <p>The documentation for this class was generated from the following file <code>include/uipc/common/log_pattern_guard.h</code></p>"},{"location":"Libuipc/log__pattern__guard_8h_source/","title":"File log_pattern_guard.h","text":""},{"location":"Libuipc/log__pattern__guard_8h_source/#file-log_pattern_guardh","title":"File log_pattern_guard.h","text":"<p>File List &gt; common &gt; log_pattern_guard.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;spdlog/spdlog.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\nnamespace uipc\n{\nclass UIPC_CORE_API LogPatternGuard\n{\n  public:\n    LogPatternGuard(std::string_view pattern) noexcept;\n    ~LogPatternGuard() noexcept;\n};\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/common_2macro_8h/","title":"File macro.h","text":""},{"location":"Libuipc/common_2macro_8h/#file-macroh","title":"File macro.h","text":"<p>FileList &gt; common &gt; macro.h</p> <p>Go to the source code of this file</p>"},{"location":"Libuipc/common_2macro_8h/#macros","title":"Macros","text":"Type Name define UIPC_CONCATE (x, y) <code>x##y</code> define UIPC_NAME_WITH_ID (x) <code>UIPC\\_NAME\\_WITH\\_ID\\_IMPL(x, \\_\\_COUNTER\\_\\_)</code> define UIPC_NAME_WITH_ID_IMPL (x, ID) <code>UIPC\\_CONCATE(x, ID)</code> define UIPC_TO_STRING (x) <code>#x</code>"},{"location":"Libuipc/common_2macro_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/common_2macro_8h/#define-uipc_concate","title":"define UIPC_CONCATE","text":"<pre><code>#define UIPC_CONCATE (\n    x,\n    y\n) `x##y`\n</code></pre>"},{"location":"Libuipc/common_2macro_8h/#define-uipc_name_with_id","title":"define UIPC_NAME_WITH_ID","text":"<pre><code>#define UIPC_NAME_WITH_ID (\n    x\n) `UIPC_NAME_WITH_ID_IMPL(x, __COUNTER__)`\n</code></pre>"},{"location":"Libuipc/common_2macro_8h/#define-uipc_name_with_id_impl","title":"define UIPC_NAME_WITH_ID_IMPL","text":"<pre><code>#define UIPC_NAME_WITH_ID_IMPL (\n    x,\n    ID\n) `UIPC_CONCATE(x, ID)`\n</code></pre>"},{"location":"Libuipc/common_2macro_8h/#define-uipc_to_string","title":"define UIPC_TO_STRING","text":"<pre><code>#define UIPC_TO_STRING (\n    x\n) `#x`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/macro.h</code></p>"},{"location":"Libuipc/common_2macro_8h_source/","title":"File macro.h","text":""},{"location":"Libuipc/common_2macro_8h_source/#file-macroh","title":"File macro.h","text":"<p>File List &gt; common &gt; macro.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#define UIPC_TO_STRING(x) #x\n\n#define UIPC_CONCATE(x, y) x##y\n\n// indirection to allow the __COUNTER__ macro to be expanded\n#define UIPC_NAME_WITH_ID_IMPL(x, ID) UIPC_CONCATE(x, ID)\n\n// create a unique name with the __COUNTER__ macro appended\n#define UIPC_NAME_WITH_ID(x) UIPC_NAME_WITH_ID_IMPL(x, __COUNTER__)\n</code></pre>"},{"location":"Libuipc/map_8h/","title":"File map.h","text":""},{"location":"Libuipc/map_8h/#file-maph","title":"File map.h","text":"<p>FileList &gt; common &gt; map.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;map&gt;</code></li> </ul>"},{"location":"Libuipc/map_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/map.h</code></p>"},{"location":"Libuipc/map_8h_source/","title":"File map.h","text":""},{"location":"Libuipc/map_8h_source/#file-maph","title":"File map.h","text":"<p>File List &gt; common &gt; map.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;map&gt;\n\nnamespace uipc\n{\nusing std::pmr::map;\n}\n</code></pre>"},{"location":"Libuipc/range_8h/","title":"File range.h","text":""},{"location":"Libuipc/range_8h/#file-rangeh","title":"File range.h","text":"<p>FileList &gt; common &gt; range.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cppitertools/range.hpp&gt;</code></li> </ul>"},{"location":"Libuipc/range_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/range.h</code></p>"},{"location":"Libuipc/range_8h_source/","title":"File range.h","text":""},{"location":"Libuipc/range_8h_source/#file-rangeh","title":"File range.h","text":"<p>File List &gt; common &gt; range.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;cppitertools/range.hpp&gt;\n\nnamespace uipc\n{\nusing iter::range;\n}\n</code></pre>"},{"location":"Libuipc/readable__type__name_8h/","title":"File readable_type_name.h","text":""},{"location":"Libuipc/readable__type__name_8h/#file-readable_type_nameh","title":"File readable_type_name.h","text":"<p>FileList &gt; common &gt; readable_type_name.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;boost/core/demangle.hpp&gt;</code></li> </ul>"},{"location":"Libuipc/readable__type__name_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc"},{"location":"Libuipc/readable__type__name_8h/#macros","title":"Macros","text":"Type Name define READABLE_TYPE_NAME_AS_ALIAS (type) <code>/* multi line expression */</code>"},{"location":"Libuipc/readable__type__name_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"Libuipc/readable__type__name_8h/#define-readable_type_name_as_alias","title":"define READABLE_TYPE_NAME_AS_ALIAS","text":"<pre><code>#define READABLE_TYPE_NAME_AS_ALIAS (\n    type\n) `/* multi line expression */`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/uipc/common/readable_type_name.h</code></p>"},{"location":"Libuipc/readable__type__name_8h_source/","title":"File readable_type_name.h","text":""},{"location":"Libuipc/readable__type__name_8h_source/#file-readable_type_nameh","title":"File readable_type_name.h","text":"<p>File List &gt; common &gt; readable_type_name.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;string_view&gt;\n#include &lt;boost/core/demangle.hpp&gt;\n#define READABLE_TYPE_NAME_AS_ALIAS(type)                                      \\\n    template &lt;&gt;                                                                \\\n    inline std::string readable_type_name&lt;type&gt;() noexcept                     \\\n    {                                                                          \\\n        return #type;                                                          \\\n    }\n\nnamespace uipc\n{\ntemplate &lt;typename T&gt;\ninline std::string readable_type_name() noexcept\n{\n    return boost::core::demangle(typeid(T).name());\n}\n\nREADABLE_TYPE_NAME_AS_ALIAS(Vector2);\nREADABLE_TYPE_NAME_AS_ALIAS(Vector3);\nREADABLE_TYPE_NAME_AS_ALIAS(Vector4);\n\nREADABLE_TYPE_NAME_AS_ALIAS(Vector2i);\nREADABLE_TYPE_NAME_AS_ALIAS(Vector3i);\nREADABLE_TYPE_NAME_AS_ALIAS(Vector4i);\n\nREADABLE_TYPE_NAME_AS_ALIAS(Vector6);\nREADABLE_TYPE_NAME_AS_ALIAS(Vector9);\nREADABLE_TYPE_NAME_AS_ALIAS(Vector12);\n\nREADABLE_TYPE_NAME_AS_ALIAS(Matrix2x2);\nREADABLE_TYPE_NAME_AS_ALIAS(Matrix3x3);\nREADABLE_TYPE_NAME_AS_ALIAS(Matrix4x4);\n\nREADABLE_TYPE_NAME_AS_ALIAS(Matrix6x6);\nREADABLE_TYPE_NAME_AS_ALIAS(Matrix9x9);\nREADABLE_TYPE_NAME_AS_ALIAS(Matrix12x12);\n\nREADABLE_TYPE_NAME_AS_ALIAS(VectorX);\nREADABLE_TYPE_NAME_AS_ALIAS(VectorXi);\nREADABLE_TYPE_NAME_AS_ALIAS(VectorXi64);\nREADABLE_TYPE_NAME_AS_ALIAS(VectorXu);\nREADABLE_TYPE_NAME_AS_ALIAS(VectorXu64);\n}  // namespace uipc\n\n#undef READABLE_TYPE_NAME_AS_ALIAS\n</code></pre>"},{"location":"Libuipc/set_8h/","title":"File set.h","text":""},{"location":"Libuipc/set_8h/#file-seth","title":"File set.h","text":"<p>FileList &gt; common &gt; set.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory_resource&gt;</code></li> <li><code>#include &lt;set&gt;</code></li> </ul>"},{"location":"Libuipc/set_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/set.h</code></p>"},{"location":"Libuipc/set_8h_source/","title":"File set.h","text":""},{"location":"Libuipc/set_8h_source/#file-seth","title":"File set.h","text":"<p>File List &gt; common &gt; set.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;memory_resource&gt;\n#include &lt;set&gt;\n\nnamespace uipc\n{\nusing std::pmr::set;\n}\n</code></pre>"},{"location":"Libuipc/smart__pointer_8h/","title":"File smart_pointer.h","text":""},{"location":"Libuipc/smart__pointer_8h/#file-smart_pointerh","title":"File smart_pointer.h","text":"<p>FileList &gt; common &gt; smart_pointer.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;memory_resource&gt;</code></li> <li><code>#include &lt;uipc/common/allocator.h&gt;</code></li> <li><code>#include \"details/smart_pointer.inl\"</code></li> </ul>"},{"location":"Libuipc/smart__pointer_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc"},{"location":"Libuipc/smart__pointer_8h/#classes","title":"Classes","text":"Type Name struct PmrDeleter &lt;typename T&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/common/smart_pointer.h</code></p>"},{"location":"Libuipc/smart__pointer_8h_source/","title":"File smart_pointer.h","text":""},{"location":"Libuipc/smart__pointer_8h_source/#file-smart_pointerh","title":"File smart_pointer.h","text":"<p>File List &gt; common &gt; smart_pointer.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;memory&gt;\n#include &lt;memory_resource&gt;\n#include &lt;uipc/common/allocator.h&gt;\n\nnamespace uipc\n{\ntemplate &lt;typename T&gt;\nstruct PmrDeleter\n{\n    using Allocator = uipc::Allocator&lt;T&gt;;\n    void operator()(T* ptr) const;\n};\n\ntemplate &lt;typename T&gt;\nusing U = std::unique_ptr&lt;T, PmrDeleter&lt;T&gt;&gt;;\n\ntemplate &lt;typename T, typename... Args&gt;\nU&lt;T&gt; make_unique(Args&amp;&amp;... args);\n\ntemplate &lt;typename DstT, typename SrcT&gt;\nU&lt;DstT&gt; static_pointer_cast(U&lt;SrcT&gt;&amp;&amp; src);\n\ntemplate &lt;typename T&gt;\nusing S = std::shared_ptr&lt;T&gt;;\n\ntemplate &lt;typename T, typename... Args&gt;\nS&lt;T&gt; make_shared(Args&amp;&amp;... args);\n\ntemplate &lt;typename T&gt;\nusing W = std::weak_ptr&lt;T&gt;;\n}  // namespace uipc\n\n#include \"details/smart_pointer.inl\"\n</code></pre>"},{"location":"Libuipc/span_8h/","title":"File span.h","text":""},{"location":"Libuipc/span_8h/#file-spanh","title":"File span.h","text":"<p>FileList &gt; common &gt; span.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;span&gt;</code></li> </ul>"},{"location":"Libuipc/span_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/span.h</code></p>"},{"location":"Libuipc/span_8h_source/","title":"File span.h","text":""},{"location":"Libuipc/span_8h_source/#file-spanh","title":"File span.h","text":"<p>File List &gt; common &gt; span.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;span&gt;\nnamespace uipc\n{\nusing std::span;\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/span__as__eigen_8h/","title":"File span_as_eigen.h","text":""},{"location":"Libuipc/span__as__eigen_8h/#file-span_as_eigenh","title":"File span_as_eigen.h","text":"<p>FileList &gt; common &gt; span_as_eigen.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;Eigen/Core&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> </ul>"},{"location":"Libuipc/span__as__eigen_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/span_as_eigen.h</code></p>"},{"location":"Libuipc/span__as__eigen_8h_source/","title":"File span_as_eigen.h","text":""},{"location":"Libuipc/span__as__eigen_8h_source/#file-span_as_eigenh","title":"File span_as_eigen.h","text":"<p>File List &gt; common &gt; span_as_eigen.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;Eigen/Core&gt;\n#include &lt;uipc/common/span.h&gt;\n\nnamespace uipc\n{\ntemplate &lt;std::floating_point T&gt;\ninline auto as_eigen(span&lt;T&gt; s)\n{\n    return Eigen::Map&lt;Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt;&gt;(s.data(), s.size());\n}\n\ntemplate &lt;std::floating_point T&gt;\ninline auto as_eigen(span&lt;const T&gt; s)\n{\n    return Eigen::Map&lt;const Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt;&gt;(s.data(), s.size());\n}\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/stack_8h/","title":"File stack.h","text":""},{"location":"Libuipc/stack_8h/#file-stackh","title":"File stack.h","text":"<p>FileList &gt; common &gt; stack.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;stack&gt;</code></li> <li><code>#include &lt;deque&gt;</code></li> </ul>"},{"location":"Libuipc/stack_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/stack.h</code></p>"},{"location":"Libuipc/stack_8h_source/","title":"File stack.h","text":""},{"location":"Libuipc/stack_8h_source/#file-stackh","title":"File stack.h","text":"<p>File List &gt; common &gt; stack.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;stack&gt;\n#include &lt;deque&gt;\n\nnamespace uipc\n{\ntemplate &lt;typename T&gt;\nusing stack = std::stack&lt;T, std::pmr::deque&lt;T&gt;&gt;;\n}\n</code></pre>"},{"location":"Libuipc/string_8h/","title":"File string.h","text":""},{"location":"Libuipc/string_8h/#file-stringh","title":"File string.h","text":"<p>FileList &gt; common &gt; string.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"Libuipc/string_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace pmr <p>The documentation for this class was generated from the following file <code>include/uipc/common/string.h</code></p>"},{"location":"Libuipc/string_8h_source/","title":"File string.h","text":""},{"location":"Libuipc/string_8h_source/#file-stringh","title":"File string.h","text":"<p>File List &gt; common &gt; string.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string&gt;\n\nnamespace uipc\n{\nusing std::string;\n}\n\nnamespace uipc::pmr\n{\nusing std::pmr::string;\n}\n</code></pre>"},{"location":"Libuipc/timer_8h/","title":"File timer.h","text":""},{"location":"Libuipc/timer_8h/#file-timerh","title":"File timer.h","text":"<p>FileList &gt; common &gt; timer.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;iomanip&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include &lt;uipc/common/vector.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/common/stack.h&gt;</code></li> <li><code>#include &lt;uipc/common/string.h&gt;</code></li> <li><code>#include &lt;uipc/common/list.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> <li><code>#include &lt;uipc/common/set.h&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> </ul>"},{"location":"Libuipc/timer_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace details"},{"location":"Libuipc/timer_8h/#classes","title":"Classes","text":"Type Name class GlobalTimer class Timer class ScopedTimer <p>The documentation for this class was generated from the following file <code>include/uipc/common/timer.h</code></p>"},{"location":"Libuipc/timer_8h_source/","title":"File timer.h","text":""},{"location":"Libuipc/timer_8h_source/#file-timerh","title":"File timer.h","text":"<p>File List &gt; common &gt; timer.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;chrono&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;uipc/common/vector.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/common/stack.h&gt;\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/common/list.h&gt;\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/common/json.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n#include &lt;uipc/common/set.h&gt;\n#include &lt;uipc/common/string.h&gt;\n#include &lt;functional&gt;\n\nnamespace uipc\n{\nclass GlobalTimer;\nclass Timer;\n}  // namespace uipc\n\nnamespace uipc::details\n{\nclass UIPC_CORE_API ScopedTimer\n{\n  public:\n    using TimePoint = std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt;;\n    using Duration = std::chrono::duration&lt;double&gt;;\n\n  private:\n    friend class uipc::GlobalTimer;\n    friend class uipc::Timer;\n    string             name;\n    string             full_name;\n    TimePoint          start;\n    TimePoint          end;\n    Duration           duration;\n    list&lt;ScopedTimer*&gt; children;\n    ScopedTimer*       parent = nullptr;\n    size_t             depth  = 0;\n\n    ScopedTimer(std::string_view name)\n        : name(name)\n        , duration(0)\n    {\n    }\n\n    void   tick();\n    void   tock();\n    double elapsed() const;\n    void   traverse(Json&amp; j);\n    void   setup_full_name();\n\n  public:\n    ~ScopedTimer() = default;\n};\n}  // namespace uipc::details\n\nnamespace uipc\n{\nclass UIPC_CORE_API Timer\n{\n  public:\n    Timer(std::string_view blockName, bool force_on = false);\n    ~Timer();\n\n    double      elapsed() const;\n    static void disable_all() { m_global_on = false; }\n    static void enable_all() { m_global_on = true; }\n    static void set_sync_func(std::function&lt;void()&gt; sync) { m_sync = sync; }\n\n    static void report(std::ostream&amp; o = std::cout);\n    static Json report_as_json();\n\n  private:\n    void                         sync() const;\n    details::ScopedTimer*        m_timer = nullptr;\n    bool                         m_force_on;\n    static bool                  m_global_on;\n    static std::function&lt;void()&gt; m_sync;\n};\n\nclass UIPC_CORE_API GlobalTimer\n{\n    using STimer = details::ScopedTimer;\n\n    stack&lt;STimer*&gt; m_timer_stack;\n    STimer*        m_root;\n    friend class ScopedTimer;\n\n    list&lt;U&lt;STimer&gt;&gt; m_timers;\n\n    friend class Timer;\n    STimer&amp; push_timer(std::string_view);\n    STimer&amp; pop_timer();\n\n    static GlobalTimer  default_instance;\n    static GlobalTimer* m_current;\n\n    void _print_timings(std::ostream&amp; o, const STimer* timer, int depth);\n\n    size_t max_full_name_length() const;\n    size_t max_depth() const;\n\n    struct MergeResult\n    {\n\n        string name;\n        string parent_full_name;\n        string parent_name;\n\n        double                  duration = 0.0;\n        size_t                  count    = 0;\n        std::list&lt;MergeResult*&gt; children;\n\n        size_t depth = 0;\n    };\n\n    unordered_map&lt;string, U&lt;MergeResult&gt;&gt; m_merge_timers;\n    MergeResult*                          m_merge_root = nullptr;\n\n    void merge_timers();\n    void _print_merged_timings(std::ostream&amp;      o,\n                               const MergeResult* timer,\n                               size_t             max_name_length,\n                               size_t             max_depth);\n    void _traverse_merge_timers(Json&amp; j, const MergeResult* timer);\n\n  public:\n    GlobalTimer(std::string_view name = \"GlobalTimer\");\n\n    // delete copy_from\n    GlobalTimer(const GlobalTimer&amp;)            = delete;\n    GlobalTimer&amp; operator=(const GlobalTimer&amp;) = delete;\n\n    ~GlobalTimer();\n\n    void                set_as_current();\n    static GlobalTimer* current();\n    Json                report_as_json();\n    Json                report_merged_as_json();\n\n    void print_timings(std::ostream&amp; o = std::cout);\n\n    void print_merged_timings(std::ostream&amp; o = std::cout);\n\n    void clear();\n};\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/common_2type__define_8h/","title":"File type_define.h","text":""},{"location":"Libuipc/common_2type__define_8h/#file-type_defineh","title":"File type_define.h","text":"<p>FileList &gt; common &gt; type_define.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;Eigen/Core&gt;</code></li> </ul>"},{"location":"Libuipc/common_2type__define_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_define.h</code></p>"},{"location":"Libuipc/common_2type__define_8h_source/","title":"File type_define.h","text":""},{"location":"Libuipc/common_2type__define_8h_source/#file-type_defineh","title":"File type_define.h","text":"<p>File List &gt; common &gt; type_define.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;Eigen/Core&gt;\nnamespace uipc\n{\nusing Float  = double;\nusing IndexT = int32_t;\nusing SizeT  = std::size_t;\nusing I32    = int32_t;\nusing I64    = int64_t;\nusing U32    = uint32_t;\nusing U64    = uint64_t;\n\nusing Eigen::Matrix;\nusing Eigen::Vector;\n\nusing Vector2 = Vector&lt;Float, 2&gt;;\nusing Vector3 = Vector&lt;Float, 3&gt;;\nusing Vector4 = Vector&lt;Float, 4&gt;;\n\nusing Vector2i = Vector&lt;IndexT, 2&gt;;\nusing Vector3i = Vector&lt;IndexT, 3&gt;;\nusing Vector4i = Vector&lt;IndexT, 4&gt;;\n\nusing Vector6  = Vector&lt;Float, 6&gt;;\nusing Vector9  = Vector&lt;Float, 9&gt;;\nusing Vector12 = Vector&lt;Float, 12&gt;;\n\nusing Matrix2x2   = Matrix&lt;Float, 2, 2&gt;;\nusing Matrix3x3   = Matrix&lt;Float, 3, 3&gt;;\nusing Matrix4x4   = Matrix&lt;Float, 4, 4&gt;;\nusing Matrix6x6   = Matrix&lt;Float, 6, 6&gt;;\nusing Matrix9x9   = Matrix&lt;Float, 9, 9&gt;;\nusing Matrix12x12 = Matrix&lt;Float, 12, 12&gt;;\n\nusing Transform   = Eigen::Transform&lt;Float, 3, Eigen::Affine&gt;;\nusing Translation = Eigen::Translation&lt;Float, 3&gt;;\n\nusing VectorX    = Eigen::VectorX&lt;Float&gt;;\nusing VectorXi   = Eigen::VectorX&lt;IndexT&gt;;\nusing VectorXi64 = Eigen::VectorX&lt;I64&gt;;\nusing VectorXu   = Eigen::VectorX&lt;U32&gt;;\nusing VectorXu64 = Eigen::VectorX&lt;U64&gt;;\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/type__traits_8h/","title":"File type_traits.h","text":""},{"location":"Libuipc/type__traits_8h/#file-type_traitsh","title":"File type_traits.h","text":"<p>FileList &gt; common &gt; type_traits.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;type_traits&gt;</code></li> <li><code>#include &lt;Eigen/Core&gt;</code></li> </ul>"},{"location":"Libuipc/type__traits_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc"},{"location":"Libuipc/type__traits_8h/#classes","title":"Classes","text":"Type Name class is_matrix &lt;typename MatrixT&gt; class is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; &lt;typename Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt; struct propagate_const &lt;typename T, typename DstT&gt; struct signature&lt; R(&amp;)(Args...)&gt; &lt;typename R, Args&gt; struct signature&lt; R(*)(Args...)&gt; &lt;typename R, Args&gt; struct signature&lt; R(Args...)&gt; &lt;typename R, Args&gt; struct signature&lt; R(C::*)(Args...) &amp;&amp; &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...) const &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...) const volatile &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...) volatile &gt; &lt;typename R, typename C, Args&gt; struct signature&lt; R(C::*)(Args...)&gt; &lt;typename R, typename C, Args&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/common/type_traits.h</code></p>"},{"location":"Libuipc/type__traits_8h_source/","title":"File type_traits.h","text":""},{"location":"Libuipc/type__traits_8h_source/#file-type_traitsh","title":"File type_traits.h","text":"<p>File List &gt; common &gt; type_traits.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;type_traits&gt;\n#include &lt;Eigen/Core&gt;\n\nnamespace uipc\n{\ntemplate &lt;typename T, typename DstT&gt;\nstruct propagate_const\n{\n  private:\n    using DstT_ = std::remove_cv_t&lt;DstT&gt;;\n\n  public:\n    using type = std::conditional_t&lt;std::is_const_v&lt;T&gt;, const DstT_, DstT_&gt;;\n};\n\ntemplate &lt;typename T, typename DstT&gt;\nusing propagate_const_t = typename propagate_const&lt;T, DstT&gt;::type;\n\n\ntemplate &lt;typename Sig&gt;\nstruct signature;\n\ntemplate &lt;typename R, typename... Args&gt;\nstruct signature&lt;R(Args...)&gt;\n{\n    using type = std::tuple&lt;R, Args...&gt;;\n};\n\ntemplate &lt;typename R, typename... Args&gt;\nstruct signature&lt;R (*)(Args...)&gt; : signature&lt;R(Args...)&gt;\n{\n};\n\ntemplate &lt;typename R, typename... Args&gt;\nstruct signature&lt;R (&amp;)(Args...)&gt; : signature&lt;R(Args...)&gt;\n{\n};\n\ntemplate &lt;typename R, typename C, typename... Args&gt;\nstruct signature&lt;R (C::*)(Args...)&gt; : signature&lt;R(Args...)&gt;\n{\n};\n\ntemplate &lt;typename R, typename C, typename... Args&gt;\nstruct signature&lt;R (C::*)(Args...) const&gt; : signature&lt;R(Args...)&gt;\n{\n};\n\ntemplate &lt;typename R, typename C, typename... Args&gt;\nstruct signature&lt;R (C::*)(Args...) volatile&gt; : signature&lt;R(Args...)&gt;\n{\n};\n\ntemplate &lt;typename R, typename C, typename... Args&gt;\nstruct signature&lt;R (C::*)(Args...) const volatile&gt; : signature&lt;R(Args...)&gt;\n{\n};\n\ntemplate &lt;typename R, typename C, typename... Args&gt;\nstruct signature&lt;R (C::*)(Args...) &amp;&amp;&gt; : signature&lt;R(Args...)&gt;\n{\n};\n\ntemplate &lt;typename Sig&gt;\nusing signature_t = typename signature&lt;Sig&gt;::type;\n\n\ntemplate &lt;typename MatrixT&gt;\nclass is_matrix : public std::false_type\n{\n};\n\ntemplate &lt;typename MatrixT&gt;\ninline constexpr bool is_matrix_v = is_matrix&lt;MatrixT&gt;::value;\n\ntemplate &lt;typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols&gt;\nclass is_matrix&lt;Eigen::Matrix&lt;Scalar, Rows, Cols, Options, MaxRows, MaxCols&gt;&gt;\n    : public std::true_type\n{\n};\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/common_2uipc_8h/","title":"File uipc.h","text":""},{"location":"Libuipc/common_2uipc_8h/#file-uipch","title":"File uipc.h","text":"<p>FileList &gt; common &gt; uipc.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> </ul>"},{"location":"Libuipc/common_2uipc_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/uipc.h</code></p>"},{"location":"Libuipc/common_2uipc_8h_source/","title":"File uipc.h","text":""},{"location":"Libuipc/common_2uipc_8h_source/#file-uipch","title":"File uipc.h","text":"<p>File List &gt; common &gt; uipc.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/json.h&gt;\n\nnamespace uipc\n{\nUIPC_CORE_API void        init(const Json&amp; config);\nUIPC_CORE_API Json        default_config();\nUIPC_CORE_API const Json&amp; config();\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/unit_8h/","title":"File unit.h","text":""},{"location":"Libuipc/unit_8h/#file-unith","title":"File unit.h","text":"<p>FileList &gt; common &gt; unit.h</p> <p>Go to the source code of this file</p>"},{"location":"Libuipc/unit_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/unit.h</code></p>"},{"location":"Libuipc/unit_8h_source/","title":"File unit.h","text":""},{"location":"Libuipc/unit_8h_source/#file-unith","title":"File unit.h","text":"<p>File List &gt; common &gt; unit.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\nnamespace uipc\n{\nconstexpr long double operator\"\"_s(long double value)\n{\n    return value;\n}\n\nconstexpr long double operator\"\"_ms(long double value)\n{\n    return value * 1e-3;\n}\nconstexpr long double operator\"\"_m(long double value)\n{\n    return value;\n}\n\nconstexpr long double operator\"\"_mm(long double value)\n{\n    return value * 1e-3;\n}\n\nconstexpr long double operator\"\"_km(long double value)\n{\n    return value * 1e3;\n}\n\nconstexpr long double operator\"\"_Pa(long double value)\n{\n    return value;\n}\n\nconstexpr long double operator\"\"_kPa(long double value)\n{\n    return value * 1e3;\n}\n\nconstexpr long double operator\"\"_MPa(long double value)\n{\n    return value * 1e6;\n}\n\nconstexpr long double operator\"\"_GPa(long double value)\n{\n    return value * 1e9;\n}\n\nconstexpr long double operator\"\"_N(long double value)\n{\n    return value;\n}\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/unordered__map_8h/","title":"File unordered_map.h","text":""},{"location":"Libuipc/unordered__map_8h/#file-unordered_maph","title":"File unordered_map.h","text":"<p>FileList &gt; common &gt; unordered_map.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory_resource&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> </ul>"},{"location":"Libuipc/unordered__map_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/unordered_map.h</code></p>"},{"location":"Libuipc/unordered__map_8h_source/","title":"File unordered_map.h","text":""},{"location":"Libuipc/unordered__map_8h_source/#file-unordered_maph","title":"File unordered_map.h","text":"<p>File List &gt; common &gt; unordered_map.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;memory_resource&gt;\n#include &lt;unordered_map&gt;\n\nnamespace uipc\n{\nusing std::pmr::unordered_map;\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/vector_8h/","title":"File vector.h","text":""},{"location":"Libuipc/vector_8h/#file-vectorh","title":"File vector.h","text":"<p>FileList &gt; common &gt; vector.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory_resource&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"Libuipc/vector_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/vector.h</code></p>"},{"location":"Libuipc/vector_8h_source/","title":"File vector.h","text":""},{"location":"Libuipc/vector_8h_source/#file-vectorh","title":"File vector.h","text":"<p>File List &gt; common &gt; vector.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;memory_resource&gt;\n#include &lt;vector&gt;\n\nnamespace uipc\n{\nusing std::pmr::vector;\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/zip_8h/","title":"File zip.h","text":""},{"location":"Libuipc/zip_8h/#file-ziph","title":"File zip.h","text":"<p>FileList &gt; common &gt; zip.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cppitertools/zip.hpp&gt;</code></li> </ul>"},{"location":"Libuipc/zip_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/common/zip.h</code></p>"},{"location":"Libuipc/zip_8h_source/","title":"File zip.h","text":""},{"location":"Libuipc/zip_8h_source/#file-ziph","title":"File zip.h","text":"<p>File List &gt; common &gt; zip.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;cppitertools/zip.hpp&gt;\n\nnamespace uipc\n{\nusing iter::zip;\n}\n</code></pre>"},{"location":"Libuipc/dir_e6404e629433dfdedefe8b8f43f6234d/","title":"Dir include/uipc/constitution","text":""},{"location":"Libuipc/dir_e6404e629433dfdedefe8b8f43f6234d/#dir-includeuipcconstitution","title":"Dir include/uipc/constitution","text":"<p>FileList &gt; constitution</p>"},{"location":"Libuipc/dir_e6404e629433dfdedefe8b8f43f6234d/#files","title":"Files","text":"Type Name file affine_body_constitution.h file arap.h file baraff_witkin_shell.h file constitution.h file constraint.h file conversion.h file discrete_shell_bending.h file elastic_moduli.h file empty.h file finite_element_constitution.h file finite_element_extra_constitution.h file hookean_spring.h file kirchhoff_rod_bending.h file neo_hookean_shell.h file particle.h file soft_position_constraint.h file soft_transform_constraint.h file stable_neo_hookean.h <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/</code></p>"},{"location":"Libuipc/affine__body__constitution_8h/","title":"File affine_body_constitution.h","text":""},{"location":"Libuipc/affine__body__constitution_8h/#file-affine_body_constitutionh","title":"File affine_body_constitution.h","text":"<p>FileList &gt; constitution &gt; affine_body_constitution.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/constitution.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/affine__body__constitution_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/affine__body__constitution_8h/#classes","title":"Classes","text":"Type Name class AffineBodyConstitution class AffineBodyMaterial <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/affine_body_constitution.h</code></p>"},{"location":"Libuipc/affine__body__constitution_8h_source/","title":"File affine_body_constitution.h","text":""},{"location":"Libuipc/affine__body__constitution_8h_source/#file-affine_body_constitutionh","title":"File affine_body_constitution.h","text":"<p>File List &gt; constitution &gt; affine_body_constitution.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/constitution.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::constitution\n{\nclass AffineBodyConstitution;\n\nclass UIPC_CONSTITUTION_API AffineBodyMaterial\n{\n  public:\n    void apply_to(geometry::SimplicialComplex&amp; sc) const;\n\n  private:\n    friend class AffineBodyConstitution;\n    AffineBodyMaterial(const AffineBodyConstitution&amp;, Float kappa, Float mass_density = 1e3) noexcept;\n\n    const AffineBodyConstitution&amp; m_constitution;\n    Float                         m_kappa;\n    Float                         m_mass_density;\n};\n\nclass UIPC_CONSTITUTION_API AffineBodyConstitution : public IConstitution\n{\n    using Base = IConstitution;\n\n  public:\n    AffineBodyConstitution(const Json&amp; config = default_config()) noexcept;\n    AffineBodyMaterial create_material(Float kappa) const noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc, Float kappa, Float mass_density = 1e3) const;\n\n    static Json default_config() noexcept;\n\n  protected:\n    virtual U64              get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/arap_8h/","title":"File arap.h","text":""},{"location":"Libuipc/arap_8h/#file-araph","title":"File arap.h","text":"<p>FileList &gt; constitution &gt; arap.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/arap_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/arap_8h/#classes","title":"Classes","text":"Type Name class ARAP <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/arap.h</code></p>"},{"location":"Libuipc/arap_8h_source/","title":"File arap.h","text":""},{"location":"Libuipc/arap_8h_source/#file-araph","title":"File arap.h","text":"<p>File List &gt; constitution &gt; arap.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_constitution.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API ARAP : public FiniteElementConstitution\n{\n    using Base = FiniteElementConstitution;\n\n  public:\n    ARAP(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc, Float kappa = 1.0_MPa, Float mass_density = 1e3) const;\n\n    static Json default_config() noexcept;\n\n  protected:\n    virtual U64              get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/baraff__witkin__shell_8h/","title":"File baraff_witkin_shell.h","text":""},{"location":"Libuipc/baraff__witkin__shell_8h/#file-baraff_witkin_shellh","title":"File baraff_witkin_shell.h","text":"<p>FileList &gt; constitution &gt; baraff_witkin_shell.h</p> <p>Go to the source code of this file</p> <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/baraff_witkin_shell.h</code></p>"},{"location":"Libuipc/baraff__witkin__shell_8h_source/","title":"File baraff_witkin_shell.h","text":""},{"location":"Libuipc/baraff__witkin__shell_8h_source/#file-baraff_witkin_shellh","title":"File baraff_witkin_shell.h","text":"<p>File List &gt; constitution &gt; baraff_witkin_shell.h</p> <p>Go to the documentation of this file</p>"},{"location":"Libuipc/constitution_8h/","title":"File constitution.h","text":""},{"location":"Libuipc/constitution_8h/#file-constitutionh","title":"File constitution.h","text":"<p>FileList &gt; constitution &gt; constitution.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/builtin/constitution_uid_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/constitution_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/constitution_8h/#classes","title":"Classes","text":"Type Name class IConstitution <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/constitution.h</code></p>"},{"location":"Libuipc/constitution_8h_source/","title":"File constitution.h","text":""},{"location":"Libuipc/constitution_8h_source/#file-constitutionh","title":"File constitution.h","text":"<p>File List &gt; constitution &gt; constitution.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/builtin/constitution_uid_collection.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CORE_API IConstitution\n{\n  public:\n    virtual ~IConstitution() = default;\n    U64                     uid() const noexcept;\n    std::string_view        name() const noexcept;\n    std::string_view        type() const noexcept;\n    const builtin::UIDInfo&amp; uid_info() const noexcept;\n\n\n  protected:\n    virtual U64 get_uid() const noexcept = 0;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/constraint_8h/","title":"File constraint.h","text":""},{"location":"Libuipc/constraint_8h/#file-constrainth","title":"File constraint.h","text":"<p>FileList &gt; constitution &gt; constraint.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/constitution.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/constraint_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/constraint_8h/#classes","title":"Classes","text":"Type Name class Constraint <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/constraint.h</code></p>"},{"location":"Libuipc/constraint_8h_source/","title":"File constraint.h","text":""},{"location":"Libuipc/constraint_8h_source/#file-constrainth","title":"File constraint.h","text":"<p>File List &gt; constitution &gt; constraint.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/constitution.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CORE_API Constraint : public IConstitution\n{\n  public:\n    Constraint() noexcept;\n\n  protected:\n    virtual U64 get_uid() const noexcept = 0;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc) const;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/conversion_8h/","title":"File conversion.h","text":""},{"location":"Libuipc/conversion_8h/#file-conversionh","title":"File conversion.h","text":"<p>FileList &gt; constitution &gt; conversion.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> </ul>"},{"location":"Libuipc/conversion_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/conversion.h</code></p>"},{"location":"Libuipc/conversion_8h_source/","title":"File conversion.h","text":""},{"location":"Libuipc/conversion_8h_source/#file-conversionh","title":"File conversion.h","text":"<p>File List &gt; constitution &gt; conversion.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n\nnamespace uipc::constitution\n{\ninline void EG_to_lame(Float E, Float G, Float&amp; lambda, Float&amp; mu, Float&amp; poisson)\n{\n    // ref: https://en.wikipedia.org/wiki/Lam%C3%A9_parameters\n\n    //tex: $\\mu = G$\n    mu = G;\n    //tex: $\\lambda = \\frac{G(E-2 G)}{3 G-E}$\n    lambda = G * (E - 2 * G) / (3 * G - E);\n\n    //tex: $\\nu = {\\frac {E}{2G}}-1$\n    poisson = E / (2 * G) - 1;\n}\n\ninline void lame_to_EG(Float lambda, Float mu, Float&amp; E, Float&amp; G, Float&amp; poisson)\n{\n    // ref: https://en.wikipedia.org/wiki/Lam%C3%A9_parameters\n\n    //tex: $G = \\mu$\n    G = mu;\n    //tex: $ E = \\frac{G(3 \\lambda+2 G)}{\\lambda+G}$\n    E = G * (3 * lambda + 2 * G) / (lambda + G);\n    //tex: $\\nu = \\frac{\\lambda}{2(\\lambda+G)}$\n    poisson = lambda / (2 * (lambda + G));\n}\n\ninline void lame_to_poisson(Float lambda, Float mu, Float&amp; poisson)\n{\n    //tex: $\\nu = \\frac{\\lambda}{2(\\lambda+\\mu)}$\n    poisson = lambda / (2 * (lambda + mu));\n}\n\ninline void EG_to_poisson(Float E, Float G, Float&amp; poisson)\n{\n    //tex: $\\nu = {\\frac {E}{2G}}-1$\n    poisson = E / (2 * G) - 1;\n}\n\ninline void EP_to_lame(Float E, Float poission, Float&amp; lambda, Float&amp; mu)\n{\n    lambda = E * poission / (1 + poission) / (1 - 2 * poission);\n    mu     = E / (2 * (1 + poission));\n}\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/discrete__shell__bending_8h/","title":"File discrete_shell_bending.h","text":""},{"location":"Libuipc/discrete__shell__bending_8h/#file-discrete_shell_bendingh","title":"File discrete_shell_bending.h","text":"<p>FileList &gt; constitution &gt; discrete_shell_bending.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_extra_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/discrete__shell__bending_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/discrete__shell__bending_8h/#classes","title":"Classes","text":"Type Name class DiscreteShellBending <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/discrete_shell_bending.h</code></p>"},{"location":"Libuipc/discrete__shell__bending_8h_source/","title":"File discrete_shell_bending.h","text":""},{"location":"Libuipc/discrete__shell__bending_8h_source/#file-discrete_shell_bendingh","title":"File discrete_shell_bending.h","text":"<p>File List &gt; constitution &gt; discrete_shell_bending.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_extra_constitution.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API DiscreteShellBending : public FiniteElementExtraConstitution\n{\n    using Base = FiniteElementExtraConstitution;\n\n  public:\n    DiscreteShellBending(const Json&amp; json = default_config());\n\n    void apply_to(geometry::SimplicialComplex&amp; sc, Float E = 100.0_kPa);\n\n    static Json default_config();\n\n\n  private:\n    virtual U64 get_uid() const noexcept final override;\n    Json        m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/elastic__moduli_8h/","title":"File elastic_moduli.h","text":""},{"location":"Libuipc/elastic__moduli_8h/#file-elastic_modulih","title":"File elastic_moduli.h","text":"<p>FileList &gt; constitution &gt; elastic_moduli.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> </ul>"},{"location":"Libuipc/elastic__moduli_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/elastic__moduli_8h/#classes","title":"Classes","text":"Type Name class ElasticModuli <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/elastic_moduli.h</code></p>"},{"location":"Libuipc/elastic__moduli_8h_source/","title":"File elastic_moduli.h","text":""},{"location":"Libuipc/elastic__moduli_8h_source/#file-elastic_modulih","title":"File elastic_moduli.h","text":"<p>File List &gt; constitution &gt; elastic_moduli.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API ElasticModuli\n{\n  public:\n    static ElasticModuli lame(Float lambda, Float mu) noexcept;\n    static ElasticModuli youngs_shear(Float E, Float G) noexcept;\n    static ElasticModuli youngs_poisson(Float E, Float nu);\n\n    auto lambda() const noexcept { return m_lambda; }\n    auto mu() const noexcept { return m_mu; }\n\n  private:\n    ElasticModuli() = default;\n    ElasticModuli(Float lambda, Float mu) noexcept;\n    Float m_lambda;\n    Float m_mu;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/empty_8h/","title":"File empty.h","text":""},{"location":"Libuipc/empty_8h/#file-emptyh","title":"File empty.h","text":"<p>FileList &gt; constitution &gt; empty.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/constitution/elastic_moduli.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/empty_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/empty_8h/#classes","title":"Classes","text":"Type Name class Empty <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/empty.h</code></p>"},{"location":"Libuipc/empty_8h_source/","title":"File empty.h","text":""},{"location":"Libuipc/empty_8h_source/#file-emptyh","title":"File empty.h","text":"<p>File List &gt; constitution &gt; empty.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_constitution.h&gt;\n#include &lt;uipc/constitution/elastic_moduli.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API Empty : public FiniteElementConstitution\n{\n    using Base = FiniteElementConstitution;\n\n  public:\n    Empty(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc,\n                  Float                        mass_density = 1000.0,\n                  Float                        thickness    = 0.01_m) const;\n\n    static Json default_config() noexcept;\n\n  protected:\n    virtual U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/finite__element__constitution_8h/","title":"File finite_element_constitution.h","text":""},{"location":"Libuipc/finite__element__constitution_8h/#file-finite_element_constitutionh","title":"File finite_element_constitution.h","text":"<p>FileList &gt; constitution &gt; finite_element_constitution.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/constitution.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/finite__element__constitution_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/finite__element__constitution_8h/#classes","title":"Classes","text":"Type Name class FiniteElementConstitution <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/finite_element_constitution.h</code></p>"},{"location":"Libuipc/finite__element__constitution_8h_source/","title":"File finite_element_constitution.h","text":""},{"location":"Libuipc/finite__element__constitution_8h_source/#file-finite_element_constitutionh","title":"File finite_element_constitution.h","text":"<p>File List &gt; constitution &gt; finite_element_constitution.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/constitution.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API FiniteElementConstitution : public IConstitution\n{\n    using Base = IConstitution;\n\n  protected:\n    void apply_to(geometry::SimplicialComplex&amp; sc, Float mass_density, Float thickness = 0.0) const;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/finite__element__extra__constitution_8h/","title":"File finite_element_extra_constitution.h","text":""},{"location":"Libuipc/finite__element__extra__constitution_8h/#file-finite_element_extra_constitutionh","title":"File finite_element_extra_constitution.h","text":"<p>FileList &gt; constitution &gt; finite_element_extra_constitution.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/constitution.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/finite__element__extra__constitution_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/finite__element__extra__constitution_8h/#classes","title":"Classes","text":"Type Name class FiniteElementExtraConstitution <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/finite_element_extra_constitution.h</code></p>"},{"location":"Libuipc/finite__element__extra__constitution_8h_source/","title":"File finite_element_extra_constitution.h","text":""},{"location":"Libuipc/finite__element__extra__constitution_8h_source/#file-finite_element_extra_constitutionh","title":"File finite_element_extra_constitution.h","text":"<p>File List &gt; constitution &gt; finite_element_extra_constitution.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/constitution.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API FiniteElementExtraConstitution : public IConstitution\n{\n    using Base = IConstitution;\n\n  public:\n    using Base::Base;\n\n  protected:\n    void apply_to(geometry::SimplicialComplex&amp; sc) const;\n    // let the derived class to give the uid\n    virtual U64 get_uid() const noexcept = 0;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/hookean__spring_8h/","title":"File hookean_spring.h","text":""},{"location":"Libuipc/hookean__spring_8h/#file-hookean_springh","title":"File hookean_spring.h","text":"<p>FileList &gt; constitution &gt; hookean_spring.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/constitution/elastic_moduli.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/hookean__spring_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/hookean__spring_8h/#classes","title":"Classes","text":"Type Name class HookeanSpring <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/hookean_spring.h</code></p>"},{"location":"Libuipc/hookean__spring_8h_source/","title":"File hookean_spring.h","text":""},{"location":"Libuipc/hookean__spring_8h_source/#file-hookean_springh","title":"File hookean_spring.h","text":"<p>File List &gt; constitution &gt; hookean_spring.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_constitution.h&gt;\n#include &lt;uipc/constitution/elastic_moduli.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API HookeanSpring : public FiniteElementConstitution\n{\n    using Base = FiniteElementConstitution;\n\n  public:\n    HookeanSpring(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc,\n                  Float                        kappa        = 40.0_MPa,\n                  Float                        mass_density = 1e3,\n                  Float                        thickness    = 0.01_m) const;\n\n    static Json default_config() noexcept;\n\n  protected:\n    virtual U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/kirchhoff__rod__bending_8h/","title":"File kirchhoff_rod_bending.h","text":""},{"location":"Libuipc/kirchhoff__rod__bending_8h/#file-kirchhoff_rod_bendingh","title":"File kirchhoff_rod_bending.h","text":"<p>FileList &gt; constitution &gt; kirchhoff_rod_bending.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_extra_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/kirchhoff__rod__bending_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/kirchhoff__rod__bending_8h/#classes","title":"Classes","text":"Type Name class KirchhoffRodBending <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/kirchhoff_rod_bending.h</code></p>"},{"location":"Libuipc/kirchhoff__rod__bending_8h_source/","title":"File kirchhoff_rod_bending.h","text":""},{"location":"Libuipc/kirchhoff__rod__bending_8h_source/#file-kirchhoff_rod_bendingh","title":"File kirchhoff_rod_bending.h","text":"<p>File List &gt; constitution &gt; kirchhoff_rod_bending.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_extra_constitution.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API KirchhoffRodBending : public FiniteElementExtraConstitution\n{\n    using Base = FiniteElementExtraConstitution;\n\n  public:\n    KirchhoffRodBending(const Json&amp; json = default_config());\n\n    void apply_to(geometry::SimplicialComplex&amp; sc, Float E = 100.0_MPa);\n\n    static Json default_config();\n\n\n  private:\n    virtual U64 get_uid() const noexcept final override;\n    Json        m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/neo__hookean__shell_8h/","title":"File neo_hookean_shell.h","text":""},{"location":"Libuipc/neo__hookean__shell_8h/#file-neo_hookean_shellh","title":"File neo_hookean_shell.h","text":"<p>FileList &gt; constitution &gt; neo_hookean_shell.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/constitution/elastic_moduli.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/neo__hookean__shell_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/neo__hookean__shell_8h/#classes","title":"Classes","text":"Type Name class NeoHookeanShell <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/neo_hookean_shell.h</code></p>"},{"location":"Libuipc/neo__hookean__shell_8h_source/","title":"File neo_hookean_shell.h","text":""},{"location":"Libuipc/neo__hookean__shell_8h_source/#file-neo_hookean_shellh","title":"File neo_hookean_shell.h","text":"<p>File List &gt; constitution &gt; neo_hookean_shell.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_constitution.h&gt;\n#include &lt;uipc/constitution/elastic_moduli.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API NeoHookeanShell : public FiniteElementConstitution\n{\n    using Base = FiniteElementConstitution;\n\n  public:\n    NeoHookeanShell(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc,\n                  const ElasticModuli&amp; moduli = ElasticModuli::youngs_poisson(10.0_MPa, 0.49),\n                  Float mass_density = 1e3,\n                  Float thickness    = 0.01_m) const;\n\n    static Json default_config() noexcept;\n\n  protected:\n    virtual U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/particle_8h/","title":"File particle.h","text":""},{"location":"Libuipc/particle_8h/#file-particleh","title":"File particle.h","text":"<p>FileList &gt; constitution &gt; particle.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/constitution/elastic_moduli.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/particle_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/particle_8h/#classes","title":"Classes","text":"Type Name class Particle <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/particle.h</code></p>"},{"location":"Libuipc/particle_8h_source/","title":"File particle.h","text":""},{"location":"Libuipc/particle_8h_source/#file-particleh","title":"File particle.h","text":"<p>File List &gt; constitution &gt; particle.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_constitution.h&gt;\n#include &lt;uipc/constitution/elastic_moduli.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API Particle : public FiniteElementConstitution\n{\n    using Base = FiniteElementConstitution;\n\n  public:\n    Particle(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc,\n                  Float                        mass_density = 1e3,\n                  Float                        thickness    = 0.01_m) const;\n\n    static Json default_config() noexcept;\n\n  protected:\n    virtual U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/soft__position__constraint_8h/","title":"File soft_position_constraint.h","text":""},{"location":"Libuipc/soft__position__constraint_8h/#file-soft_position_constrainth","title":"File soft_position_constraint.h","text":"<p>FileList &gt; constitution &gt; soft_position_constraint.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/constraint.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> </ul>"},{"location":"Libuipc/soft__position__constraint_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/soft__position__constraint_8h/#classes","title":"Classes","text":"Type Name class SoftPositionConstraint <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/soft_position_constraint.h</code></p>"},{"location":"Libuipc/soft__position__constraint_8h_source/","title":"File soft_position_constraint.h","text":""},{"location":"Libuipc/soft__position__constraint_8h_source/#file-soft_position_constrainth","title":"File soft_position_constraint.h","text":"<p>File List &gt; constitution &gt; soft_position_constraint.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/constraint.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n#include &lt;uipc/common/json.h&gt;\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API SoftPositionConstraint final : public Constraint\n{\n    using Base = Constraint;\n\n  public:\n    SoftPositionConstraint(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc, Float strength_rate = 100.0) const;\n\n    static Json default_config();\n\n  protected:\n    U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/soft__transform__constraint_8h/","title":"File soft_transform_constraint.h","text":""},{"location":"Libuipc/soft__transform__constraint_8h/#file-soft_transform_constrainth","title":"File soft_transform_constraint.h","text":"<p>FileList &gt; constitution &gt; soft_transform_constraint.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/constraint.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> <li><code>#include &lt;numbers&gt;</code></li> </ul>"},{"location":"Libuipc/soft__transform__constraint_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/soft__transform__constraint_8h/#classes","title":"Classes","text":"Type Name class LinearMotor class RotatingMotor class SoftTransformConstraint <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/soft_transform_constraint.h</code></p>"},{"location":"Libuipc/soft__transform__constraint_8h_source/","title":"File soft_transform_constraint.h","text":""},{"location":"Libuipc/soft__transform__constraint_8h_source/#file-soft_transform_constrainth","title":"File soft_transform_constraint.h","text":"<p>File List &gt; constitution &gt; soft_transform_constraint.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/constraint.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n#include &lt;uipc/common/json.h&gt;\n#include &lt;numbers&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API SoftTransformConstraint final : public Constraint\n{\n    using Base = Constraint;\n\n  public:\n    SoftTransformConstraint(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc, const Vector2&amp; strength_ratio) const;\n\n    static Json default_config();\n\n  protected:\n    U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n\nclass UIPC_CONSTITUTION_API RotatingMotor final : public Constraint\n{\n    using Base = Constraint;\n\n  public:\n    RotatingMotor(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc,\n                  Float                        strength_ratio = 100.0,\n                  const Vector3&amp; motor_rot_axis = Vector3::UnitX(),\n                  Float          motor_rot_vel  = 2 * std::numbers::pi) const;\n\n    static Json default_config();\n\n    static void animate(geometry::SimplicialComplex&amp; sc, Float dt);\n\n  protected:\n    U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n\nclass UIPC_CONSTITUTION_API LinearMotor final : public Constraint\n{\n    using Base = Constraint;\n\n  public:\n    LinearMotor(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc,\n                  Float                        strength_ratio = 100.0,\n                  Vector3                      motor_axis = -Vector3::UnitZ(),\n                  Float                        motor_vel  = 1.0) const;\n\n    static Json default_config();\n\n    static void animate(geometry::SimplicialComplex&amp; sc, Float dt);\n\n  protected:\n    U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/stable__neo__hookean_8h/","title":"File stable_neo_hookean.h","text":""},{"location":"Libuipc/stable__neo__hookean_8h/#file-stable_neo_hookeanh","title":"File stable_neo_hookean.h","text":"<p>FileList &gt; constitution &gt; stable_neo_hookean.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/finite_element_constitution.h&gt;</code></li> <li><code>#include &lt;uipc/constitution/elastic_moduli.h&gt;</code></li> <li><code>#include &lt;uipc/common/unit.h&gt;</code></li> </ul>"},{"location":"Libuipc/stable__neo__hookean_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace constitution"},{"location":"Libuipc/stable__neo__hookean_8h/#classes","title":"Classes","text":"Type Name class StableNeoHookean <p>The documentation for this class was generated from the following file <code>include/uipc/constitution/stable_neo_hookean.h</code></p>"},{"location":"Libuipc/stable__neo__hookean_8h_source/","title":"File stable_neo_hookean.h","text":""},{"location":"Libuipc/stable__neo__hookean_8h_source/#file-stable_neo_hookeanh","title":"File stable_neo_hookean.h","text":"<p>File List &gt; constitution &gt; stable_neo_hookean.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/finite_element_constitution.h&gt;\n#include &lt;uipc/constitution/elastic_moduli.h&gt;\n#include &lt;uipc/common/unit.h&gt;\n\nnamespace uipc::constitution\n{\nclass UIPC_CONSTITUTION_API StableNeoHookean : public FiniteElementConstitution\n{\n    using Base = FiniteElementConstitution;\n\n  public:\n    StableNeoHookean(const Json&amp; config = default_config()) noexcept;\n\n    void apply_to(geometry::SimplicialComplex&amp; sc,\n                  const ElasticModuli&amp; moduli = ElasticModuli::youngs_poisson(20.0_kPa, 0.49),\n                  Float mass_density = 1e3) const;\n\n    static Json default_config() noexcept;\n\n  protected:\n    virtual U64 get_uid() const noexcept override;\n\n  private:\n    Json m_config;\n};\n}  // namespace uipc::constitution\n</code></pre>"},{"location":"Libuipc/dir_eca9d1283f7cad9ff89c5ab44937d4d9/","title":"Dir include/uipc/core","text":""},{"location":"Libuipc/dir_eca9d1283f7cad9ff89c5ab44937d4d9/#dir-includeuipccore","title":"Dir include/uipc/core","text":"<p>FileList &gt; core</p>"},{"location":"Libuipc/dir_eca9d1283f7cad9ff89c5ab44937d4d9/#files","title":"Files","text":"Type Name file animation.h file animator.h file constitution_tabular.h file contact_element.h file contact_model.h file contact_model_collection.h file contact_tabular.h file diff_sim.h file engine.h file engine_status.h file feature.h file feature_collection.h file i_engine.h file i_sanity_checker.h file object.h file object_collection.h file object_snapshot.h file sanity_checker.h file scene.h file scene_archieve.h file scene_factory.h file scene_snapshot.h file world.h"},{"location":"Libuipc/dir_eca9d1283f7cad9ff89c5ab44937d4d9/#directories","title":"Directories","text":"Type Name dir internal <p>The documentation for this class was generated from the following file <code>include/uipc/core/</code></p>"},{"location":"Libuipc/animation_8h/","title":"File animation.h","text":""},{"location":"Libuipc/animation_8h/#file-animationh","title":"File animation.h","text":"<p>FileList &gt; core &gt; animation.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/core/object.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> </ul>"},{"location":"Libuipc/animation_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace backend namespace core"},{"location":"Libuipc/animation_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::core::Animation &gt; &lt;&gt; class Animation class UpdateHint class UpdateInfo <p>The documentation for this class was generated from the following file <code>include/uipc/core/animation.h</code></p>"},{"location":"Libuipc/animation_8h_source/","title":"File animation.h","text":""},{"location":"Libuipc/animation_8h_source/#file-animationh","title":"File animation.h","text":"<p>File List &gt; core &gt; animation.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/core/object.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;functional&gt;\n\nnamespace uipc::backend\n{\nclass AnimatorVisitor;\n}\n\nnamespace uipc::core\n{\nclass World;\nclass UIPC_CORE_API Animation\n{\n  public:\n    class UIPC_CORE_API UpdateHint\n    {\n      public:\n        void fixed_vertices_changing(bool v) noexcept;\n\n      private:\n        friend class Animation;\n        bool m_fixed_vertices_changing = false;\n    };\n\n\n    class UIPC_CORE_API UpdateInfo\n    {\n      public:\n        Float                           dt() const noexcept;\n        Object&amp;                         object() const noexcept;\n        span&lt;S&lt;geometry::GeometrySlot&gt;&gt; geo_slots() const noexcept;\n        span&lt;S&lt;geometry::GeometrySlot&gt;&gt; rest_geo_slots() const noexcept;\n        SizeT                           frame() const noexcept;\n        UpdateHint&amp;                     hint() noexcept;\n\n      private:\n        UpdateInfo(Animation&amp; animation) noexcept;\n        friend class Animation;\n        Animation* m_animation = nullptr;\n        UpdateHint m_hint;\n    };\n\n    using ActionOnUpdate = std::function&lt;void(UpdateInfo&amp;)&gt;;\n\n  private:\n    friend class Animator;\n    friend class backend::AnimatorVisitor;\n    friend struct fmt::formatter&lt;Animation&gt;;\n    void init();\n    void update();\n\n    Animation(internal::Scene&amp; scene, Object&amp; object, ActionOnUpdate&amp;&amp; on_update) noexcept;\n\n    Object*          m_object = nullptr;\n    internal::Scene* m_scene  = nullptr;\n    ActionOnUpdate   m_on_update;\n\n    mutable vector&lt;S&lt;geometry::GeometrySlot&gt;&gt; m_temp_geo_slots;\n    mutable vector&lt;S&lt;geometry::GeometrySlot&gt;&gt; m_temp_rest_geo_slots;\n};\n}  // namespace uipc::core\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::core::Animation&gt; : formatter&lt;string_view&gt;\n{\n    appender format(const uipc::core::Animation&amp; c, format_context&amp; ctx) const;\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/animator_8h/","title":"File animator.h","text":""},{"location":"Libuipc/animator_8h/#file-animatorh","title":"File animator.h","text":"<p>FileList &gt; core &gt; animator.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/object.h&gt;</code></li> <li><code>#include &lt;uipc/core/animation.h&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> </ul>"},{"location":"Libuipc/animator_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/animator_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::core::Animator &gt; &lt;&gt; class Animator <p>The documentation for this class was generated from the following file <code>include/uipc/core/animator.h</code></p>"},{"location":"Libuipc/animator_8h_source/","title":"File animator.h","text":""},{"location":"Libuipc/animator_8h_source/#file-animatorh","title":"File animator.h","text":"<p>File List &gt; core &gt; animator.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/object.h&gt;\n#include &lt;uipc/core/animation.h&gt;\n#include &lt;functional&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::backend\n{\nclass AnimatorVisitor;\n}\n\nnamespace uipc::core\n{\nclass Scene;\nclass UIPC_CORE_API Animator\n{\n  public:\n    void  substep(SizeT n) noexcept;\n    SizeT substep() const noexcept;\n\n    void insert(Object&amp; obj, Animation::ActionOnUpdate&amp;&amp; on_update);\n    void erase(IndexT id);\n\n    // delete copy/move constructor/assignment\n    Animator(const Animator&amp;)            = delete;\n    Animator(Animator&amp;&amp;)                 = delete;\n    Animator&amp; operator=(const Animator&amp;) = delete;\n    Animator&amp; operator=(Animator&amp;&amp;)      = delete;\n\n  private:\n    friend class internal::Scene;\n    friend class backend::AnimatorVisitor;\n    friend struct fmt::formatter&lt;Animator&gt;;\n\n    Animator(internal::Scene&amp; scene) noexcept;\n\n    unordered_map&lt;IndexT, Animation&gt; m_animations;\n    internal::Scene&amp;                 m_scene;\n    SizeT                            m_substep = 1;\n};\n}  // namespace uipc::core\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::core::Animator&gt; : formatter&lt;string_view&gt;\n{\n    appender format(const uipc::core::Animator&amp; c, format_context&amp; ctx) const;\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/constitution__tabular_8h/","title":"File constitution_tabular.h","text":""},{"location":"Libuipc/constitution__tabular_8h/#file-constitution_tabularh","title":"File constitution_tabular.h","text":"<p>FileList &gt; core &gt; constitution_tabular.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/constitution/constitution.h&gt;</code></li> <li><code>#include &lt;uipc/builtin/constitution_type.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/common/set.h&gt;</code></li> </ul>"},{"location":"Libuipc/constitution__tabular_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/constitution__tabular_8h/#classes","title":"Classes","text":"Type Name class ConstitutionTabular <p>The documentation for this class was generated from the following file <code>include/uipc/core/constitution_tabular.h</code></p>"},{"location":"Libuipc/constitution__tabular_8h_source/","title":"File constitution_tabular.h","text":""},{"location":"Libuipc/constitution__tabular_8h_source/#file-constitution_tabularh","title":"File constitution_tabular.h","text":"<p>File List &gt; core &gt; constitution_tabular.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/constitution/constitution.h&gt;\n#include &lt;uipc/builtin/constitution_type.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/common/set.h&gt;\n\nnamespace uipc::backend\n{\nclass SceneVisitor;\n}\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API ConstitutionTabular\n{\n    friend class internal::Scene;\n\n  public:\n    ConstitutionTabular() noexcept;\n    ~ConstitutionTabular() noexcept;\n    // delete copy\n    ConstitutionTabular(const ConstitutionTabular&amp;)            = delete;\n    ConstitutionTabular&amp; operator=(const ConstitutionTabular&amp;) = delete;\n\n    void      insert(const constitution::IConstitution&amp; constitution);\n    span&lt;U64&gt; uids() const noexcept;\n    const set&lt;std::string&gt;&amp; types() const noexcept;\n\n  private:\n    class Impl;\n    U&lt;Impl&gt; m_impl;\n    friend class Scene;\n    void init(internal::Scene&amp; scene);  // only be called by Scene.\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/contact__element_8h/","title":"File contact_element.h","text":""},{"location":"Libuipc/contact__element_8h/#file-contact_elementh","title":"File contact_element.h","text":"<p>FileList &gt; core &gt; contact_element.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/string.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/contact__element_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/contact__element_8h/#classes","title":"Classes","text":"Type Name class ContactElement <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_element.h</code></p>"},{"location":"Libuipc/contact__element_8h_source/","title":"File contact_element.h","text":""},{"location":"Libuipc/contact__element_8h_source/#file-contact_elementh","title":"File contact_element.h","text":"<p>File List &gt; core &gt; contact_element.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/common/json.h&gt;\n#include &lt;uipc/geometry/geometry.h&gt;\nnamespace uipc::core\n{\nclass UIPC_CORE_API ContactElement\n{\n  public:\n    ContactElement() = default;\n\n    ContactElement(const ContactElement&amp;)            = default;\n    ContactElement(ContactElement&amp;&amp;)                 = default;\n    ContactElement&amp; operator=(const ContactElement&amp;) = default;\n    ContactElement&amp; operator=(ContactElement&amp;&amp;)      = default;\n\n    ContactElement(IndexT id, std::string_view name) noexcept;\n    IndexT           id() const noexcept;\n    std::string_view name() const noexcept;\n\n    friend void to_json(Json&amp; j, const ContactElement&amp; element);\n    friend void from_json(const Json&amp; j, ContactElement&amp; element);\n\n    S&lt;geometry::AttributeSlot&lt;IndexT&gt;&gt; apply_to(geometry::Geometry&amp; geo) const;\n\n  private:\n    IndexT m_id = -1;\n    string m_name;\n};\n\nvoid to_json(Json&amp; j, const ContactElement&amp; element);\nvoid from_json(const Json&amp; j, ContactElement&amp; element);\n\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/contact__model_8h/","title":"File contact_model.h","text":""},{"location":"Libuipc/contact__model_8h/#file-contact_modelh","title":"File contact_model.h","text":"<p>FileList &gt; core &gt; contact_model.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> </ul>"},{"location":"Libuipc/contact__model_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/contact__model_8h/#classes","title":"Classes","text":"Type Name class ContactModel <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_model.h</code></p>"},{"location":"Libuipc/contact__model_8h_source/","title":"File contact_model.h","text":""},{"location":"Libuipc/contact__model_8h_source/#file-contact_modelh","title":"File contact_model.h","text":"<p>File List &gt; core &gt; contact_model.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/json.h&gt;\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API ContactModel\n{\n  public:\n    ContactModel() noexcept;\n    ContactModel(const Vector2i&amp; ids, Float friction_rate, Float resistance, bool enable, const Json&amp; config);\n\n    const Vector2i&amp; topo() const;\n    Float           friction_rate() const;\n    Float           resistance() const;\n    bool            is_enabled() const;\n    const Json&amp;     config() const;\n\n    friend void to_json(Json&amp; json, const ContactModel&amp; model);\n    friend void from_json(const Json&amp; json, ContactModel&amp; model);\n\n  private:\n    Vector2i m_ids;\n    Float    m_friction_rate;\n    Float    m_resistance;\n    bool     m_enabled;\n    Json     m_config;\n};\n\nvoid to_json(Json&amp; json, const ContactModel&amp; model);\n\nvoid from_json(const Json&amp; json, ContactModel&amp; model);\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/contact__model__collection_8h/","title":"File contact_model_collection.h","text":""},{"location":"Libuipc/contact__model__collection_8h/#file-contact_model_collectionh","title":"File contact_model_collection.h","text":"<p>FileList &gt; core &gt; contact_model_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/attribute_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/contact__model__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace geometry"},{"location":"Libuipc/contact__model__collection_8h/#classes","title":"Classes","text":"Type Name class ContactModelCollectionT &lt;IsConst&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_model_collection.h</code></p>"},{"location":"Libuipc/contact__model__collection_8h_source/","title":"File contact_model_collection.h","text":""},{"location":"Libuipc/contact__model__collection_8h_source/#file-contact_model_collectionh","title":"File contact_model_collection.h","text":"<p>File List &gt; core &gt; contact_model_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/attribute_collection.h&gt;\n\nnamespace uipc::geometry\n{\ntemplate &lt;typename T&gt;\nclass AttributeFriend;\n}\n\nnamespace uipc::core\n{\nclass ContactTabular;\n\ntemplate &lt;bool IsConst&gt;\nclass ContactModelCollectionT\n{\n    template &lt;typename T&gt;\n    friend class geometry::AttributeFriend;\n\n    friend class ContactTabular;\n    using AutoAttributeCollection =\n        std::conditional_t&lt;IsConst, const geometry::AttributeCollection, geometry::AttributeCollection&gt;;\n\n    // Only called by ContactTabular\n    ContactModelCollectionT(AutoAttributeCollection&amp; attributes)\n        : m_attributes(attributes)\n    {\n    }\n\n  public:\n    template &lt;typename T&gt;\n    auto create(std::string_view name, const T&amp; default_value = {}, bool allow_destroy = true)\n        requires(!IsConst)\n    {\n        return m_attributes.template create&lt;T&gt;(name, default_value, allow_destroy);\n    }\n\n    template &lt;typename T&gt;\n    auto find(std::string_view name)\n    {\n        return m_attributes.template find&lt;T&gt;(name);\n    }\n\n    auto find(std::string_view name) { return m_attributes.find(name); }\n\n    auto to_json() const { return m_attributes.to_json(); }\n\n  private:\n    AutoAttributeCollection&amp; m_attributes;\n};\n\nusing ContactModelCollection  = ContactModelCollectionT&lt;false&gt;;\nusing CContactModelCollection = ContactModelCollectionT&lt;true&gt;;\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/contact__tabular_8h/","title":"File contact_tabular.h","text":""},{"location":"Libuipc/contact__tabular_8h/#file-contact_tabularh","title":"File contact_tabular.h","text":"<p>FileList &gt; core &gt; contact_tabular.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/contact_element.h&gt;</code></li> <li><code>#include &lt;uipc/core/contact_model.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/core/contact_model_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/contact__tabular_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/contact__tabular_8h/#classes","title":"Classes","text":"Type Name class ContactTabular <p>The documentation for this class was generated from the following file <code>include/uipc/core/contact_tabular.h</code></p>"},{"location":"Libuipc/contact__tabular_8h_source/","title":"File contact_tabular.h","text":""},{"location":"Libuipc/contact__tabular_8h_source/#file-contact_tabularh","title":"File contact_tabular.h","text":"<p>File List &gt; core &gt; contact_tabular.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/contact_element.h&gt;\n#include &lt;uipc/core/contact_model.h&gt;\n#include &lt;uipc/common/json.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/core/contact_model_collection.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::backend\n{\nclass ContactTabularVisitor;\n}\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API ContactTabular final\n{\n    friend class uipc::backend::ContactTabularVisitor;\n    friend class SceneSnapshot;\n    friend class Scene;\n    friend class internal::Scene;\n\n  public:\n    ContactTabular() noexcept;\n    ~ContactTabular() noexcept;\n    // delete copy_from\n    ContactTabular(const ContactTabular&amp;)            = delete;\n    ContactTabular&amp; operator=(const ContactTabular&amp;) = delete;\n\n    ContactElement create(std::string_view name = \"\") noexcept;\n\n    IndexT insert(const ContactElement&amp; L,\n                  const ContactElement&amp; R,\n                  Float                 friction_rate,\n                  Float                 resistance,\n                  bool                  enable = true,\n                  const Json&amp;           config = default_config());\n\n    ContactModel at(SizeT i, SizeT j) const;\n\n    void default_model(Float       friction_rate,\n                       Float       resistance,\n                       bool        enable = true,\n                       const Json&amp; config = default_config()) noexcept;\n\n    ContactElement default_element() noexcept;\n    ContactModel   default_model() const noexcept;\n\n\n    friend void to_json(Json&amp; j, const ContactTabular&amp; ct);\n\n    SizeT element_count() const noexcept;\n\n    static Json default_config() noexcept;\n\n    ContactModelCollection  contact_models() noexcept;\n    CContactModelCollection contact_models() const noexcept;\n\n  private:\n    class Impl;\n    U&lt;Impl&gt; m_impl;\n    friend class SceneFactory;\n    geometry::AttributeCollection&amp; internal_contact_models() const noexcept;\n    span&lt;ContactElement&gt;           contact_elements() const noexcept;\n    void build_from(const geometry::AttributeCollection&amp; ac, span&lt;const ContactElement&gt; ce);\n    void update_from(const geometry::AttributeCollectionCommit&amp; acc,\n                     span&lt;const ContactElement&gt;                 ce);\n};\n\nvoid to_json(Json&amp; j, const ContactTabular&amp; ct);\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/diff__sim_8h/","title":"File diff_sim.h","text":""},{"location":"Libuipc/diff__sim_8h/#file-diff_simh","title":"File diff_sim.h","text":"<p>FileList &gt; core &gt; diff_sim.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/diff_sim/parameter_collection.h&gt;</code></li> <li><code>#include &lt;uipc/diff_sim/sparse_coo_view.h&gt;</code></li> </ul>"},{"location":"Libuipc/diff__sim_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/diff__sim_8h/#classes","title":"Classes","text":"Type Name class DiffSim <p>The documentation for this class was generated from the following file <code>include/uipc/core/diff_sim.h</code></p>"},{"location":"Libuipc/diff__sim_8h_source/","title":"File diff_sim.h","text":""},{"location":"Libuipc/diff__sim_8h_source/#file-diff_simh","title":"File diff_sim.h","text":"<p>File List &gt; core &gt; diff_sim.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/diff_sim/parameter_collection.h&gt;\n#include &lt;uipc/diff_sim/sparse_coo_view.h&gt;\n\nnamespace uipc::backend\n{\nclass SceneVisitor;\nclass DiffSimVisitor;\n}  // namespace uipc::backend\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::core\n{\nclass Scene;\nclass UIPC_CORE_API DiffSim\n{\n    friend class Scene;\n    friend class internal::Scene;\n    friend class backend::DiffSimVisitor;\n\n\n    DiffSim();\n\n    // delete copy constructor and assignment operator\n    DiffSim(const DiffSim&amp;)            = delete;\n    DiffSim&amp; operator=(const DiffSim&amp;) = delete;\n\n  public:\n    diff_sim::ParameterCollection&amp;       parameters();\n    const diff_sim::ParameterCollection&amp; parameters() const;\n    ~DiffSim();\n\n  private:\n    class Impl;\n    U&lt;Impl&gt; m_impl;\n\n    void init(internal::Scene&amp; scene);  // only be called by Scene\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/engine_8h/","title":"File engine.h","text":""},{"location":"Libuipc/engine_8h/#file-engineh","title":"File engine.h","text":"<p>FileList &gt; core &gt; engine.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/core/i_engine.h&gt;</code></li> <li><code>#include &lt;uipc/backend/visitors/world_visitor.h&gt;</code></li> <li><code>#include &lt;uipc/common/exception.h&gt;</code></li> </ul>"},{"location":"Libuipc/engine_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace internal"},{"location":"Libuipc/engine_8h/#classes","title":"Classes","text":"Type Name class Engine class EngineException <p>The documentation for this class was generated from the following file <code>include/uipc/core/engine.h</code></p>"},{"location":"Libuipc/engine_8h_source/","title":"File engine.h","text":""},{"location":"Libuipc/engine_8h_source/#file-engineh","title":"File engine.h","text":"<p>File List &gt; core &gt; engine.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/core/i_engine.h&gt;\n#include &lt;uipc/backend/visitors/world_visitor.h&gt;\n#include &lt;uipc/common/exception.h&gt;\n\n\nnamespace uipc::core\n{\nnamespace internal\n{\n    class UIPC_CORE_API Engine;\n}\n\nclass World;\nclass UIPC_CORE_API Engine final\n{\n  public:\n    Engine(std::string_view backend_name,\n           std::string_view workspace = \"./\",\n           const Json&amp;      config    = default_config());\n    ~Engine();\n\n    // no copy\n    Engine(const Engine&amp;)            = delete;\n    Engine&amp; operator=(const Engine&amp;) = delete;\n    // allow move\n    Engine(Engine&amp;&amp;) noexcept            = default;\n    Engine&amp; operator=(Engine&amp;&amp;) noexcept = default;\n\n    std::string_view         backend_name() const noexcept;\n    std::string_view         workspace() const noexcept;\n    EngineStatusCollection&amp;  status();\n    const FeatureCollection&amp; features();\n    Json                     to_json() const;\n    static Json              default_config();\n\n  private:\n    friend class World;\n    S&lt;internal::Engine&gt; m_internal;\n};\n\nclass UIPC_CORE_API EngineException : public Exception\n{\n  public:\n    using Exception::Exception;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/engine__status_8h/","title":"File engine_status.h","text":""},{"location":"Libuipc/engine__status_8h/#file-engine_statush","title":"File engine_status.h","text":"<p>FileList &gt; core &gt; engine_status.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> </ul>"},{"location":"Libuipc/engine__status_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/engine__status_8h/#classes","title":"Classes","text":"Type Name class EngineStatus class EngineStatusCollection <p>The documentation for this class was generated from the following file <code>include/uipc/core/engine_status.h</code></p>"},{"location":"Libuipc/engine__status_8h_source/","title":"File engine_status.h","text":""},{"location":"Libuipc/engine__status_8h_source/#file-engine_statush","title":"File engine_status.h","text":"<p>File List &gt; core &gt; engine_status.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;string&gt;\n#include &lt;uipc/common/json.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API EngineStatus\n{\n  public:\n    enum class Type : int\n    {\n        None,\n        Info,\n        Warning,\n        Error,\n    };\n\n    EngineStatus()  = default;\n    ~EngineStatus() = default;\n\n    Type             type() const noexcept;\n    std::string_view what() const noexcept;\n\n    static EngineStatus info(std::string_view msg);\n    static EngineStatus warning(std::string_view msg);\n    static EngineStatus error(std::string_view msg);\n\n  private:\n    Type        m_type = Type::None;\n    std::string m_msg;\n};\n\nclass UIPC_CORE_API EngineStatusCollection\n{\n  public:\n    EngineStatusCollection();\n    ~EngineStatusCollection();\n\n    void push_back(const EngineStatus&amp; error);\n    void push_back(EngineStatus&amp;&amp; error);\n\n    void clear();\n\n    bool has_error() const noexcept;\n\n    Json to_json() const;\n\n  private:\n    class Impl;\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/feature_8h/","title":"File feature.h","text":""},{"location":"Libuipc/feature_8h/#file-featureh","title":"File feature.h","text":"<p>FileList &gt; core &gt; feature.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> </ul>"},{"location":"Libuipc/feature_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/feature_8h/#classes","title":"Classes","text":"Type Name class Feature class IFeature <p>The documentation for this class was generated from the following file <code>include/uipc/core/feature.h</code></p>"},{"location":"Libuipc/feature_8h_source/","title":"File feature.h","text":""},{"location":"Libuipc/feature_8h_source/#file-featureh","title":"File feature.h","text":"<p>File List &gt; core &gt; feature.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API IFeature\n{\n  public:\n    virtual ~IFeature() = default;\n    std::string_view name() const;\n    std::string_view type_name() const;\n\n  protected:\n    virtual std::string_view get_name() const      = 0;\n    virtual std::string_view get_type_name() const = 0;\n};\n\nclass UIPC_CORE_API Feature : public IFeature\n{\n  public:\n  private:\n    virtual std::string_view get_type_name() const override;\n    mutable std::string      m_type_name;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/feature__collection_8h/","title":"File feature_collection.h","text":""},{"location":"Libuipc/feature__collection_8h/#file-feature_collectionh","title":"File feature_collection.h","text":"<p>FileList &gt; core &gt; feature_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/core/feature.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> </ul>"},{"location":"Libuipc/feature__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/feature__collection_8h/#classes","title":"Classes","text":"Type Name class FeatureCollection <p>The documentation for this class was generated from the following file <code>include/uipc/core/feature_collection.h</code></p>"},{"location":"Libuipc/feature__collection_8h_source/","title":"File feature_collection.h","text":""},{"location":"Libuipc/feature__collection_8h_source/#file-feature_collectionh","title":"File feature_collection.h","text":"<p>File List &gt; core &gt; feature_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/unordered_map.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/core/feature.h&gt;\n#include &lt;uipc/common/json.h&gt;\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API FeatureCollection final\n{\n  public:\n    virtual ~FeatureCollection() = default;\n    S&lt;IFeature&gt; find(std::string_view name) const;\n\n    template &lt;std::derived_from&lt;IFeature&gt; T&gt;\n    S&lt;T&gt; find(std::string_view name = T::FeatureName) const\n    {\n        return std::dynamic_pointer_cast&lt;T&gt;(find(name));\n    }\n\n    void insert(std::string_view name, S&lt;IFeature&gt; feature);\n\n    template &lt;std::derived_from&lt;IFeature&gt; T&gt;\n    void insert(S&lt;T&gt; feature)\n    {\n        insert(T::FeatureName, feature);\n    }\n\n    Json to_json() const;\n\n  private:\n    unordered_map&lt;string, S&lt;IFeature&gt;&gt; m_features;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/i__engine_8h/","title":"File i_engine.h","text":""},{"location":"Libuipc/i__engine_8h/#file-i_engineh","title":"File i_engine.h","text":"<p>FileList &gt; core &gt; i_engine.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/backend/visitors/world_visitor.h&gt;</code></li> <li><code>#include &lt;uipc/core/engine_status.h&gt;</code></li> <li><code>#include &lt;uipc/core/feature_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/i__engine_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/i__engine_8h/#classes","title":"Classes","text":"Type Name class IEngine <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_engine.h</code></p>"},{"location":"Libuipc/i__engine_8h_source/","title":"File i_engine.h","text":""},{"location":"Libuipc/i__engine_8h_source/#file-i_engineh","title":"File i_engine.h","text":"<p>File List &gt; core &gt; i_engine.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/backend/visitors/world_visitor.h&gt;\n#include &lt;uipc/core/engine_status.h&gt;\n#include &lt;uipc/core/feature_collection.h&gt;\n\nnamespace uipc::core\n{\nclass World;\n\nclass UIPC_CORE_API IEngine\n{\n  public:\n    virtual ~IEngine() = default;\n    void init(internal::World&amp; w);\n    void advance();\n    void backward();\n    void sync();\n    void retrieve();\n    Json to_json() const;\n\n    bool                     dump();\n    bool                     recover(SizeT dst_frame);\n    SizeT                    frame() const;\n    EngineStatusCollection&amp;  status();\n    const FeatureCollection&amp; features() const;\n\n  protected:\n    virtual void                     do_init(internal::World&amp;) = 0;\n    virtual void                     do_advance()              = 0;\n    virtual void                     do_backward()             = 0;\n    virtual void                     do_sync()                 = 0;\n    virtual void                     do_retrieve()             = 0;\n    virtual Json                     do_to_json() const;\n    virtual bool                     do_dump();\n    virtual bool                     do_recover(SizeT dst_frame);\n    virtual SizeT                    get_frame() const    = 0;\n    virtual EngineStatusCollection&amp;  get_status()         = 0;\n    virtual const FeatureCollection&amp; get_features() const = 0;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/i__sanity__checker_8h/","title":"File i_sanity_checker.h","text":""},{"location":"Libuipc/i__sanity__checker_8h/#file-i_sanity_checkerh","title":"File i_sanity_checker.h","text":"<p>FileList &gt; core &gt; i_sanity_checker.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/i__sanity__checker_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/i__sanity__checker_8h/#classes","title":"Classes","text":"Type Name class ISanityChecker class ISanityCheckerCollection class SanityCheckMessage class SanityCheckMessageCollection class SanityCheckerCollectionCreateInfo <p>The documentation for this class was generated from the following file <code>include/uipc/core/i_sanity_checker.h</code></p>"},{"location":"Libuipc/i__sanity__checker_8h_source/","title":"File i_sanity_checker.h","text":""},{"location":"Libuipc/i__sanity__checker_8h_source/#file-i_sanity_checkerh","title":"File i_sanity_checker.h","text":"<p>File List &gt; core &gt; i_sanity_checker.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n#include &lt;uipc/geometry/geometry.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::backend\n{\nclass SanityCheckMessageVisitor;\n}\n\nnamespace uipc::core\n{\nclass Scene;\n\nenum class SanityCheckResult : int\n{\n    Success = 0,\n    Warning = 1,\n    Error   = 2\n};\n\nclass UIPC_CORE_API SanityCheckMessage\n{\n  public:\n    SanityCheckMessage() = default;\n\n    U64               id() const noexcept;\n    std::string_view  name() const noexcept;\n    SanityCheckResult result() const noexcept;\n    std::string_view  message() const noexcept;\n    const unordered_map&lt;std::string, S&lt;geometry::Geometry&gt;&gt;&amp; geometries() const noexcept;\n    bool is_empty() const noexcept;\n\n  private:\n    friend class backend::SanityCheckMessageVisitor;\n    U64               m_id = 0;\n    std::string       m_name;\n    SanityCheckResult m_result = SanityCheckResult::Success;\n    std::string       m_message;\n    unordered_map&lt;std::string, S&lt;geometry::Geometry&gt;&gt; m_geometries;\n};\n\nclass UIPC_CORE_API SanityCheckMessageCollection\n{\n  public:\n    SanityCheckMessageCollection() = default;\n    const auto&amp; messages() const noexcept { return m_messages; }\n    auto&amp;       messages() noexcept { return m_messages; }\n\n  private:\n    unordered_map&lt;U64, S&lt;SanityCheckMessage&gt;&gt; m_messages;\n};\n\nclass UIPC_CORE_API ISanityChecker\n{\n  public:\n    virtual ~ISanityChecker() = default;\n    virtual void      build();\n    U64               id() const noexcept;\n    SanityCheckResult check(SanityCheckMessage&amp; msg);\n    std::string       name() const noexcept;\n\n  protected:\n    virtual U64               get_id() const noexcept           = 0;\n    virtual std::string       get_name() const noexcept         = 0;\n    virtual SanityCheckResult do_check(SanityCheckMessage&amp; msg) = 0;\n};\n\nclass UIPC_CORE_API SanityCheckerCollectionCreateInfo\n{\n  public:\n    std::string_view workspace;\n};\n\nclass UIPC_CORE_API ISanityCheckerCollection\n{\n  public:\n    virtual ~ISanityCheckerCollection()          = default;\n    virtual void build(core::internal::Scene&amp; s) = 0;\n    virtual SanityCheckResult check(SanityCheckMessageCollection&amp; msg) const = 0;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/dir_115c6c39d81d30f3e74f2509c90b0b60/","title":"Dir include/uipc/core/internal","text":""},{"location":"Libuipc/dir_115c6c39d81d30f3e74f2509c90b0b60/#dir-includeuipccoreinternal","title":"Dir include/uipc/core/internal","text":"<p>FileList &gt; core &gt; internal</p>"},{"location":"Libuipc/dir_115c6c39d81d30f3e74f2509c90b0b60/#files","title":"Files","text":"Type Name file engine.h file scene.h file world.h <p>The documentation for this class was generated from the following file <code>include/uipc/core/internal/</code></p>"},{"location":"Libuipc/internal_2engine_8h/","title":"File engine.h","text":""},{"location":"Libuipc/internal_2engine_8h/#file-engineh","title":"File engine.h","text":"<p>FileList &gt; core &gt; internal &gt; engine.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/core/i_engine.h&gt;</code></li> <li><code>#include &lt;uipc/backend/visitors/world_visitor.h&gt;</code></li> <li><code>#include &lt;uipc/common/exception.h&gt;</code></li> </ul>"},{"location":"Libuipc/internal_2engine_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace internal"},{"location":"Libuipc/internal_2engine_8h/#classes","title":"Classes","text":"Type Name class Engine <p>The documentation for this class was generated from the following file <code>include/uipc/core/internal/engine.h</code></p>"},{"location":"Libuipc/internal_2engine_8h_source/","title":"File engine.h","text":""},{"location":"Libuipc/internal_2engine_8h_source/#file-engineh","title":"File engine.h","text":"<p>File List &gt; core &gt; internal &gt; engine.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/core/i_engine.h&gt;\n#include &lt;uipc/backend/visitors/world_visitor.h&gt;\n#include &lt;uipc/common/exception.h&gt;\n\nnamespace uipc::core::internal\n{\nclass World;\n\nclass UIPC_CORE_API Engine final\n{\n    class Impl;\n\n  public:\n    Engine(std::string_view backend_name,\n           std::string_view workspace = \"./\",\n           const Json&amp;      config    = default_config());\n    ~Engine();\n\n    std::string_view         backend_name() const noexcept;\n    std::string_view         workspace() const noexcept;\n    EngineStatusCollection&amp;  status();\n    const FeatureCollection&amp; features();\n\n    Json to_json() const;\n\n    static Json default_config();\n\n  private:\n    friend class internal::World;\n    // only be called by internal::world\n    void  init(internal::World&amp; world);\n    void  advance();\n    void  backward();\n    void  sync();\n    void  retrieve();\n    bool  dump();\n    bool  recover(SizeT dst_frame);\n    SizeT frame() const;\n\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::core::internal\n</code></pre>"},{"location":"Libuipc/internal_2scene_8h/","title":"File scene.h","text":""},{"location":"Libuipc/internal_2scene_8h/#file-sceneh","title":"File scene.h","text":"<p>FileList &gt; core &gt; internal &gt; scene.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/contact_tabular.h&gt;</code></li> <li><code>#include &lt;uipc/core/constitution_tabular.h&gt;</code></li> <li><code>#include &lt;uipc/core/object.h&gt;</code></li> <li><code>#include &lt;uipc/core/object_collection.h&gt;</code></li> <li><code>#include &lt;uipc/core/animator.h&gt;</code></li> <li><code>#include &lt;uipc/core/diff_sim.h&gt;</code></li> <li><code>#include &lt;uipc/core/sanity_checker.h&gt;</code></li> <li><code>#include &lt;uipc/core/internal/world.h&gt;</code></li> </ul>"},{"location":"Libuipc/internal_2scene_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace internal"},{"location":"Libuipc/internal_2scene_8h/#classes","title":"Classes","text":"Type Name class Scene <p>The documentation for this class was generated from the following file <code>include/uipc/core/internal/scene.h</code></p>"},{"location":"Libuipc/internal_2scene_8h_source/","title":"File scene.h","text":""},{"location":"Libuipc/internal_2scene_8h_source/#file-sceneh","title":"File scene.h","text":"<p>File List &gt; core &gt; internal &gt; scene.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/contact_tabular.h&gt;\n#include &lt;uipc/core/constitution_tabular.h&gt;\n#include &lt;uipc/core/object.h&gt;\n#include &lt;uipc/core/object_collection.h&gt;\n#include &lt;uipc/core/animator.h&gt;\n#include &lt;uipc/core/diff_sim.h&gt;\n#include &lt;uipc/core/sanity_checker.h&gt;\n#include &lt;uipc/core/internal/world.h&gt;\n\nnamespace uipc::core\n{\nclass SceneSnapshotCommit;\n}\n\nnamespace uipc::core::internal\n{\nclass World;\n\nclass UIPC_CORE_API Scene : public std::enable_shared_from_this&lt;Scene&gt;\n{\n    friend class core::Scene;\n\n  public:\n    Scene(const Json&amp; config) noexcept;\n\n    ~Scene();\n\n    void init(internal::World&amp; world) noexcept;\n\n    void begin_pending() noexcept;\n\n    void solve_pending() noexcept;\n\n    void update_from(const SceneSnapshotCommit&amp; commit);\n\n    auto&amp; config() const noexcept { return m_config; }\n    auto&amp; config() noexcept { return m_config; }\n    Float dt() const noexcept { return m_config[\"dt\"].get&lt;Float&gt;(); }\n    bool  is_started() const noexcept { return m_started; }\n    bool  is_pending() const noexcept { return m_pending; }\n    auto&amp; contact_tabular() const noexcept { return m_contact_tabular; }\n    auto&amp; contact_tabular() noexcept { return m_contact_tabular; }\n    auto&amp; constitution_tabular() const noexcept\n    {\n        return m_constitution_tabular;\n    }\n    auto&amp; constitution_tabular() noexcept { return m_constitution_tabular; }\n    auto&amp; animator() const noexcept { return m_animator; }\n    auto&amp; animator() noexcept { return m_animator; }\n    auto&amp; diff_sim() const noexcept { return m_diff_sim; }\n    auto&amp; diff_sim() noexcept { return m_diff_sim; }\n    auto  world() noexcept { return m_world; }\n    auto&amp; objects() const noexcept { return m_objects; }\n    auto&amp; objects() noexcept { return m_objects; }\n    auto&amp; geometries() const noexcept { return m_geometries; }\n    auto&amp; geometries() noexcept { return m_geometries; }\n    auto&amp; rest_geometries() const noexcept { return m_rest_geometries; }\n    auto&amp; rest_geometries() noexcept { return m_rest_geometries; }\n    auto&amp; sanity_checker() const noexcept { return m_sanity_checker; }\n    auto&amp; sanity_checker() noexcept { return m_sanity_checker; }\n\n  private:\n    Json                m_config;\n    ContactTabular      m_contact_tabular;\n    ConstitutionTabular m_constitution_tabular;\n    ObjectCollection    m_objects;\n    Animator            m_animator;\n    DiffSim             m_diff_sim;\n\n    geometry::GeometryCollection m_geometries;\n    geometry::GeometryCollection m_rest_geometries;\n    SanityChecker                m_sanity_checker;\n\n    bool             m_started = false;\n    bool             m_pending = false;\n    internal::World* m_world   = nullptr;\n    Float            m_dt      = 0.0;\n};\n}  // namespace uipc::core::internal\n</code></pre>"},{"location":"Libuipc/internal_2world_8h/","title":"File world.h","text":""},{"location":"Libuipc/internal_2world_8h/#file-worldh","title":"File world.h","text":"<p>FileList &gt; core &gt; internal &gt; world.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/internal/scene.h&gt;</code></li> <li><code>#include &lt;uipc/core/internal/engine.h&gt;</code></li> <li><code>#include &lt;uipc/core/feature_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/internal_2world_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace internal"},{"location":"Libuipc/internal_2world_8h/#classes","title":"Classes","text":"Type Name class World <p>The documentation for this class was generated from the following file <code>include/uipc/core/internal/world.h</code></p>"},{"location":"Libuipc/internal_2world_8h_source/","title":"File world.h","text":""},{"location":"Libuipc/internal_2world_8h_source/#file-worldh","title":"File world.h","text":"<p>File List &gt; core &gt; internal &gt; world.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/internal/scene.h&gt;\n#include &lt;uipc/core/internal/engine.h&gt;\n#include &lt;uipc/core/feature_collection.h&gt;\n\nnamespace uipc::core::internal\n{\nclass UIPC_CORE_API World final : public std::enable_shared_from_this&lt;World&gt;\n{\n    friend class backend::WorldVisitor;\n    friend class SanityChecker;\n\n  public:\n    World(internal::Engine&amp; e) noexcept;\n    void init(internal::Scene&amp; s);\n\n    void advance();\n    void sync();\n    void retrieve();\n    void backward();\n    bool dump();\n    bool recover(SizeT aim_frame = ~0ull);\n    bool is_valid() const;\n\n    SizeT frame() const;\n\n    const FeatureCollection&amp; features() const;\n\n  private:\n    internal::Scene*  m_scene  = nullptr;\n    internal::Engine* m_engine = nullptr;\n    bool              m_valid  = true;\n    void              sanity_check(Scene&amp; s);\n};\n}  // namespace uipc::core::internal\n</code></pre>"},{"location":"Libuipc/object_8h/","title":"File object.h","text":""},{"location":"Libuipc/object_8h/#file-objecth","title":"File object.h","text":"<p>FileList &gt; core &gt; object.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;uipc/common/vector.h&gt;</code></li> <li><code>#include &lt;uipc/common/string.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_traits.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_collection.h&gt;</code></li> <li><code>#include \"details/object.inl\"</code></li> </ul>"},{"location":"Libuipc/object_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace core namespace internal"},{"location":"Libuipc/object_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::core::Object &gt; &lt;&gt; class IObject class Object class CGeometries class Geometries class ObjectGeometrySlots &lt;GeometryT&gt; class ObjectGeometrySlots&lt; const geometry::Geometry &gt; &lt;&gt; class ObjectGeometrySlots&lt; geometry::Geometry &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/core/object.h</code></p>"},{"location":"Libuipc/object_8h_source/","title":"File object.h","text":""},{"location":"Libuipc/object_8h_source/#file-objecth","title":"File object.h","text":"<p>File List &gt; core &gt; object.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n#include &lt;uipc/common/vector.h&gt;\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n#include &lt;uipc/common/type_traits.h&gt;\n#include &lt;uipc/geometry/geometry_collection.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::core\n{\nclass ObjectSnapshot;\nclass Scene;\n\nclass UIPC_CORE_API IObject\n{\n  public:\n    virtual ~IObject() = default;\n    [[nodiscard]] std::string_view name() const noexcept;\n    [[nodiscard]] IndexT           id() const noexcept;\n\n  protected:\n    virtual std::string_view get_name() const noexcept = 0;\n    virtual IndexT           get_id() const noexcept   = 0;\n};\n\nclass Object;\n\ntemplate &lt;std::derived_from&lt;geometry::Geometry&gt; GeometryT&gt;\nclass ObjectGeometrySlots\n{\n    using NonConstGeometryT = std::remove_const_t&lt;GeometryT&gt;;\n    using AutoGeometrySlot =\n        typename propagate_const&lt;GeometryT, geometry::GeometrySlotT&lt;NonConstGeometryT&gt;&gt;::type;\n\n  public:\n    S&lt;AutoGeometrySlot&gt; geometry;\n    S&lt;AutoGeometrySlot&gt; rest_geometry;\n};\n\ntemplate &lt;&gt;\nclass UIPC_CORE_API ObjectGeometrySlots&lt;geometry::Geometry&gt;\n{\n  public:\n    S&lt;geometry::GeometrySlot&gt; geometry;\n    S&lt;geometry::GeometrySlot&gt; rest_geometry;\n};\n\ntemplate &lt;&gt;\nclass UIPC_CORE_API ObjectGeometrySlots&lt;const geometry::Geometry&gt;\n{\n  public:\n    S&lt;const geometry::GeometrySlot&gt; geometry;\n    S&lt;const geometry::GeometrySlot&gt; rest_geometry;\n};\n\nclass UIPC_CORE_API Object : public IObject\n{\n    friend class Scene;\n    friend class Animation;\n    friend class ObjectCollection;\n    friend class SceneFactory;\n    friend class ObjectSnapshot;\n\n  public:\n    class UIPC_CORE_API Geometries\n    {\n        friend class Object;\n\n      public:\n        template &lt;std::derived_from&lt;geometry::Geometry&gt; GeometryT&gt;\n            requires(!std::is_abstract_v&lt;GeometryT&gt;)\n        ObjectGeometrySlots&lt;GeometryT&gt; create(const GeometryT&amp; geometry) &amp;&amp;;\n\n        template &lt;std::derived_from&lt;geometry::Geometry&gt; GeometryT&gt;\n            requires(!std::is_abstract_v&lt;GeometryT&gt;)\n        ObjectGeometrySlots&lt;GeometryT&gt; create(const GeometryT&amp; geometry,\n                                              const GeometryT&amp; rest_geometry) &amp;&amp;;\n\n\n        span&lt;const IndexT&gt; ids() &amp;&amp; noexcept;\n\n      private:\n        Geometries(Object&amp; object) noexcept;\n        Object&amp; m_object;\n    };\n\n    class UIPC_CORE_API CGeometries\n    {\n        friend class Object;\n\n      public:\n        span&lt;const IndexT&gt; ids() &amp;&amp; noexcept;\n\n      private:\n        CGeometries(const Object&amp; object) noexcept;\n        const Object&amp; m_object;\n    };\n\n    Object(internal::Scene&amp; scene, IndexT id, std::string_view name = \"\") noexcept;\n    Object() noexcept;\n    Object(Object&amp;&amp;) = default;\n    ~Object();\n\n    Object(const Object&amp;)            = delete;\n    Object&amp; operator=(const Object&amp;) = delete;\n    Object&amp; operator=(Object&amp;&amp;)      = delete;\n\n    [[nodiscard]] Geometries  geometries() noexcept;\n    [[nodiscard]] CGeometries geometries() const noexcept;\n\n  protected:\n    [[nodiscard]] std::string_view get_name() const noexcept override;\n    [[nodiscard]] IndexT           get_id() const noexcept override;\n\n  private:\n    friend struct fmt::formatter&lt;Object&gt;;\n\n    internal::Scene*              m_scene = nullptr;\n    IndexT                        m_id;\n    string                        m_name;\n    vector&lt;IndexT&gt;                m_geometry_ids;\n    geometry::GeometryCollection&amp; geometry_collection() noexcept;\n    geometry::GeometryCollection&amp; rest_geometry_collection() noexcept;\n    bool                          scene_started() const noexcept;\n    bool                          scene_pending() const noexcept;\n\n    void build_from(span&lt;const IndexT&gt; geo_ids) noexcept;\n    void update_from(const ObjectSnapshot&amp; snapshot) noexcept;\n\n    friend void to_json(Json&amp; j, const Object&amp; object) noexcept;\n    friend void from_json(const Json&amp; j, Object&amp; object) noexcept;\n};\n\nvoid to_json(Json&amp; j, const Object&amp; object) noexcept;\nvoid from_json(const Json&amp; j, Object&amp; object) noexcept;\n}  // namespace uipc::core\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::core::Object&gt; : formatter&lt;string_view&gt;\n{\n    appender format(const uipc::core::Object&amp; c, format_context&amp; ctx) const;\n};\n}  // namespace fmt\n\n#include \"details/object.inl\"\n</code></pre>"},{"location":"Libuipc/object__collection_8h/","title":"File object_collection.h","text":""},{"location":"Libuipc/object__collection_8h/#file-object_collectionh","title":"File object_collection.h","text":"<p>FileList &gt; core &gt; object_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> <li><code>#include &lt;uipc/core/object.h&gt;</code></li> <li><code>#include &lt;uipc/core/object_snapshot.h&gt;</code></li> <li><code>#include &lt;uipc/common/set.h&gt;</code></li> </ul>"},{"location":"Libuipc/object__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace core namespace internal"},{"location":"Libuipc/object__collection_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::core::ObjectCollection &gt; &lt;&gt; class IObjectCollection class ObjectCollection class ObjectCollectionSnapshot <p>The documentation for this class was generated from the following file <code>include/uipc/core/object_collection.h</code></p>"},{"location":"Libuipc/object__collection_8h_source/","title":"File object_collection.h","text":""},{"location":"Libuipc/object__collection_8h_source/#file-object_collectionh","title":"File object_collection.h","text":"<p>File List &gt; core &gt; object_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/unordered_map.h&gt;\n#include &lt;uipc/core/object.h&gt;\n#include &lt;uipc/core/object_snapshot.h&gt;\n#include &lt;uipc/common/set.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::core\n{\nclass ObjectCollectionSnapshot;\n\nclass UIPC_CORE_API IObjectCollection\n{\n  public:\n    virtual ~IObjectCollection() = default;\n};\n\nclass UIPC_CORE_API ObjectCollection : public IObjectCollection\n{\n    friend class Scene;\n    friend class internal::Scene;\n    friend class SceneFactory;\n    friend class SceneSnapshot;\n    friend class SceneSnapshotCommit;\n    friend class ObjectCollectionSnapshot;\n    friend struct fmt::formatter&lt;ObjectCollection&gt;;\n\n  public:\n    ObjectCollection() = default;\n    S&lt;Object&gt; emplace(Object&amp;&amp; object);\n\n    S&lt;Object&gt;               find(IndexT id) noexcept;\n    S&lt;const Object&gt;         find(IndexT id) const noexcept;\n    vector&lt;S&lt;Object&gt;&gt;       find(std::string_view name) noexcept;\n    vector&lt;S&lt;const Object&gt;&gt; find(std::string_view name) const noexcept;\n\n    void destroy(IndexT id) noexcept;\n\n    void   reserve(SizeT size) noexcept;\n    SizeT  size() const noexcept;\n    IndexT next_id() const noexcept;\n\n  private:\n    mutable IndexT                   m_next_id = 0;\n    unordered_map&lt;IndexT, S&lt;Object&gt;&gt; m_objects;\n\n    unordered_map&lt;IndexT, S&lt;Object&gt;&gt;&amp;       objects();\n    const unordered_map&lt;IndexT, S&lt;Object&gt;&gt;&amp; objects() const;\n\n    void build_from(span&lt;S&lt;Object&gt;&gt; objects) noexcept;\n    void update_from(internal::Scene&amp; scene, const ObjectCollectionSnapshot&amp; snapshot) noexcept;\n};\n\nclass UIPC_CORE_API ObjectCollectionSnapshot\n{\n    friend class SceneFactory;\n    friend class ObjectCollection;\n    friend UIPC_CORE_API void to_json(Json&amp; j, const ObjectCollectionSnapshot&amp; obj);\n    friend UIPC_CORE_API void from_json(const Json&amp; j, ObjectCollectionSnapshot&amp; obj);\n\n  public:\n    ObjectCollectionSnapshot() = default;\n    ObjectCollectionSnapshot(const ObjectCollection&amp; dst);\n\n  private:\n    unordered_map&lt;IndexT, ObjectSnapshot&gt; m_objects;\n    IndexT                                m_next_id = 0;\n};\n\nvoid UIPC_CORE_API to_json(Json&amp; j, const ObjectCollectionSnapshot&amp; obj);\nvoid UIPC_CORE_API from_json(const Json&amp; j, ObjectCollectionSnapshot&amp; obj);\n}  // namespace uipc::core\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::core::ObjectCollection&gt; : formatter&lt;string_view&gt;\n{\n    appender format(const uipc::core::ObjectCollection&amp; c, format_context&amp; ctx) const;\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/object__snapshot_8h/","title":"File object_snapshot.h","text":""},{"location":"Libuipc/object__snapshot_8h/#file-object_snapshoth","title":"File object_snapshot.h","text":"<p>FileList &gt; core &gt; object_snapshot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/vector.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> </ul>"},{"location":"Libuipc/object__snapshot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace internal"},{"location":"Libuipc/object__snapshot_8h/#classes","title":"Classes","text":"Type Name class ObjectSnapshot <p>The documentation for this class was generated from the following file <code>include/uipc/core/object_snapshot.h</code></p>"},{"location":"Libuipc/object__snapshot_8h_source/","title":"File object_snapshot.h","text":""},{"location":"Libuipc/object__snapshot_8h_source/#file-object_snapshoth","title":"File object_snapshot.h","text":"<p>File List &gt; core &gt; object_snapshot.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/vector.h&gt;\n#include &lt;uipc/common/json.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\nnamespace uipc::core\n{\nclass SceneFactory;\n\nclass SceneSnapshot;\n\nclass Object;\n\nclass UIPC_CORE_API ObjectSnapshot\n{\n    friend class SceneSnapshot;\n    friend class SceneFactory;\n    friend class ObjectCollection;\n    friend class internal::Scene;\n    friend class Object;\n\n    friend UIPC_CORE_API void to_json(Json&amp; j, const ObjectSnapshot&amp; snapshot);\n    friend UIPC_CORE_API void from_json(const Json&amp; j, ObjectSnapshot&amp; snapshot);\n\n  public:\n    ObjectSnapshot() = default;\n    ObjectSnapshot(const Object&amp; object);\n    IndexT id() const noexcept { return m_id; }\n\n  private:\n    IndexT         m_id;\n    std::string    m_name;\n    vector&lt;IndexT&gt; m_geometries;\n};\n\nUIPC_CORE_API void to_json(Json&amp; j, const ObjectSnapshot&amp; snapshot);\nUIPC_CORE_API void from_json(const Json&amp; j, ObjectSnapshot&amp; snapshot);\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/sanity__checker_8h/","title":"File sanity_checker.h","text":""},{"location":"Libuipc/sanity__checker_8h/#file-sanity_checkerh","title":"File sanity_checker.h","text":"<p>FileList &gt; core &gt; sanity_checker.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/i_sanity_checker.h&gt;</code></li> </ul>"},{"location":"Libuipc/sanity__checker_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace internal"},{"location":"Libuipc/sanity__checker_8h/#classes","title":"Classes","text":"Type Name class SanityChecker <p>The documentation for this class was generated from the following file <code>include/uipc/core/sanity_checker.h</code></p>"},{"location":"Libuipc/sanity__checker_8h_source/","title":"File sanity_checker.h","text":""},{"location":"Libuipc/sanity__checker_8h_source/#file-sanity_checkerh","title":"File sanity_checker.h","text":"<p>File List &gt; core &gt; sanity_checker.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/i_sanity_checker.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::core\n{\nclass Scene;\n\nclass UIPC_CORE_API SanityChecker final\n{\n  public:\n    SanityChecker(internal::Scene&amp; scene);\n    ~SanityChecker();\n\n    SanityCheckResult check(std::string_view workspace);\n    void              report();\n\n    const unordered_map&lt;U64, S&lt;SanityCheckMessage&gt;&gt;&amp; errors() const;\n    const unordered_map&lt;U64, S&lt;SanityCheckMessage&gt;&gt;&amp; warns() const;\n    const unordered_map&lt;U64, S&lt;SanityCheckMessage&gt;&gt;&amp; infos() const;\n\n    void clear();\n\n  private:\n    core::SanityCheckMessageCollection m_errors;\n    core::SanityCheckMessageCollection m_warns;\n    core::SanityCheckMessageCollection m_infos;\n\n    internal::Scene&amp; m_scene;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/scene_8h/","title":"File scene.h","text":""},{"location":"Libuipc/scene_8h/#file-sceneh","title":"File scene.h","text":"<p>FileList &gt; core &gt; scene.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/contact_tabular.h&gt;</code></li> <li><code>#include &lt;uipc/core/constitution_tabular.h&gt;</code></li> <li><code>#include &lt;uipc/core/object.h&gt;</code></li> <li><code>#include &lt;uipc/core/object_collection.h&gt;</code></li> <li><code>#include &lt;uipc/core/animator.h&gt;</code></li> <li><code>#include &lt;uipc/core/diff_sim.h&gt;</code></li> <li><code>#include &lt;uipc/core/sanity_checker.h&gt;</code></li> </ul>"},{"location":"Libuipc/scene_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace backend namespace core namespace internal namespace sanity_check"},{"location":"Libuipc/scene_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::core::Scene &gt; &lt;&gt; class Scene class CGeometries class CObjects class Geometries class Objects <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene.h</code></p>"},{"location":"Libuipc/scene_8h_source/","title":"File scene.h","text":""},{"location":"Libuipc/scene_8h_source/#file-sceneh","title":"File scene.h","text":"<p>File List &gt; core &gt; scene.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/contact_tabular.h&gt;\n#include &lt;uipc/core/constitution_tabular.h&gt;\n#include &lt;uipc/core/object.h&gt;\n#include &lt;uipc/core/object_collection.h&gt;\n#include &lt;uipc/core/animator.h&gt;\n#include &lt;uipc/core/diff_sim.h&gt;\n#include &lt;uipc/core/sanity_checker.h&gt;\nnamespace uipc::core::internal\n{\nclass Scene;\nclass World;\n}  // namespace uipc::core::internal\n\nnamespace uipc::backend\n{\nclass SceneVisitor;\nclass WorldVisitor;\n}  // namespace uipc::backend\n\nnamespace uipc::sanity_check\n{\nclass SanityChecker;\n}\n\nnamespace uipc::core\n{\nclass SceneSnapshotCommit;\nclass SceneSnapshot;\n\nclass UIPC_CORE_API Scene final\n{\n    friend class backend::SceneVisitor;\n    friend class World;\n    friend class Object;\n    friend class sanity_check::SanityChecker;\n    friend class Animation;\n    friend class SceneFactory;\n    friend class SceneSnapshot;\n    friend struct fmt::formatter&lt;Scene&gt;;\n\n  public:\n    explicit Scene(const Json&amp; config = default_config());\n\n    Scene(const Scene&amp;) = delete;\n    Scene(Scene&amp;&amp;)      = default;\n\n    ~Scene();\n\n    static Json default_config() noexcept;\n\n    class UIPC_CORE_API Objects\n    {\n        friend class Scene;\n\n      public:\n        S&lt;Object&gt;         create(std::string_view name = \"\") &amp;&amp;;\n        S&lt;Object&gt;         find(IndexT id) &amp;&amp; noexcept;\n        vector&lt;S&lt;Object&gt;&gt; find(std::string_view name) &amp;&amp; noexcept;\n        void              destroy(IndexT id) &amp;&amp;;\n        SizeT             size() const noexcept;\n        SizeT             created_count() const noexcept;\n\n      private:\n        Objects(internal::Scene&amp; scene) noexcept;\n        internal::Scene&amp; m_scene;\n    };\n\n    class UIPC_CORE_API CObjects\n    {\n        friend class Scene;\n\n      public:\n        S&lt;const Object&gt;         find(IndexT id) &amp;&amp; noexcept;\n        vector&lt;S&lt;const Object&gt;&gt; find(std::string_view name) &amp;&amp; noexcept;\n        SizeT                   size() const noexcept;\n        SizeT                   created_count() const noexcept;\n\n      private:\n        CObjects(const internal::Scene&amp; scene) noexcept;\n        const internal::Scene&amp; m_scene;\n    };\n\n    class UIPC_CORE_API Geometries\n    {\n        friend class Scene;\n\n      public:\n        ObjectGeometrySlots&lt;geometry::Geometry&gt; find(IndexT id) &amp;&amp; noexcept;\n\n      private:\n        Geometries(internal::Scene&amp; scene) noexcept;\n        internal::Scene&amp; m_scene;\n    };\n\n    class UIPC_CORE_API CGeometries\n    {\n        friend class Scene;\n\n      public:\n        ObjectGeometrySlots&lt;const geometry::Geometry&gt; find(IndexT id) &amp;&amp; noexcept;\n\n      private:\n        CGeometries(const internal::Scene&amp; scene) noexcept;\n        const internal::Scene&amp; m_scene;\n    };\n\n    const Json&amp; config() const noexcept;\n\n    ContactTabular&amp;       contact_tabular() noexcept;\n    const ContactTabular&amp; contact_tabular() const noexcept;\n\n    ConstitutionTabular&amp;       constitution_tabular() noexcept;\n    const ConstitutionTabular&amp; constitution_tabular() const noexcept;\n\n    Objects  objects() noexcept;\n    CObjects objects() const noexcept;\n\n    Geometries  geometries() noexcept;\n    CGeometries geometries() const noexcept;\n\n    const Json&amp; info() const noexcept;\n\n    Animator&amp;       animator();\n    const Animator&amp; animator() const;\n\n    DiffSim&amp;       diff_sim();\n    const DiffSim&amp; diff_sim() const;\n\n    SanityChecker&amp;       sanity_checker();\n    const SanityChecker&amp; sanity_checker() const;\n\n    void update_from(const SceneSnapshotCommit&amp; snapshot);\n\n  private:\n    // Allow create a core::Scene from a core::internal::Scene\n    Scene(S&lt;internal::Scene&gt; scene) noexcept;\n    S&lt;core::internal::Scene&gt; m_internal;\n};\n}  // namespace uipc::core\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::core::Scene&gt; : formatter&lt;string_view&gt;\n{\n    appender format(const uipc::core::Scene&amp; c, format_context&amp; ctx) const;\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/scene__archieve_8h/","title":"File scene_archieve.h","text":""},{"location":"Libuipc/scene__archieve_8h/#file-scene_archieveh","title":"File scene_archieve.h","text":"<p>FileList &gt; core &gt; scene_archieve.h</p> <p>Go to the source code of this file</p> <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene_archieve.h</code></p>"},{"location":"Libuipc/scene__archieve_8h_source/","title":"File scene_archieve.h","text":""},{"location":"Libuipc/scene__archieve_8h_source/#file-scene_archieveh","title":"File scene_archieve.h","text":"<p>File List &gt; core &gt; scene_archieve.h</p> <p>Go to the documentation of this file</p> <pre><code>//#pragma once\n//#include &lt;uipc/core/scene.h&gt;\n//\n//namespace uipc::core\n//{\n//class UIPC_CORE_API SceneArchieve\n//{\n//    class Impl;\n//\n//  public:\n//    SceneArchieve(Scene&amp; scene);\n//    ~SceneArchieve();\n//\n//    /**\n//     * @brief Create a Json of the whole scene \n//     */\n//    const Json&amp; init();\n//\n//    /**\n//     * @brief Create a Json of the modification of the scene\n//     */\n//    Json push();\n//\n//    /**\n//     * @brief Update the scene with the given Json file\n//     */\n//    void pull(const Json&amp; json);\n//\n//  private:\n//    U&lt;Impl&gt; m_impl;\n//};\n//}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/scene__factory_8h/","title":"File scene_factory.h","text":""},{"location":"Libuipc/scene__factory_8h/#file-scene_factoryh","title":"File scene_factory.h","text":"<p>FileList &gt; core &gt; scene_factory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/scene.h&gt;</code></li> <li><code>#include &lt;uipc/core/scene_snapshot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_collection_factory.h&gt;</code></li> </ul>"},{"location":"Libuipc/scene__factory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/scene__factory_8h/#classes","title":"Classes","text":"Type Name class SceneFactory <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene_factory.h</code></p>"},{"location":"Libuipc/scene__factory_8h_source/","title":"File scene_factory.h","text":""},{"location":"Libuipc/scene__factory_8h_source/#file-scene_factoryh","title":"File scene_factory.h","text":"<p>File List &gt; core &gt; scene_factory.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/scene.h&gt;\n#include &lt;uipc/core/scene_snapshot.h&gt;\n#include &lt;uipc/geometry/attribute_collection_factory.h&gt;\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API SceneFactory\n{\n    class Impl;\n\n\n  public:\n    SceneFactory();\n    ~SceneFactory();\n\n    [[nodiscard]] Scene         from_snapshot(const SceneSnapshot&amp; snapshot);\n    [[nodiscard]] SceneSnapshot from_json(const Json&amp; j);\n    [[nodiscard]] Json          to_json(const SceneSnapshot&amp; scene);\n    [[nodiscard]] SceneSnapshotCommit commit_from_json(const Json&amp; json);\n    [[nodiscard]] Json commit_to_json(const SceneSnapshotCommit&amp; scene);\n\n  private:\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/scene__snapshot_8h/","title":"File scene_snapshot.h","text":""},{"location":"Libuipc/scene__snapshot_8h/#file-scene_snapshoth","title":"File scene_snapshot.h","text":"<p>FileList &gt; core &gt; scene_snapshot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/scene.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_commit.h&gt;</code></li> <li><code>#include &lt;uipc/core/object_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/scene__snapshot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/scene__snapshot_8h/#classes","title":"Classes","text":"Type Name class SceneSnapshot class SceneSnapshotCommit <p>The documentation for this class was generated from the following file <code>include/uipc/core/scene_snapshot.h</code></p>"},{"location":"Libuipc/scene__snapshot_8h_source/","title":"File scene_snapshot.h","text":""},{"location":"Libuipc/scene__snapshot_8h_source/#file-scene_snapshoth","title":"File scene_snapshot.h","text":"<p>File List &gt; core &gt; scene_snapshot.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/scene.h&gt;\n#include &lt;uipc/geometry/geometry_commit.h&gt;\n#include &lt;uipc/core/object_collection.h&gt;\n\nnamespace uipc::core\n{\nclass UIPC_CORE_API SceneSnapshot\n{\n    friend class Scene;\n    friend class SceneSnapshotCommit;\n    friend class SceneFactory;\n\n  public:\n    SceneSnapshot(const Scene&amp; scene);\n    SceneSnapshot(const SceneSnapshot&amp;)            = default;\n    SceneSnapshot(SceneSnapshot&amp;&amp;)                 = default;\n    SceneSnapshot&amp; operator=(const SceneSnapshot&amp;) = default;\n    SceneSnapshot&amp; operator=(SceneSnapshot&amp;&amp;)      = default;\n\n  private:\n    SceneSnapshot() = default;\n    Json                     m_config;\n    ObjectCollectionSnapshot m_object_collection;\n    vector&lt;ContactElement&gt;   m_contact_elements;\n\n\n    unordered_map&lt;IndexT, S&lt;geometry::Geometry&gt;&gt; m_geometries;\n    unordered_map&lt;IndexT, S&lt;geometry::Geometry&gt;&gt; m_rest_geometries;\n\n    geometry::AttributeCollection m_contact_models;\n};\n\nclass UIPC_CORE_API SceneSnapshotCommit\n{\n    friend class SceneFactory;\n    friend SceneSnapshotCommit UIPC_CORE_API operator-(const SceneSnapshot&amp; dst,\n                                                       const SceneSnapshot&amp; src);\n    friend class internal::Scene;\n\n  public:\n    SceneSnapshotCommit() = default;\n    SceneSnapshotCommit(const SceneSnapshot&amp; dst, const SceneSnapshot&amp; src);\n\n    bool        is_valid() const noexcept { return m_is_valid; }\n    const Json&amp; config() const noexcept { return m_config; }\n    const ObjectCollectionSnapshot&amp; object_collection() const noexcept\n    {\n        return m_object_collection;\n    }\n    const vector&lt;ContactElement&gt;&amp; contact_elements() const noexcept\n    {\n        return m_contact_elements;\n    }\n\n    const unordered_map&lt;IndexT, geometry::GeometryCommit&gt;&amp; geometries() const noexcept\n    {\n        return m_geometries;\n    }\n\n    const unordered_map&lt;IndexT, geometry::GeometryCommit&gt;&amp; rest_geometries() const noexcept\n    {\n        return m_rest_geometries;\n    }\n\n    const geometry::AttributeCollectionCommit&amp; contact_models() const noexcept\n    {\n        return m_contact_models;\n    }\n\n  private:\n    bool m_is_valid = true;\n    // Fully Copy:\n    Json                     m_config;\n    ObjectCollectionSnapshot m_object_collection;\n    vector&lt;ContactElement&gt;   m_contact_elements;\n\n    // Full Copy Geometries/ Diff Copy AttributeCollection\n    unordered_map&lt;IndexT, geometry::GeometryCommit&gt; m_geometries;\n    unordered_map&lt;IndexT, geometry::GeometryCommit&gt; m_rest_geometries;\n\n    // Diff Copy AttributeCollection\n    geometry::AttributeCollectionCommit m_contact_models;\n};\n\nSceneSnapshotCommit UIPC_CORE_API operator-(const SceneSnapshot&amp; dst,\n                                            const SceneSnapshot&amp; src);\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/world_8h/","title":"File world.h","text":""},{"location":"Libuipc/world_8h/#file-worldh","title":"File world.h","text":"<p>FileList &gt; core &gt; world.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/scene.h&gt;</code></li> <li><code>#include &lt;uipc/core/feature_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/world_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace internal"},{"location":"Libuipc/world_8h/#classes","title":"Classes","text":"Type Name class World <p>The documentation for this class was generated from the following file <code>include/uipc/core/world.h</code></p>"},{"location":"Libuipc/world_8h_source/","title":"File world.h","text":""},{"location":"Libuipc/world_8h_source/#file-worldh","title":"File world.h","text":"<p>File List &gt; core &gt; world.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/scene.h&gt;\n#include &lt;uipc/core/feature_collection.h&gt;\n\nnamespace uipc::backend\n{\nclass WorldVisitor;\n}\n\nnamespace uipc::core::internal\n{\nclass World;\n}\n\nnamespace uipc::core\n{\nclass Engine;\n\nclass UIPC_CORE_API World final\n{\n    friend class backend::WorldVisitor;\n    friend class SanityChecker;\n\n  public:\n    World(Engine&amp; e) noexcept;\n    ~World();\n\n    World(const World&amp;)            = delete;\n    World(World&amp;&amp;)                 = default;\n    World&amp; operator=(const World&amp;) = delete;\n    World&amp; operator=(World&amp;&amp;)      = default;\n\n    void init(Scene&amp; s);\n\n    void advance();\n    void sync();\n    void retrieve();\n    void backward();\n    bool dump();\n    bool recover(SizeT aim_frame = ~0ull);\n    bool is_valid() const;\n\n    SizeT frame() const;\n\n    const FeatureCollection&amp; features() const;\n\n  private:\n    // Allow create a core::World from a core::internal::World\n    World(S&lt;internal::World&gt; w) noexcept;\n    S&lt;internal::World&gt; m_internal;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/dir_98c941875c7e3cb13f2b177552938e34/","title":"Dir include/uipc/diff_sim","text":""},{"location":"Libuipc/dir_98c941875c7e3cb13f2b177552938e34/#dir-includeuipcdiff_sim","title":"Dir include/uipc/diff_sim","text":"<p>FileList &gt; diff_sim</p>"},{"location":"Libuipc/dir_98c941875c7e3cb13f2b177552938e34/#files","title":"Files","text":"Type Name file adjoint_method_feature.h file enable_grad_feature.h file parameter_collection.h file sparse_coo_view.h <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/</code></p>"},{"location":"Libuipc/adjoint__method__feature_8h/","title":"File adjoint_method_feature.h","text":""},{"location":"Libuipc/adjoint__method__feature_8h/#file-adjoint_method_featureh","title":"File adjoint_method_feature.h","text":"<p>FileList &gt; diff_sim &gt; adjoint_method_feature.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/feature.h&gt;</code></li> <li><code>#include &lt;uipc/backend/buffer_view.h&gt;</code></li> </ul>"},{"location":"Libuipc/adjoint__method__feature_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace diff_sim"},{"location":"Libuipc/adjoint__method__feature_8h/#classes","title":"Classes","text":"Type Name class AdjointMethodFeature class AdjointMethodFeatureOverrider <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/adjoint_method_feature.h</code></p>"},{"location":"Libuipc/adjoint__method__feature_8h_source/","title":"File adjoint_method_feature.h","text":""},{"location":"Libuipc/adjoint__method__feature_8h_source/#file-adjoint_method_featureh","title":"File adjoint_method_feature.h","text":"<p>File List &gt; diff_sim &gt; adjoint_method_feature.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma \n#include &lt;uipc/core/feature.h&gt;\n#include &lt;uipc/backend/buffer_view.h&gt;\n\nnamespace uipc::diff_sim\n{\nclass UIPC_CORE_API AdjointMethodFeatureOverrider\n{\n  public:\n    virtual void do_select_dofs(SizeT frame, backend::BufferView in_SDI) = 0;\n    virtual void do_receive_dofs(backend::BufferView out_dofs)           = 0;\n    virtual void do_compute_dLdP(backend::BufferView out_dLdP,\n                                 backend::BufferView in_dLdx)            = 0;\n};\n\nclass UIPC_CORE_API AdjointMethodFeature final : public core::Feature\n{\n    class Impl;\n\n  public:\n    constexpr static std::string_view FeatureName = \"diff_sim/adjoint_method\";\n\n    AdjointMethodFeature(S&lt;AdjointMethodFeatureOverrider&gt; overrider);\n\n    void select_dofs(SizeT frame, backend::BufferView in_SDI);\n\n    void receive_dofs(backend::BufferView out_Dofs);\n\n    void compute_dLdP(backend::BufferView out_dLdP, backend::BufferView in_dLdX);\n\n  private:\n    virtual std::string_view         get_name() const final override;\n    S&lt;AdjointMethodFeatureOverrider&gt; m_impl;\n    SizeT                            last_calling_frame = 0;\n};\n}  // namespace uipc::diff_sim\n</code></pre>"},{"location":"Libuipc/enable__grad__feature_8h/","title":"File enable_grad_feature.h","text":""},{"location":"Libuipc/enable__grad__feature_8h/#file-enable_grad_featureh","title":"File enable_grad_feature.h","text":"<p>FileList &gt; diff_sim &gt; enable_grad_feature.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/feature.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> </ul>"},{"location":"Libuipc/enable__grad__feature_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace diff_sim"},{"location":"Libuipc/enable__grad__feature_8h/#classes","title":"Classes","text":"Type Name class EnableGradFeature class EnableGradFeatureOverrider <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/enable_grad_feature.h</code></p>"},{"location":"Libuipc/enable__grad__feature_8h_source/","title":"File enable_grad_feature.h","text":""},{"location":"Libuipc/enable__grad__feature_8h_source/#file-enable_grad_featureh","title":"File enable_grad_feature.h","text":"<p>File List &gt; diff_sim &gt; enable_grad_feature.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/feature.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n\nnamespace uipc::diff_sim\n{\nclass UIPC_CORE_API EnableGradFeatureOverrider\n{\n  public:\n    virtual void do_no_grad()                = 0;\n    virtual void do_with_grad()              = 0;\n    virtual bool get_is_grad_enabled() const = 0;\n};\n\nclass UIPC_CORE_API EnableGradFeature final : public core::Feature\n{\n  public:\n    static constexpr std::string_view FeatureName = \"diff_sim/enable_grad\";\n\n    EnableGradFeature(S&lt;EnableGradFeatureOverrider&gt; overrider);\n\n    void no_grad();\n\n    void with_grad();\n\n    bool is_grad_enabled() const;\n\n  private:\n    virtual std::string_view      get_name() const override final;\n    S&lt;EnableGradFeatureOverrider&gt; m_impl;\n};\n}  // namespace uipc::diff_sim\n</code></pre>"},{"location":"Libuipc/parameter__collection_8h/","title":"File parameter_collection.h","text":""},{"location":"Libuipc/parameter__collection_8h/#file-parameter_collectionh","title":"File parameter_collection.h","text":"<p>FileList &gt; diff_sim &gt; parameter_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/common/vector.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_slot.h&gt;</code></li> </ul>"},{"location":"Libuipc/parameter__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace backend namespace core namespace diff_sim"},{"location":"Libuipc/parameter__collection_8h/#classes","title":"Classes","text":"Type Name class ParameterCollection <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/parameter_collection.h</code></p>"},{"location":"Libuipc/parameter__collection_8h_source/","title":"File parameter_collection.h","text":""},{"location":"Libuipc/parameter__collection_8h_source/#file-parameter_collectionh","title":"File parameter_collection.h","text":"<p>File List &gt; diff_sim &gt; parameter_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/common/vector.h&gt;\n#include &lt;uipc/geometry/attribute_slot.h&gt;\nnamespace uipc::core\n{\nclass DiffSim;\n}\n\nnamespace uipc::backend\n{\nclass DiffSimVisitor;\n}\n\nnamespace uipc::diff_sim\n{\nclass Object;\nclass ParameterCollection;\n\nUIPC_CORE_API span&lt;Float&gt; view(ParameterCollection&amp; collection);\nUIPC_CORE_API Eigen::Map&lt;Eigen::Matrix&lt;Float, Eigen::Dynamic, 1&gt;&gt; as_eigen(ParameterCollection&amp; collection);\n\nclass UIPC_CORE_API ParameterCollection\n{\n  public:\n    void resize(SizeT N, Float default_value = 0.0f);\n    void                                                      broadcast();\n    span&lt;const Float&gt;                                         view() const;\n    Eigen::Map&lt;const Eigen::Matrix&lt;Float, Eigen::Dynamic, 1&gt;&gt; as_eigen() const;\n    SizeT                                                     size() const;\n\n    ~ParameterCollection();\n\n  private:\n    friend class uipc::core::DiffSim;\n    friend class uipc::backend::DiffSimVisitor;\n\n    ParameterCollection();\n\n    // delete copy constructor and assignment operator\n    ParameterCollection(const ParameterCollection&amp;)            = delete;\n    ParameterCollection&amp; operator=(const ParameterCollection&amp;) = delete;\n\n    class Impl;\n    friend UIPC_CORE_API span&lt;Float&gt; view(ParameterCollection&amp; collection);\n    friend UIPC_CORE_API Eigen::Map&lt;Eigen::Matrix&lt;Float, Eigen::Dynamic, 1&gt;&gt; as_eigen(span&lt;Float&gt; s);\n    void connect(S&lt;geometry::IAttributeSlot&gt; diff_parm_slot,\n                 S&lt;geometry::IAttributeSlot&gt; parm_slot);\n    void build();\n\n    bool    need_backend_broadcast() const;\n    void    need_backend_broadcast(bool v);\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::diff_sim\n</code></pre>"},{"location":"Libuipc/sparse__coo__view_8h/","title":"File sparse_coo_view.h","text":""},{"location":"Libuipc/sparse__coo__view_8h/#file-sparse_coo_viewh","title":"File sparse_coo_view.h","text":"<p>FileList &gt; diff_sim &gt; sparse_coo_view.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;Eigen/Sparse&gt;</code></li> </ul>"},{"location":"Libuipc/sparse__coo__view_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace diff_sim"},{"location":"Libuipc/sparse__coo__view_8h/#classes","title":"Classes","text":"Type Name class SparseCOOView <p>The documentation for this class was generated from the following file <code>include/uipc/diff_sim/sparse_coo_view.h</code></p>"},{"location":"Libuipc/sparse__coo__view_8h_source/","title":"File sparse_coo_view.h","text":""},{"location":"Libuipc/sparse__coo__view_8h_source/#file-sparse_coo_viewh","title":"File sparse_coo_view.h","text":"<p>File List &gt; diff_sim &gt; sparse_coo_view.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;Eigen/Sparse&gt;\nnamespace uipc::diff_sim\n{\nclass UIPC_CORE_API SparseCOOView\n{\n  public:\n    SparseCOOView() = default;\n\n    SparseCOOView(span&lt;const IndexT&gt; row_indices,\n                  span&lt;const IndexT&gt; col_indices,\n                  span&lt;const Float&gt;  values,\n                  Vector2i           shape);\n\n    span&lt;const IndexT&gt; row_indices() const;\n    span&lt;const IndexT&gt; col_indices() const;\n    span&lt;const Float&gt;  values() const;\n    Vector2i           shape() const;\n\n    Matrix&lt;Float, Eigen::Dynamic, Eigen::Dynamic&gt; to_dense() const;\n    Eigen::SparseMatrix&lt;Float&gt;                    to_sparse() const;\n\n  private:\n    span&lt;const IndexT&gt; m_row_indices;\n    span&lt;const IndexT&gt; m_col_indices;\n    span&lt;const Float&gt;  m_values;\n    Vector2i           m_shape;\n};\n}  // namespace uipc::diff_sim\n</code></pre>"},{"location":"Libuipc/dir_04894967a28d068f10a69f6e8a07a2cb/","title":"Dir include/uipc/geometry","text":""},{"location":"Libuipc/dir_04894967a28d068f10a69f6e8a07a2cb/#dir-includeuipcgeometry","title":"Dir include/uipc/geometry","text":"<p>FileList &gt; geometry</p>"},{"location":"Libuipc/dir_04894967a28d068f10a69f6e8a07a2cb/#files","title":"Files","text":"Type Name file abstract_simplicial_complex.h file attribute.h file attribute_collection.h file attribute_collection_commit.h file attribute_collection_factory.h file attribute_copy.h file attribute_factory.h file attribute_friend.h file attribute_slot.h file geometry.h file geometry_atlas.h file geometry_collection.h file geometry_collection_commit.h file geometry_commit.h file geometry_factory.h file geometry_friend.h file geometry_slot.h file implicit_geometry.h file implicit_geometry_slot.h file shared_attribute_context.h file simplicial_complex.h file simplicial_complex_attributes.h file simplicial_complex_slot.h file utils.h"},{"location":"Libuipc/dir_04894967a28d068f10a69f6e8a07a2cb/#directories","title":"Directories","text":"Type Name dir utils <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/</code></p>"},{"location":"Libuipc/abstract__simplicial__complex_8h/","title":"File abstract_simplicial_complex.h","text":""},{"location":"Libuipc/abstract__simplicial__complex_8h/#file-abstract_simplicial_complexh","title":"File abstract_simplicial_complex.h","text":"<p>FileList &gt; geometry &gt; abstract_simplicial_complex.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex_attributes.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/abstract__simplicial__complex_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace geometry"},{"location":"Libuipc/abstract__simplicial__complex_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt; &lt;&gt; class AbstractSimplicialComplex Represents an abstract simplicial complex, containing vertices, edges, triangles, and tetrahedra. <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/abstract_simplicial_complex.h</code></p>"},{"location":"Libuipc/abstract__simplicial__complex_8h_source/","title":"File abstract_simplicial_complex.h","text":""},{"location":"Libuipc/abstract__simplicial__complex_8h_source/#file-abstract_simplicial_complexh","title":"File abstract_simplicial_complex.h","text":"<p>File List &gt; geometry &gt; abstract_simplicial_complex.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex_attributes.h&gt;\n#include &lt;uipc/geometry/geometry.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API AbstractSimplicialComplex : public Geometry\n{\n    template &lt;typename T&gt;\n    friend class AttributeFriend;\n\n  public:\n    using VertexAttributes  = SimplicialComplexAttributes&lt;false, 0&gt;;\n    using CVertexAttributes = SimplicialComplexAttributes&lt;true, 0&gt;;\n    using EdgeAttributes  = SimplicialComplexAttributes&lt;false, 1&gt;;\n    using CEdgeAttributes = SimplicialComplexAttributes&lt;true, 1&gt;;\n    using TriangleAttributes  = SimplicialComplexAttributes&lt;false, 2&gt;;\n    using CTriangleAttributes = SimplicialComplexAttributes&lt;true, 2&gt;;\n    using TetrahedronAttributes  = SimplicialComplexAttributes&lt;false, 3&gt;;\n    using CTetrahedronAttributes = SimplicialComplexAttributes&lt;true, 3&gt;;\n\n    AbstractSimplicialComplex()                                   = default;\n    AbstractSimplicialComplex(const AbstractSimplicialComplex&amp; o) = default;\n    AbstractSimplicialComplex(AbstractSimplicialComplex&amp;&amp; o)      = default;\n\n    AbstractSimplicialComplex&amp; operator=(const AbstractSimplicialComplex&amp; o) = delete;\n    AbstractSimplicialComplex&amp; operator=(AbstractSimplicialComplex&amp;&amp; o) = delete;\n\n    [[nodiscard]] VertexAttributes  vertices() noexcept;\n    [[nodiscard]] CVertexAttributes vertices() const noexcept;\n\n    [[nodiscard]] EdgeAttributes  edges() noexcept;\n    [[nodiscard]] CEdgeAttributes edges() const noexcept;\n\n\n    [[nodiscard]] TriangleAttributes  triangles() noexcept;\n    [[nodiscard]] CTriangleAttributes triangles() const noexcept;\n    [[nodiscard]] TetrahedronAttributes  tetrahedra() noexcept;\n    [[nodiscard]] CTetrahedronAttributes tetrahedra() const noexcept;\n\n    [[nodiscard]] IndexT dim() const noexcept;\n\n\n  protected:\n    virtual std::string_view   get_type() const noexcept override;\n    [[nodiscard]] virtual Json do_to_json() const override;\n\n  private:\n    friend struct fmt::formatter&lt;AbstractSimplicialComplex&gt;;\n    AttributeCollection m_vertex_attributes;\n    AttributeCollection m_edge_attributes;\n    AttributeCollection m_triangle_attributes;\n    AttributeCollection m_tetrahedron_attributes;\n};\n}  // namespace uipc::geometry\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::geometry::AbstractSimplicialComplex&gt;\n    : formatter&lt;string_view&gt;\n{\n    appender format(const uipc::geometry::AbstractSimplicialComplex&amp; c,\n                    format_context&amp;                                  ctx) const;\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/attribute_8h/","title":"File attribute.h","text":""},{"location":"Libuipc/attribute_8h/#file-attributeh","title":"File attribute.h","text":"<p>FileList &gt; geometry &gt; attribute.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;uipc/backend/buffer_view.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/vector.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_copy.h&gt;</code></li> <li><code>#include &lt;uipc/common/buffer_info.h&gt;</code></li> <li><code>#include \"details/attribute.inl\"</code></li> </ul>"},{"location":"Libuipc/attribute_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute_8h/#classes","title":"Classes","text":"Type Name class Attribute &lt;typename T&gt;Template class to represent a geometries attribute of type T. class IAttribute An abstract class to represent a geometries attribute. <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute.h</code></p>"},{"location":"Libuipc/attribute_8h_source/","title":"File attribute.h","text":""},{"location":"Libuipc/attribute_8h_source/#file-attributeh","title":"File attribute.h","text":"<p>File List &gt; geometry &gt; attribute.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n#include &lt;uipc/backend/buffer_view.h&gt;\n#include &lt;uipc/common/json.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/vector.h&gt;\n#include &lt;uipc/geometry/attribute_copy.h&gt;\n#include &lt;uipc/common/buffer_info.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API IAttribute\n{\n    template &lt;typename T&gt;\n    friend class AttributeFriend;\n\n  public:\n    IAttribute()          = default;\n    virtual ~IAttribute() = default;\n\n    [[nodiscard]] SizeT size() const noexcept;\n\n    [[nodiscard]] Json to_json(SizeT i) const noexcept;\n\n    [[nodiscard]] Json to_json() const noexcept;\n\n    void from_json(const Json&amp; j) noexcept;\n    [[nodiscard]] std::string_view type_name() const noexcept;\n\n  private:\n    friend class AttributeCollection;\n    friend class IAttributeSlot;\n\n    void          resize(SizeT N);\n    void          reserve(SizeT N);\n    S&lt;IAttribute&gt; clone() const;\n    S&lt;IAttribute&gt; clone_empty() const;\n    void          clear();\n    void          reorder(span&lt;const SizeT&gt; O) noexcept;\n    void copy_from(const IAttribute&amp; other, const AttributeCopy&amp; copy) noexcept;\n\n  protected:\n    virtual SizeT            get_size() const               = 0;\n    virtual std::string_view get_type_name() const noexcept = 0;\n\n    virtual void          do_resize(SizeT N)                       = 0;\n    virtual void          do_clear()                               = 0;\n    virtual void          do_reserve(SizeT N)                      = 0;\n    virtual S&lt;IAttribute&gt; do_clone() const                         = 0;\n    virtual S&lt;IAttribute&gt; do_clone_empty() const                   = 0;\n    virtual void          do_reorder(span&lt;const SizeT&gt; O) noexcept = 0;\n    virtual void do_copy_from(const IAttribute&amp; other, const AttributeCopy&amp; copy) noexcept = 0;\n\n    virtual void do_from_json(const Json&amp; j) noexcept = 0;\n    virtual Json do_to_json(SizeT i) const noexcept   = 0;\n    virtual Json do_to_json() const noexcept          = 0;\n};\n\ntemplate &lt;typename T&gt;\nclass AttributeSlot;\n\ntemplate &lt;typename T&gt;\nclass Attribute : public IAttribute\n{\n    friend class AttributeSlot&lt;T&gt;;\n\n  public:\n    using value_type = T;\n\n    Attribute(const T&amp; default_value = {}) noexcept;\n\n    Attribute(const Attribute&lt;T&gt;&amp;)               = default;\n    Attribute(Attribute&lt;T&gt;&amp;&amp;)                    = default;\n    Attribute&lt;T&gt;&amp; operator=(const Attribute&lt;T&gt;&amp;) = default;\n    Attribute&lt;T&gt;&amp; operator=(Attribute&lt;T&gt;&amp;&amp;)      = default;\n\n    friend span&lt;T&gt; view(Attribute&lt;T&gt;&amp; a) noexcept { return a.m_values; }\n\n    [[nodiscard]] span&lt;const T&gt; view() const noexcept;\n\n    [[nodiscard]] static std::string type() noexcept;\n\n  protected:\n    virtual SizeT            get_size() const override;\n    virtual std::string_view get_type_name() const noexcept override;\n\n    virtual void          do_resize(SizeT N) override;\n    virtual void          do_clear() override;\n    virtual void          do_reserve(SizeT N) override;\n    virtual S&lt;IAttribute&gt; do_clone() const override;\n    virtual S&lt;IAttribute&gt; do_clone_empty() const override;\n    virtual void          do_reorder(span&lt;const SizeT&gt; O) noexcept override;\n    virtual void do_copy_from(const IAttribute&amp; other, const AttributeCopy&amp; copy) noexcept override;\n\n    virtual Json do_to_json(SizeT i) const noexcept override;\n    virtual Json do_to_json() const noexcept override;\n\n    virtual void do_from_json(const Json&amp; j) noexcept override;\n\n  private:\n    vector&lt;T&gt; m_values;\n    T         m_default_value;\n};\n}  // namespace uipc::geometry\n\n#include \"details/attribute.inl\"\n</code></pre>"},{"location":"Libuipc/attribute__collection_8h/","title":"File attribute_collection.h","text":""},{"location":"Libuipc/attribute__collection_8h/#file-attribute_collectionh","title":"File attribute_collection.h","text":"<p>FileList &gt; geometry &gt; attribute_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/string.h&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> <li><code>#include &lt;uipc/common/exception.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_copy.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_friend.h&gt;</code></li> <li><code>#include \"details/attribute_collection.inl\"</code></li> </ul>"},{"location":"Libuipc/attribute__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace geometry"},{"location":"Libuipc/attribute__collection_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::geometry::AttributeCollection &gt; &lt;&gt; class AttributeCollection A collection of geometries attributes. class AttributeCollectionError <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection.h</code></p>"},{"location":"Libuipc/attribute__collection_8h_source/","title":"File attribute_collection.h","text":""},{"location":"Libuipc/attribute__collection_8h_source/#file-attribute_collectionh","title":"File attribute_collection.h","text":"<p>File List &gt; geometry &gt; attribute_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/string.h&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n#include &lt;uipc/common/exception.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/geometry/attribute.h&gt;\n#include &lt;uipc/geometry/attribute_slot.h&gt;\n#include &lt;uipc/geometry/attribute_copy.h&gt;\n#include &lt;uipc/geometry/attribute_friend.h&gt;\n\nnamespace uipc::geometry\n{\nclass AttributeCollectionCommit;\nclass UIPC_CORE_API AttributeCollection\n{\n    template &lt;typename T&gt;\n    friend class AttributeFriend;\n\n    friend struct fmt::formatter&lt;AttributeCollection&gt;;\n\n    friend class AttributeCollectionCommit;\n\n  public:\n    AttributeCollection() = default;\n\n    AttributeCollection(const AttributeCollection&amp;);\n    AttributeCollection&amp; operator=(const AttributeCollection&amp;);\n\n    AttributeCollection(AttributeCollection&amp;&amp;) noexcept;\n    AttributeCollection&amp; operator=(AttributeCollection&amp;&amp;) noexcept;\n\n    template &lt;typename T&gt;\n    S&lt;AttributeSlot&lt;T&gt;&gt; create(std::string_view name,\n                               const T&amp;         default_value = {},\n                               bool             allow_destroy = true);\n\n    S&lt;IAttributeSlot&gt; share(std::string_view      name,\n                            const IAttributeSlot&amp; slot,\n                            bool                  allow_destroy = true);\n\n    template &lt;typename T&gt;\n    S&lt;AttributeSlot&lt;T&gt;&gt; share(std::string_view        name,\n                              const AttributeSlot&lt;T&gt;&amp; slot,\n                              bool                    allow_destroy = true);\n\n    void destroy(std::string_view name);\n\n    [[nodiscard]] S&lt;IAttributeSlot&gt; find(std::string_view name);\n    [[nodiscard]] S&lt;const IAttributeSlot&gt; find(std::string_view name) const;\n\n    template &lt;typename T&gt;\n    [[nodiscard]] S&lt;AttributeSlot&lt;T&gt;&gt; find(std::string_view name);\n\n    template &lt;typename T&gt;\n    [[nodiscard]] S&lt;const AttributeSlot&lt;T&gt;&gt; find(std::string_view name) const;\n\n    void resize(SizeT N);\n\n    void reorder(span&lt;const SizeT&gt; O);\n\n    void copy_from(const AttributeCollection&amp; other,\n                   const AttributeCopy&amp;       copy,\n                   span&lt;const string&gt;         include_names = {},\n                   span&lt;const string&gt;         exclude_names = {});\n\n    [[nodiscard]] SizeT size() const;\n    void clear();\n    void reserve(SizeT N);\n\n    [[nodiscard]] vector&lt;string&gt; names() const;\n\n    [[nodiscard]] SizeT attribute_count() const;\n\n    [[nodiscard]] Json to_json() const;\n\n\n    void update_from(const AttributeCollectionCommit&amp; commit);\n\n  private:\n    SizeT                                    m_size = 0;\n    unordered_map&lt;string, S&lt;IAttributeSlot&gt;&gt; m_attributes;\n};\n\nclass UIPC_CORE_API AttributeCollectionError : public Exception\n{\n  public:\n    using Exception::Exception;\n};\n}  // namespace uipc::geometry\n\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::geometry::AttributeCollection&gt;\n    : formatter&lt;std::string_view&gt;\n{\n    appender format(const uipc::geometry::AttributeCollection&amp; collection,\n                    format_context&amp;                            ctx) const;\n};\n}  // namespace fmt\n\n\n#include \"details/attribute_collection.inl\"\n</code></pre>"},{"location":"Libuipc/attribute__collection__commit_8h/","title":"File attribute_collection_commit.h","text":""},{"location":"Libuipc/attribute__collection__commit_8h/#file-attribute_collection_commith","title":"File attribute_collection_commit.h","text":"<p>FileList &gt; geometry &gt; attribute_collection_commit.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/attribute_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/attribute__collection__commit_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute__collection__commit_8h/#classes","title":"Classes","text":"Type Name class AttributeCollectionCommit <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection_commit.h</code></p>"},{"location":"Libuipc/attribute__collection__commit_8h_source/","title":"File attribute_collection_commit.h","text":""},{"location":"Libuipc/attribute__collection__commit_8h_source/#file-attribute_collection_commith","title":"File attribute_collection_commit.h","text":"<p>File List &gt; geometry &gt; attribute_collection_commit.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/attribute_collection.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API AttributeCollectionCommit\n{\n    friend class GeometryAtlasCommit;\n    friend class GeometryCommit;\n    friend class AttributeCollection;\n    friend class AttributeCollectionFactory;\n    friend class GeometryFactory;\n    friend UIPC_CORE_API AttributeCollectionCommit operator-(const AttributeCollection&amp; dst,\n                                                             const AttributeCollection&amp; src);\n    friend UIPC_CORE_API AttributeCollection&amp; operator+=(AttributeCollection&amp; dst,\n                                                         const AttributeCollectionCommit&amp; inc);\n\n  public:\n    AttributeCollectionCommit() = default;\n    explicit AttributeCollectionCommit(const AttributeCollection&amp; dst);\n    AttributeCollectionCommit(const AttributeCollectionCommit&amp; other) = default;\n    AttributeCollectionCommit&amp; operator=(const AttributeCollectionCommit&amp; other) = default;\n    const AttributeCollection&amp; attribute_collection() const noexcept\n    {\n        return m_attribute_collection;\n    }\n    span&lt;const std::string&gt; removed_names() const noexcept\n    {\n        return span&lt;const std::string&gt;(m_removed_names);\n    }\n\n  private:\n    AttributeCollectionCommit(const AttributeCollection&amp; dst, const AttributeCollection&amp; src);\n    AttributeCollection m_attribute_collection;\n    vector&lt;std::string&gt; m_removed_names;\n};\n\nUIPC_CORE_API AttributeCollectionCommit operator-(const AttributeCollection&amp; dst,\n                                                  const AttributeCollection&amp; src);\n\nUIPC_CORE_API AttributeCollection&amp; operator+=(AttributeCollection&amp; dst,\n                                              const AttributeCollectionCommit&amp; inc);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/attribute__collection__factory_8h/","title":"File attribute_collection_factory.h","text":""},{"location":"Libuipc/attribute__collection__factory_8h/#file-attribute_collection_factoryh","title":"File attribute_collection_factory.h","text":"<p>FileList &gt; geometry &gt; attribute_collection_factory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/attribute_collection.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_collection_commit.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/shared_attribute_context.h&gt;</code></li> </ul>"},{"location":"Libuipc/attribute__collection__factory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute__collection__factory_8h/#classes","title":"Classes","text":"Type Name class AttributeCollectionFactory <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_collection_factory.h</code></p>"},{"location":"Libuipc/attribute__collection__factory_8h_source/","title":"File attribute_collection_factory.h","text":""},{"location":"Libuipc/attribute__collection__factory_8h_source/#file-attribute_collection_factoryh","title":"File attribute_collection_factory.h","text":"<p>File List &gt; geometry &gt; attribute_collection_factory.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/attribute_collection.h&gt;\n#include &lt;uipc/geometry/attribute_collection_commit.h&gt;\n#include &lt;uipc/geometry/shared_attribute_context.h&gt;\n\nnamespace uipc::geometry\n{\n\n\nclass UIPC_CORE_API AttributeCollectionFactory\n{\n    class Impl;\n\n  public:\n    AttributeCollectionFactory();\n    ~AttributeCollectionFactory();\n\n    [[nodiscard]] S&lt;AttributeCollection&gt; from_json(const Json&amp; j,\n                                                   DeserialSharedAttributeContext&amp; ctx);\n\n    [[nodiscard]] Json to_json(const AttributeCollection&amp;    ac,\n                               SerialSharedAttributeContext&amp; ctx);\n\n    [[nodiscard]] Json commit_to_json(const AttributeCollectionCommit&amp; acc,\n                                      SerialSharedAttributeContext&amp;    ctx);\n\n    [[nodiscard]] S&lt;AttributeCollectionCommit&gt; commit_from_json(const Json&amp; j,\n                                                                DeserialSharedAttributeContext&amp; ctx);\n    [[nodiscard]] AttributeCollectionCommit diff(const AttributeCollection&amp; current,\n                                                 const AttributeCollection&amp; reference);\n\n  private:\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/attribute__copy_8h/","title":"File attribute_copy.h","text":""},{"location":"Libuipc/attribute__copy_8h/#file-attribute_copyh","title":"File attribute_copy.h","text":"<p>FileList &gt; geometry &gt; attribute_copy.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include \"details/attribute_copy.inl\"</code></li> </ul>"},{"location":"Libuipc/attribute__copy_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute__copy_8h/#classes","title":"Classes","text":"Type Name class AttributeCopy <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_copy.h</code></p>"},{"location":"Libuipc/attribute__copy_8h_source/","title":"File attribute_copy.h","text":""},{"location":"Libuipc/attribute__copy_8h_source/#file-attribute_copyh","title":"File attribute_copy.h","text":"<p>File List &gt; geometry &gt; attribute_copy.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/span.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API AttributeCopy\n{\n    template &lt;typename T&gt;\n    friend class Attribute;\n\n  public:\n    enum CopyType\n    {\n        None = 0,\n        SameDim,\n        Range,\n        Pull,\n        Push,\n        Pair\n    };\n\n    CopyType type() const noexcept;\n\n    AttributeCopy() noexcept;\n\n    static AttributeCopy range(SizeT dst_offset, SizeT src_offset, SizeT count) noexcept;\n    static AttributeCopy pull(span&lt;const SizeT&gt; mapping) noexcept;\n    static AttributeCopy push(span&lt;const SizeT&gt; mapping) noexcept;\n\n    static AttributeCopy pair(span&lt;const std::pair&lt;SizeT, SizeT&gt;&gt; pairs) noexcept;\n\n    static AttributeCopy same_dim() noexcept;\n\n  private:\n    CopyType m_type = CopyType::None;\n\n    // Range\n    SizeT m_dst_offset = ~0ull;\n    SizeT m_src_offset = ~0ull;\n    SizeT m_count      = ~0ull;\n\n    // pull, push\n    span&lt;const SizeT&gt; m_mapping;\n\n    // pair mapping\n    span&lt;const std::pair&lt;SizeT, SizeT&gt;&gt; m_pairs;\n\n    template &lt;typename T&gt;\n    void copy(span&lt;T&gt; dst, span&lt;const T&gt; src) const noexcept;\n};\n}  // namespace uipc::geometry\n\n#include \"details/attribute_copy.inl\"\n</code></pre>"},{"location":"Libuipc/attribute__factory_8h/","title":"File attribute_factory.h","text":""},{"location":"Libuipc/attribute__factory_8h/#file-attribute_factoryh","title":"File attribute_factory.h","text":"<p>FileList &gt; geometry &gt; attribute_factory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/attribute_slot.h&gt;</code></li> </ul>"},{"location":"Libuipc/attribute__factory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute__factory_8h/#classes","title":"Classes","text":"Type Name class AttributeFactory <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_factory.h</code></p>"},{"location":"Libuipc/attribute__factory_8h_source/","title":"File attribute_factory.h","text":""},{"location":"Libuipc/attribute__factory_8h_source/#file-attribute_factoryh","title":"File attribute_factory.h","text":"<p>File List &gt; geometry &gt; attribute_factory.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/attribute_slot.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API AttributeFactory\n{\n    class Impl;\n\n  public:\n    AttributeFactory();\n    ~AttributeFactory();\n\n    [[nodiscard]] vector&lt;S&lt;IAttributeSlot&gt;&gt; from_json(const Json&amp; j);\n    [[nodiscard]] Json to_json(span&lt;IAttribute*&gt; attributes);\n\n  private:\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/attribute__friend_8h/","title":"File attribute_friend.h","text":""},{"location":"Libuipc/attribute__friend_8h/#file-attribute_friendh","title":"File attribute_friend.h","text":"<p>FileList &gt; geometry &gt; attribute_friend.h</p> <p>Go to the source code of this file</p>"},{"location":"Libuipc/attribute__friend_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute__friend_8h/#classes","title":"Classes","text":"Type Name class AttributeFriend &lt;typename T&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_friend.h</code></p>"},{"location":"Libuipc/attribute__friend_8h_source/","title":"File attribute_friend.h","text":""},{"location":"Libuipc/attribute__friend_8h_source/#file-attribute_friendh","title":"File attribute_friend.h","text":"<p>File List &gt; geometry &gt; attribute_friend.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\nnamespace uipc::geometry\n{\n// This class is a friend of all attribute classes in the uipc namespace.\ntemplate &lt;typename T&gt;\nclass AttributeFriend\n{\n  public:\n};\n}  // namespace uipc\n</code></pre>"},{"location":"Libuipc/attribute__slot_8h/","title":"File attribute_slot.h","text":""},{"location":"Libuipc/attribute__slot_8h/#file-attribute_sloth","title":"File attribute_slot.h","text":"<p>FileList &gt; geometry &gt; attribute_slot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute.h&gt;</code></li> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;uipc/common/exception.h&gt;</code></li> <li><code>#include &lt;uipc/backend/buffer_view.h&gt;</code></li> <li><code>#include &lt;uipc/common/buffer_info.h&gt;</code></li> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include \"details/attribute_slot.inl\"</code></li> </ul>"},{"location":"Libuipc/attribute__slot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute__slot_8h/#classes","title":"Classes","text":"Type Name class AttributeSlot &lt;typename T&gt;Template class to represent a geometries attribute slot of type T in a geometries attribute collection. class IAttributeSlot An abstract class to represent a geometries attribute slot in a geometries attribute collection. <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/attribute_slot.h</code></p>"},{"location":"Libuipc/attribute__slot_8h_source/","title":"File attribute_slot.h","text":""},{"location":"Libuipc/attribute__slot_8h_source/#file-attribute_sloth","title":"File attribute_slot.h","text":"<p>File List &gt; geometry &gt; attribute_slot.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/geometry/attribute.h&gt;\n#include &lt;map&gt;\n#include &lt;uipc/common/exception.h&gt;\n#include &lt;uipc/backend/buffer_view.h&gt;\n#include &lt;uipc/common/buffer_info.h&gt;\n#include &lt;chrono&gt;\nnamespace uipc::geometry\n{\nusing TimePoint = std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt;;\nclass AttributeCollection;\nclass UIPC_CORE_API IAttributeSlot\n{\n  public:\n    template &lt;typename T&gt;\n    friend class AttributeFriend;\n\n    IAttributeSlot()          = default;\n    virtual ~IAttributeSlot() = default;\n    // delete copy_from\n    IAttributeSlot(const IAttributeSlot&amp;)            = delete;\n    IAttributeSlot&amp; operator=(const IAttributeSlot&amp;) = delete;\n    // enable move\n    IAttributeSlot(IAttributeSlot&amp;&amp;) noexcept            = default;\n    IAttributeSlot&amp; operator=(IAttributeSlot&amp;&amp;) noexcept = default;\n\n    [[nodiscard]] std::string_view name() const noexcept;\n\n    [[nodiscard]] std::string_view type_name() const noexcept;\n\n    [[nodiscard]] bool allow_destroy() const noexcept;\n\n    [[nodiscard]] bool is_shared() const noexcept;\n\n    [[nodiscard]] SizeT size() const noexcept;\n\n    [[nodiscard]] Json to_json() const;\n\n    [[nodiscard]] bool is_evolving() const noexcept;\n    void               is_evolving(bool v) noexcept;\n\n    [[nodiscard]] TimePoint last_modified() const noexcept;\n\n  protected:\n    friend class AttributeCollection;\n\n    virtual std::string_view get_name() const noexcept          = 0;\n    virtual bool             get_allow_destroy() const noexcept = 0;\n\n    virtual bool get_is_evolving() const noexcept = 0;\n    virtual void set_is_evolving(bool v) noexcept = 0;\n\n    void         make_owned();\n    virtual void do_make_owned() = 0;\n\n    SizeT         use_count() const;\n    virtual SizeT get_use_count() const = 0;\n\n    S&lt;IAttributeSlot&gt; clone(std::string_view name, bool allow_destroy) const;\n    virtual S&lt;IAttributeSlot&gt; do_clone(std::string_view name, bool allow_destroy) const = 0;\n\n    S&lt;IAttributeSlot&gt; clone_empty(std::string_view name, bool allow_destroy) const;\n    virtual S&lt;IAttributeSlot&gt; do_clone_empty(std::string_view name,\n                                             bool allow_destroy) const = 0;\n\n    void         share_from(const IAttributeSlot&amp; other) noexcept;\n    virtual void do_share_from(const IAttributeSlot&amp; other) noexcept = 0;\n\n    virtual IAttribute&amp;       attribute() noexcept;\n    virtual IAttribute&amp;       get_attribute() noexcept = 0;\n    virtual const IAttribute&amp; attribute() const noexcept;\n    virtual const IAttribute&amp; get_attribute() const noexcept     = 0;\n    virtual TimePoint         get_last_modified() const noexcept = 0;\n};\n\ntemplate &lt;typename T&gt;\nclass AttributeSlot final : public IAttributeSlot\n{\n  public:\n    using value_type = T;\n\n    AttributeSlot(std::string_view m_name, S&lt;Attribute&lt;T&gt;&gt; attribute, bool allow_destroy);\n\n    template &lt;typename U&gt;\n    friend span&lt;U&gt; view(AttributeSlot&lt;U&gt;&amp; slot);\n\n    [[nodiscard]] span&lt;const T&gt; view() const noexcept;\n\n  private:\n    friend class AttributeCollection;\n\n    virtual std::string_view get_name() const noexcept override;\n    virtual bool             get_allow_destroy() const noexcept override;\n    virtual bool             get_is_evolving() const noexcept;\n    virtual void             set_is_evolving(bool v) noexcept;\n\n    virtual IAttribute&amp;       get_attribute() noexcept override;\n    virtual const IAttribute&amp; get_attribute() const noexcept override;\n    virtual SizeT             get_use_count() const noexcept override;\n\n\n    void do_make_owned() override;\n    virtual S&lt;IAttributeSlot&gt; do_clone(std::string_view name, bool allow_destroy) const override;\n    virtual S&lt;IAttributeSlot&gt; do_clone_empty(std::string_view name,\n                                             bool allow_destroy) const override;\n    virtual void do_share_from(const IAttributeSlot&amp; other) noexcept override;\n    virtual TimePoint get_last_modified() const noexcept override;\n\n    TimePoint       m_last_modified;\n    std::string     m_name;\n    S&lt;Attribute&lt;T&gt;&gt; m_attribute;\n    bool            m_allow_destroy;\n    bool            m_is_evolving = false;\n};\n}  // namespace uipc::geometry\n#include \"details/attribute_slot.inl\"\n</code></pre>"},{"location":"Libuipc/geometry_2geometry_8h/","title":"File geometry.h","text":""},{"location":"Libuipc/geometry_2geometry_8h/#file-geometryh","title":"File geometry.h","text":"<p>FileList &gt; geometry &gt; geometry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_collection.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_friend.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_friend.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_collection_commit.h&gt;</code></li> <li><code>#include \"details/geometry.inl\"</code></li> </ul>"},{"location":"Libuipc/geometry_2geometry_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace backend namespace geometry"},{"location":"Libuipc/geometry_2geometry_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::geometry::Geometry &gt; &lt;&gt; struct formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt; &lt;IsConst&gt; struct formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt; &lt;IsConst&gt; class Geometry A base geometries class that contains the instance attributes and the meta attributes. class InstanceAttributesT &lt;IsConst&gt;A wrapper class for the instance attributes of a geometries. class MetaAttributesT &lt;IsConst&gt;A wrapper class for the meta attributes of a geometries. class IGeometry An abstract class for geometries. <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry.h</code></p>"},{"location":"Libuipc/geometry_2geometry_8h_source/","title":"File geometry.h","text":""},{"location":"Libuipc/geometry_2geometry_8h_source/#file-geometryh","title":"File geometry.h","text":"<p>File List &gt; geometry &gt; geometry.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;string_view&gt;\n#include &lt;uipc/geometry/attribute_collection.h&gt;\n#include &lt;uipc/geometry/attribute_friend.h&gt;\n#include &lt;uipc/geometry/geometry_friend.h&gt;\n#include &lt;uipc/geometry/attribute_collection_commit.h&gt;\n\nnamespace uipc::backend\n{\nclass GeometryVisitor;\n}\nnamespace uipc::geometry\n{\nclass GeometryCommit;\n\nclass UIPC_CORE_API IGeometry\n{\n    template &lt;typename T&gt;\n    friend class GeometryFriend;\n    friend class backend::GeometryVisitor;\n    friend class GeometryCommit;\n    friend class GeometryCollection;\n\n  public:\n    [[nodiscard]] std::string_view type() const noexcept;\n    virtual ~IGeometry() = default;\n    [[nodiscard]] Json to_json() const;\n\n    /*\n    * @brief Clone the underlying geometry, this is used to create a new geometry with the same type and attributes.\n    */\n    [[nodiscard]] S&lt;IGeometry&gt; clone() const;\n\n    void update_from(const GeometryCommit&amp; commit);\n\n  protected:\n    [[nodiscard]] virtual std::string_view get_type() const noexcept = 0;\n    virtual Json                           do_to_json() const        = 0;\n\n    virtual void do_collect_attribute_collections(\n        vector&lt;std::string&gt;&amp;                names,\n        vector&lt;const AttributeCollection*&gt;&amp; collections) const = 0;\n\n    virtual void do_collect_attribute_collections(vector&lt;std::string&gt;&amp; names,\n                                                  vector&lt;AttributeCollection*&gt;&amp; collections) = 0;\n\n    virtual void do_build_from_attribute_collections(span&lt;const std::string&gt; names,\n                                                     span&lt;const AttributeCollection*&gt; collections) = 0;\n    virtual S&lt;IGeometry&gt; do_clone() const = 0;\n\n    virtual void do_update_from(const GeometryCommit&amp; commit) = 0;\n\n  private:\n    void collect_attribute_collections(vector&lt;std::string&gt;&amp; names,\n                                       vector&lt;const AttributeCollection*&gt;&amp; collections) const;\n\n    void collect_attribute_collections(vector&lt;std::string&gt;&amp; names,\n                                       vector&lt;AttributeCollection*&gt;&amp; collections);\n\n    void build_from_attribute_collections(span&lt;const std::string&gt; names,\n                                          span&lt;const AttributeCollection*&gt; collections);\n};\n\nclass UIPC_CORE_API Geometry : public IGeometry\n{\n    template &lt;typename T&gt;\n    friend class GeometryFriend;\n    friend class GeometryCommit;\n\n  public:\n    template &lt;bool IsConst&gt;\n    class MetaAttributesT\n    {\n        friend struct fmt::formatter&lt;MetaAttributesT&lt;IsConst&gt;&gt;;\n\n        using AutoAttributeCollection =\n            std::conditional_t&lt;IsConst, const AttributeCollection, AttributeCollection&gt;;\n\n        template &lt;bool _IsConst&gt;\n        friend class MetaAttributesT;\n\n        template &lt;typename T&gt;\n        friend class AttributeFriend;\n\n      public:\n        MetaAttributesT(AutoAttributeCollection&amp; attributes)\n            : m_attributes(attributes)\n        {\n        }\n\n        template &lt;bool OtherIsConst&gt;\n        MetaAttributesT(const MetaAttributesT&lt;OtherIsConst&gt;&amp; o) noexcept\n            requires(IsConst)\n            : m_attributes(o.m_attributes)\n        {\n        }\n\n        MetaAttributesT(const MetaAttributesT&amp; o)            = default;\n        MetaAttributesT(MetaAttributesT&amp;&amp; o)                 = default;\n        MetaAttributesT&amp; operator=(const MetaAttributesT&amp; o) = default;\n        MetaAttributesT&amp; operator=(MetaAttributesT&amp;&amp; o)      = default;\n\n        template &lt;typename T&gt;\n        [[nodiscard]] auto find(std::string_view name) &amp;&amp;\n        {\n            return m_attributes.template find&lt;T&gt;(name);\n        }\n\n        template &lt;typename T&gt;\n        decltype(auto) create(std::string_view name, const T&amp; init_value = {}) &amp;&amp;\n        {\n            return m_attributes.template create&lt;T&gt;(name, init_value);\n        }\n\n        template &lt;typename T&gt;\n        decltype(auto) share(std::string_view name, const AttributeSlot&lt;T&gt;&amp; slot)\n            requires(!IsConst)\n        {\n            return m_attributes.template share&lt;T&gt;(name, slot);\n        }\n\n        void destroy(std::string_view name) &amp;&amp;\n            requires(!IsConst)\n        {\n            m_attributes.destroy(name);\n        }\n\n        void copy_from(MetaAttributesT&lt;true&gt; other,\n                       const AttributeCopy&amp;  copy          = {},\n                       span&lt;const string&gt;    include_names = {},\n                       span&lt;const string&gt;    exclude_names = {}) &amp;&amp;\n            requires(!IsConst)\n        {\n            m_attributes.copy_from(other.m_attributes, copy, include_names, exclude_names);\n        }\n\n        Json to_json() const;\n\n      private:\n        AutoAttributeCollection&amp; m_attributes;\n    };\n\n    using MetaAttributes  = MetaAttributesT&lt;false&gt;;\n    using CMetaAttributes = MetaAttributesT&lt;true&gt;;\n\n    template &lt;bool IsConst&gt;\n    class InstanceAttributesT\n    {\n        friend struct fmt::formatter&lt;InstanceAttributesT&lt;IsConst&gt;&gt;;\n\n        template &lt;bool _IsConst&gt;\n        friend class InstanceAttributesT;\n\n        template &lt;typename T&gt;\n        friend class AttributeFriend;\n\n        using AutoAttributeCollection =\n            std::conditional_t&lt;IsConst, const AttributeCollection, AttributeCollection&gt;;\n\n      public:\n        InstanceAttributesT(AutoAttributeCollection&amp; attributes)\n            : m_attributes(attributes)\n        {\n        }\n\n        template &lt;bool OtherIsConst&gt;\n        InstanceAttributesT(const InstanceAttributesT&lt;OtherIsConst&gt;&amp; o) noexcept\n            requires(IsConst)\n            : m_attributes(o.m_attributes)\n        {\n        }\n\n        InstanceAttributesT(const InstanceAttributesT&amp; o)            = default;\n        InstanceAttributesT(InstanceAttributesT&amp;&amp; o)                 = default;\n        InstanceAttributesT&amp; operator=(const InstanceAttributesT&amp; o) = default;\n        InstanceAttributesT&amp; operator=(InstanceAttributesT&amp;&amp; o)      = default;\n\n        void resize(size_t size) &amp;&amp;\n            requires(!IsConst);\n        void reserve(size_t size) &amp;&amp;\n            requires(!IsConst);\n        void clear() &amp;&amp;\n            requires(!IsConst);\n        [[nodiscard]] SizeT size() &amp;&amp;;\n\n        void destroy(std::string_view name) &amp;&amp;\n            requires(!IsConst);\n\n        template &lt;typename T&gt;\n        [[nodiscard]] auto find(std::string_view name) &amp;&amp;\n        {\n            return m_attributes.template find&lt;T&gt;(name);\n        }\n\n        template &lt;typename T&gt;\n        decltype(auto) create(std::string_view name, const T&amp; init_value = {}) &amp;&amp;\n        {\n            return m_attributes.template create&lt;T&gt;(name, init_value);\n        }\n\n        template &lt;typename T&gt;\n        decltype(auto) share(std::string_view name, const AttributeSlot&lt;T&gt;&amp; slot)\n            requires(!IsConst)\n        {\n            return m_attributes.template share&lt;T&gt;(name, slot);\n        }\n\n        void copy_from(InstanceAttributesT&lt;true&gt; other,\n                       const AttributeCopy&amp;      copy          = {},\n                       span&lt;const string&gt;        include_names = {},\n                       span&lt;const string&gt;        exclude_names = {}) &amp;&amp;\n            requires(!IsConst)\n        {\n            m_attributes.copy_from(other.m_attributes, copy, include_names, exclude_names);\n        }\n\n        Json to_json() const;\n\n      private:\n        AutoAttributeCollection&amp; m_attributes;\n    };\n\n    using InstanceAttributes  = InstanceAttributesT&lt;false&gt;;\n    using CInstanceAttributes = InstanceAttributesT&lt;true&gt;;\n\n    Geometry();\n\n    // allow copy_from and move on construction, because the geometry truely empty\n    Geometry(const Geometry&amp; o);\n    Geometry(Geometry&amp;&amp; o) = default;\n\n    // no copy_from or move assignment, because the geometry is no longer empty\n    Geometry&amp; operator=(const Geometry&amp; o) = delete;\n    Geometry&amp; operator=(Geometry&amp;&amp; o)      = delete;\n\n    [[nodiscard]] MetaAttributes meta();\n\n    [[nodiscard]] CMetaAttributes meta() const;\n\n\n    [[nodiscard]] InstanceAttributes instances();\n\n    [[nodiscard]] CInstanceAttributes instances() const;\n\n    template &lt;std::derived_from&lt;Geometry&gt; T&gt;\n    [[nodiscard]] T* as();\n\n    template &lt;std::derived_from&lt;Geometry&gt; T&gt;\n    [[nodiscard]] const T* as() const;\n\n  protected:\n    S&lt;AttributeCollection&gt;       create(std::string_view name);\n    S&lt;const AttributeCollection&gt; find(std::string_view name) const;\n    S&lt;AttributeCollection&gt;       find(std::string_view name);\n\n    virtual Json do_to_json() const override;\n    virtual void do_collect_attribute_collections(vector&lt;std::string&gt;&amp; names,\n                                                  vector&lt;const AttributeCollection*&gt;&amp; collections) const override;\n\n    virtual void do_collect_attribute_collections(vector&lt;std::string&gt;&amp; names,\n                                                  vector&lt;AttributeCollection*&gt;&amp; collections) override;\n\n    virtual void do_build_from_attribute_collections(span&lt;const std::string&gt; names,\n                                                     span&lt;const AttributeCollection*&gt; collections) override;\n\n    virtual void do_update_from(const GeometryCommit&amp; commit) override;\n\n    virtual S&lt;IGeometry&gt; do_clone() const override;\n\n    virtual std::string_view get_type() const noexcept override;\n\n  private:\n    // shortcut\n    mutable S&lt;AttributeCollection&gt; m_intances;\n    mutable S&lt;AttributeCollection&gt; m_meta;\n\n    // Core Data Structure\n    unordered_map&lt;std::string, S&lt;AttributeCollection&gt;&gt; m_attribute_collections;\n};\n}  // namespace uipc::geometry\n\n\nnamespace fmt\n{\ntemplate &lt;bool IsConst&gt;\nstruct formatter&lt;uipc::geometry::Geometry::MetaAttributesT&lt;IsConst&gt;&gt;\n    : public formatter&lt;string_view&gt;\n{\n    auto format(const uipc::geometry::Geometry::MetaAttributesT&lt;IsConst&gt;&amp; attr,\n                format_context&amp; ctx) const\n    {\n        return fmt::format_to(ctx.out(), \"{}\", attr.m_attributes);\n    }\n};\n\ntemplate &lt;bool IsConst&gt;\nstruct formatter&lt;uipc::geometry::Geometry::InstanceAttributesT&lt;IsConst&gt;&gt;\n    : public formatter&lt;string_view&gt;\n{\n    auto format(const uipc::geometry::Geometry::InstanceAttributesT&lt;IsConst&gt;&amp; attr,\n                format_context&amp; ctx) const\n    {\n        return fmt::format_to(ctx.out(), \"{}\", attr.m_attributes);\n    }\n};\n\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::geometry::Geometry&gt; : public formatter&lt;string_view&gt;\n{\n    appender format(const uipc::geometry::Geometry&amp; geo, format_context&amp; ctx) const;\n};\n}  // namespace fmt\n\n#include \"details/geometry.inl\"\n</code></pre>"},{"location":"Libuipc/geometry__atlas_8h/","title":"File geometry_atlas.h","text":""},{"location":"Libuipc/geometry__atlas_8h/#file-geometry_atlash","title":"File geometry_atlas.h","text":"<p>FileList &gt; geometry &gt; geometry_atlas.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_collection.h&gt;</code></li> </ul>"},{"location":"Libuipc/geometry__atlas_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/geometry__atlas_8h/#classes","title":"Classes","text":"Type Name class GeometryAtlas class GeometryAtlasCommit <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_atlas.h</code></p>"},{"location":"Libuipc/geometry__atlas_8h_source/","title":"File geometry_atlas.h","text":""},{"location":"Libuipc/geometry__atlas_8h_source/#file-geometry_atlash","title":"File geometry_atlas.h","text":"<p>File List &gt; geometry &gt; geometry_atlas.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/geometry/geometry_slot.h&gt;\n#include &lt;uipc/geometry/geometry_collection.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API GeometryAtlas\n{\n    class Impl;\n\n  public:\n    GeometryAtlas();\n    ~GeometryAtlas();\n\n    IndexT create(const Geometry&amp; geo, bool evolving_only = false);\n\n    S&lt;const GeometrySlot&gt; find(IndexT id) const;\n\n    SizeT geometry_count() const noexcept;\n\n    void create(std::string_view name, const AttributeCollection&amp; ac, bool evolving_only = false);\n\n    S&lt;const AttributeCollection&gt; find(std::string_view name) const;\n\n    SizeT attribute_collection_count() const noexcept;\n\n    vector&lt;std::string&gt; attribute_collection_names() const noexcept;\n\n    Json to_json() const;\n\n    void from_json(const Json&amp; j);\n\n  private:\n    U&lt;Impl&gt; m_impl;\n};\n\nclass UIPC_CORE_API GeometryAtlasCommit\n{\n    class Impl;\n\n  public:\n    GeometryAtlasCommit();\n    ~GeometryAtlasCommit();\n\n    IndexT                  create(const GeometryCommit&amp; geo_commit);\n    S&lt;const GeometryCommit&gt; find(IndexT id) const;\n    void create(std::string_view name, const AttributeCollectionCommit&amp; ac_commit);\n    S&lt;const AttributeCollectionCommit&gt; find(std::string_view name) const;\n    vector&lt;std::string&gt; attribute_collection_names() const noexcept;\n    SizeT               attribute_collection_count() const noexcept;\n    SizeT               geometry_count() const noexcept;\n\n    Json to_json() const;\n\n    void from_json(const Json&amp; j);\n\n\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/geometry__collection_8h/","title":"File geometry_collection.h","text":""},{"location":"Libuipc/geometry__collection_8h/#file-geometry_collectionh","title":"File geometry_collection.h","text":"<p>FileList &gt; geometry &gt; geometry_collection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;concepts&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/common/set.h&gt;</code></li> <li><code>#include \"details/geometry_collection.inl\"</code></li> </ul>"},{"location":"Libuipc/geometry__collection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core namespace internal namespace geometry"},{"location":"Libuipc/geometry__collection_8h/#classes","title":"Classes","text":"Type Name class GeometryCollection class IGeometryCollection <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_collection.h</code></p>"},{"location":"Libuipc/geometry__collection_8h_source/","title":"File geometry_collection.h","text":""},{"location":"Libuipc/geometry__collection_8h_source/#file-geometry_collectionh","title":"File geometry_collection.h","text":"<p>File List &gt; geometry &gt; geometry_collection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;concepts&gt;\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/geometry/geometry_slot.h&gt;\n#include &lt;uipc/common/set.h&gt;\n\nnamespace uipc::core::internal\n{\nclass Scene;\n}\n\nnamespace uipc::core\n{\nclass SceneFactory;\n}\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API IGeometryCollection\n{\n  public:\n    virtual ~IGeometryCollection() = default;\n    [[nodiscard]] SizeT size() const noexcept;\n    void                clear() noexcept;\n    void                reserve(SizeT size) noexcept;\n    IndexT              next_id() const noexcept;\n\n  protected:\n    virtual SizeT  get_size() const noexcept       = 0;\n    virtual void   do_clear() noexcept             = 0;\n    virtual void   do_reserve(SizeT size) noexcept = 0;\n    virtual IndexT get_next_id() const noexcept    = 0;\n};\n\nclass UIPC_CORE_API GeometryCollection : public IGeometryCollection\n{\n    friend class core::internal::Scene;\n    friend class core::SceneFactory;\n    friend class GeometryCollectionCommit;\n\n  public:\n    GeometryCollection() = default;\n\n    GeometryCollection(const GeometryCollection&amp;);\n    GeometryCollection&amp; operator=(const GeometryCollection&amp;) = delete;\n\n    GeometryCollection(GeometryCollection&amp;&amp;) noexcept   = default;\n    GeometryCollection&amp; operator=(GeometryCollection&amp;&amp;) = default;\n\n    template &lt;std::derived_from&lt;geometry::Geometry&gt; GeometryT&gt;\n        requires(!std::is_abstract_v&lt;GeometryT&gt;)\n    S&lt;geometry::GeometrySlotT&lt;GeometryT&gt;&gt; emplace(const GeometryT&amp; geometry);\n\n    S&lt;geometry::GeometrySlot&gt; emplace(const geometry::Geometry&amp; geometry);\n\n    template &lt;std::derived_from&lt;geometry::Geometry&gt; GeometryT&gt;\n        requires(!std::is_abstract_v&lt;GeometryT&gt;)\n    S&lt;geometry::GeometrySlotT&lt;GeometryT&gt;&gt; pending_emplace(const GeometryT&amp; geometry);\n\n    template &lt;std::derived_from&lt;geometry::Geometry&gt; GeometryT&gt;\n    S&lt;geometry::GeometrySlotT&lt;GeometryT&gt;&gt; find(IndexT id) noexcept;\n    S&lt;geometry::GeometrySlot&gt;             find(IndexT id) noexcept;\n\n    template &lt;std::derived_from&lt;geometry::Geometry&gt; GeometryT&gt;\n    S&lt;const geometry::GeometrySlotT&lt;GeometryT&gt;&gt; find(IndexT id) const noexcept;\n    S&lt;const geometry::GeometrySlot&gt;             find(IndexT id) const noexcept;\n\n    void destroy(IndexT id) noexcept;\n    void pending_destroy(IndexT id) noexcept;\n\n\n    void solve_pending() noexcept;\n\n    span&lt;S&lt;geometry::GeometrySlot&gt;&gt; geometry_slots() const noexcept;\n    span&lt;S&lt;geometry::GeometrySlot&gt;&gt; pending_create_slots() const noexcept;\n    span&lt;IndexT&gt;                    pending_destroy_ids() const noexcept;\n\n  protected:\n    virtual void   do_reserve(SizeT size) noexcept override;\n    virtual void   do_clear() noexcept override;\n    virtual SizeT  get_size() const noexcept override;\n    virtual IndexT get_next_id() const noexcept override;\n\n  private:\n    unordered_map&lt;IndexT, S&lt;geometry::GeometrySlot&gt;&gt; m_geometries;\n    unordered_map&lt;IndexT, S&lt;geometry::GeometrySlot&gt;&gt; m_pending_create;\n    set&lt;IndexT&gt;                                      m_pending_destroy;\n\n    IndexT m_next_id = 0;\n\n    mutable bool m_dirty = true;\n\n    mutable vector&lt;S&lt;geometry::GeometrySlot&gt;&gt; m_geometry_slots;\n    mutable vector&lt;S&lt;geometry::GeometrySlot&gt;&gt; m_pending_create_slots;\n    mutable vector&lt;IndexT&gt;                    m_pending_destroy_ids;\n\n    void flush() const;\n\n    void build_from(span&lt;S&lt;geometry::GeometrySlot&gt;&gt; slots) noexcept;\n    void update_from(const unordered_map&lt;IndexT, GeometryCommit&gt;&amp; commits) noexcept;\n};\n}  // namespace uipc::geometry\n\n#include \"details/geometry_collection.inl\"\n</code></pre>"},{"location":"Libuipc/geometry__collection__commit_8h/","title":"File geometry_collection_commit.h","text":""},{"location":"Libuipc/geometry__collection__commit_8h/#file-geometry_collection_commith","title":"File geometry_collection_commit.h","text":"<p>FileList &gt; geometry &gt; geometry_collection_commit.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry_collection.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_commit.h&gt;</code></li> </ul>"},{"location":"Libuipc/geometry__collection__commit_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/geometry__collection__commit_8h/#classes","title":"Classes","text":"Type Name class GeometryCollectionCommit <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_collection_commit.h</code></p>"},{"location":"Libuipc/geometry__collection__commit_8h_source/","title":"File geometry_collection_commit.h","text":""},{"location":"Libuipc/geometry__collection__commit_8h_source/#file-geometry_collection_commith","title":"File geometry_collection_commit.h","text":"<p>File List &gt; geometry &gt; geometry_collection_commit.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry_collection.h&gt;\n#include &lt;uipc/geometry/geometry_commit.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API GeometryCollectionCommit\n{\n    friend class GeometryFactory;\n\n    friend UIPC_CORE_API GeometryCollectionCommit operator-(const GeometryCollection&amp; dst,\n                                                            const GeometryCollection&amp; src);\n    friend UIPC_CORE_API GeometryCollection&amp; operator+=(GeometryCollection&amp; dst,\n                                                        const GeometryCollectionCommit&amp; inc);\n\n  public:\n    GeometryCollectionCommit() = default;\n    GeometryCollectionCommit(const GeometryCollection&amp; dst, const GeometryCollection&amp; src);\n\n  private:\n    static void update_from(GeometryCollection&amp; base, const GeometryCollectionCommit&amp; inc);\n\n    IndexT m_next_id = 0;\n\n    unordered_map&lt;IndexT, GeometryCommit&gt; m_diff_geometries;\n};\n\nUIPC_CORE_API GeometryCollectionCommit operator-(const GeometryCollection&amp; dst,\n                                                 const GeometryCollection&amp; src);\nUIPC_CORE_API GeometryCollection&amp;      operator+=(GeometryCollection&amp; dst,\n                                             const GeometryCollectionCommit&amp; inc);\n\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/geometry__commit_8h/","title":"File geometry_commit.h","text":""},{"location":"Libuipc/geometry__commit_8h/#file-geometry_commith","title":"File geometry_commit.h","text":"<p>FileList &gt; geometry &gt; geometry_commit.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_collection_commit.h&gt;</code></li> </ul>"},{"location":"Libuipc/geometry__commit_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/geometry__commit_8h/#classes","title":"Classes","text":"Type Name class GeometryCommit <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_commit.h</code></p>"},{"location":"Libuipc/geometry__commit_8h_source/","title":"File geometry_commit.h","text":""},{"location":"Libuipc/geometry__commit_8h_source/#file-geometry_commith","title":"File geometry_commit.h","text":"<p>File List &gt; geometry &gt; geometry_commit.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/geometry/attribute_collection_commit.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API GeometryCommit\n{\n    friend class Geometry;\n    friend class GeometryCollection;\n    friend class GeometryFactory;\n    friend class GeometryAtlasCommit;\n\n    friend UIPC_CORE_API GeometryCommit operator-(const Geometry&amp; dst, const Geometry&amp; src);\n    friend UIPC_CORE_API Geometry&amp; operator+=(Geometry&amp; base, const GeometryCommit&amp; inc);\n\n  public:\n    GeometryCommit() = default;\n    GeometryCommit(const GeometryCommit&amp;);\n    GeometryCommit&amp; operator=(const GeometryCommit&amp;);\n\n    explicit GeometryCommit(const Geometry&amp; dst);\n    bool is_valid() const noexcept { return m_is_valid; }\n    bool is_new() const noexcept { return m_new_geometry != nullptr; }\n    bool is_modification() const noexcept\n    {\n        return !m_new_geometry &amp;&amp; m_attribute_collections.size() &gt; 0;\n    }\n    S&lt;Geometry&gt;        new_geometry() const noexcept { return m_new_geometry; }\n    const std::string&amp; type() const noexcept { return m_type; }\n    const unordered_map&lt;std::string, AttributeCollectionCommit&gt;&amp; attribute_collections() const noexcept\n    {\n        return m_attribute_collections;\n    }\n\n  private:\n    GeometryCommit(const Geometry&amp; dst, const Geometry&amp; src);\n\n    bool        m_is_valid = true;\n    S&lt;Geometry&gt; m_new_geometry;  // the new geometry\n\n    std::string m_type;\n    unordered_map&lt;std::string, AttributeCollectionCommit&gt; m_attribute_collections;\n};\n\nUIPC_CORE_API GeometryCommit operator-(const Geometry&amp; dst, const Geometry&amp; src);\nUIPC_CORE_API Geometry&amp; operator+=(Geometry&amp; base, const GeometryCommit&amp; inc);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/geometry__factory_8h/","title":"File geometry_factory.h","text":""},{"location":"Libuipc/geometry__factory_8h/#file-geometry_factoryh","title":"File geometry_factory.h","text":"<p>FileList &gt; geometry &gt; geometry_factory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry_commit.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/shared_attribute_context.h&gt;</code></li> </ul>"},{"location":"Libuipc/geometry__factory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/geometry__factory_8h/#classes","title":"Classes","text":"Type Name class GeometryFactory <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_factory.h</code></p>"},{"location":"Libuipc/geometry__factory_8h_source/","title":"File geometry_factory.h","text":""},{"location":"Libuipc/geometry__factory_8h_source/#file-geometry_factoryh","title":"File geometry_factory.h","text":"<p>File List &gt; geometry &gt; geometry_factory.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/geometry/geometry_slot.h&gt;\n#include &lt;uipc/geometry/geometry_commit.h&gt;\n#include &lt;uipc/geometry/shared_attribute_context.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API GeometryFactory\n{\n    class Impl;\n\n  public:\n    GeometryFactory();\n    ~GeometryFactory();\n\n    [[nodiscard]] vector&lt;S&lt;Geometry&gt;&gt; from_json(const Json&amp; j,\n                                                DeserialSharedAttributeContext&amp; ctx);\n\n    [[nodiscard]] Json to_json(span&lt;Geometry*&gt; geos, SerialSharedAttributeContext&amp; ctx);\n\n    [[nodiscard]] Json to_json(Geometry&amp; geos, SerialSharedAttributeContext&amp; ctx);\n\n    [[nodiscard]] Json commit_to_json(const GeometryCommit&amp;         gc,\n                                      SerialSharedAttributeContext&amp; ctx);\n\n    [[nodiscard]] S&lt;GeometryCommit&gt; commit_from_json(const Json&amp; j,\n                                                     DeserialSharedAttributeContext&amp; ctx);\n\n    [[nodiscard]] S&lt;GeometrySlot&gt; create_slot(IndexT id, const Geometry&amp; geometry);\n\n  private:\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/geometry__friend_8h/","title":"File geometry_friend.h","text":""},{"location":"Libuipc/geometry__friend_8h/#file-geometry_friendh","title":"File geometry_friend.h","text":"<p>FileList &gt; geometry &gt; geometry_friend.h</p> <p>Go to the source code of this file</p>"},{"location":"Libuipc/geometry__friend_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/geometry__friend_8h/#classes","title":"Classes","text":"Type Name class GeometryFriend &lt;typename T&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_friend.h</code></p>"},{"location":"Libuipc/geometry__friend_8h_source/","title":"File geometry_friend.h","text":""},{"location":"Libuipc/geometry__friend_8h_source/#file-geometry_friendh","title":"File geometry_friend.h","text":"<p>File List &gt; geometry &gt; geometry_friend.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\nnamespace uipc::geometry\n{\n// This class is a friend of all Geometry classes in the uipc namespace.\ntemplate &lt;typename T&gt;\nclass GeometryFriend\n{\n  public:\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/geometry__slot_8h/","title":"File geometry_slot.h","text":""},{"location":"Libuipc/geometry__slot_8h/#file-geometry_sloth","title":"File geometry_slot.h","text":"<p>FileList &gt; geometry &gt; geometry_slot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/geometry__slot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace std namespace uipc namespace core namespace geometry"},{"location":"Libuipc/geometry__slot_8h/#classes","title":"Classes","text":"Type Name class GeometrySlot class GeometrySlotT&lt; Geometry &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/geometry_slot.h</code></p>"},{"location":"Libuipc/geometry__slot_8h_source/","title":"File geometry_slot.h","text":""},{"location":"Libuipc/geometry__slot_8h_source/#file-geometry_sloth","title":"File geometry_slot.h","text":"<p>File List &gt; geometry &gt; geometry_slot.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/geometry/geometry.h&gt;\n\nnamespace uipc::core\n{\nclass SceneFactory;\n}\n\nnamespace uipc::geometry\n{\nenum class GeometrySlotState\n{\n    Normal,\n    PendingCreate,\n    PendingDestroy\n};\n\nclass UIPC_CORE_API GeometrySlot\n{\n    friend class GeometryCollection;\n    friend class core::SceneFactory;\n    friend class GeometryAtlas;\n\n  public:\n    GeometrySlot(IndexT id) noexcept;\n    virtual ~GeometrySlot() = default;\n    IndexT          id() const noexcept;\n    Geometry&amp;       geometry() noexcept;\n    const Geometry&amp; geometry() const noexcept;\n\n    GeometrySlotState state() const noexcept;\n    S&lt;GeometrySlot&gt;   clone() const;\n\n    GeometrySlot(const GeometrySlot&amp;)            = delete;\n    GeometrySlot(GeometrySlot&amp;&amp;)                 = delete;\n    GeometrySlot&amp; operator=(const GeometrySlot&amp;) = delete;\n    GeometrySlot&amp; operator=(GeometrySlot&amp;&amp;)      = delete;\n\n  protected:\n    virtual Geometry&amp;       get_geometry() noexcept       = 0;\n    virtual const Geometry&amp; get_geometry() const noexcept = 0;\n    virtual S&lt;GeometrySlot&gt; do_clone() const              = 0;\n\n  private:\n    IndexT            m_id;\n    void              id(IndexT id) noexcept;\n    GeometrySlotState m_state = GeometrySlotState::Normal;\n    void              state(GeometrySlotState state) noexcept;\n};\n\ntemplate &lt;std::derived_from&lt;Geometry&gt; GeometryT&gt;\n    requires(!std::is_abstract_v&lt;GeometryT&gt;)\nclass GeometrySlotT;\n\ntemplate &lt;&gt;\nclass UIPC_CORE_API GeometrySlotT&lt;Geometry&gt; : public GeometrySlot\n{\n  public:\n    GeometrySlotT(IndexT id, const Geometry&amp; geometry);\n\n  protected:\n    Geometry&amp;       get_geometry() noexcept override;\n    const Geometry&amp; get_geometry() const noexcept override;\n    S&lt;GeometrySlot&gt; do_clone() const override;\n\n  private:\n    Geometry m_geometry;\n};\n}  // namespace uipc::geometry\n\nnamespace std\n{\n// clang++-17: explicit instantiation of 'shared_ptr' should be in a namespace enclosing 'std'.\nextern template class std::shared_ptr&lt;uipc::geometry::GeometrySlot&gt;;\n}  // namespace std\n</code></pre>"},{"location":"Libuipc/implicit__geometry_8h/","title":"File implicit_geometry.h","text":""},{"location":"Libuipc/implicit__geometry_8h/#file-implicit_geometryh","title":"File implicit_geometry.h","text":"<p>FileList &gt; geometry &gt; implicit_geometry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/builtin/uid_info.h&gt;</code></li> </ul>"},{"location":"Libuipc/implicit__geometry_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace geometry"},{"location":"Libuipc/implicit__geometry_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::geometry::ImplicitGeometry &gt; &lt;&gt; class ImplicitGeometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/implicit_geometry.h</code></p>"},{"location":"Libuipc/implicit__geometry_8h_source/","title":"File implicit_geometry.h","text":""},{"location":"Libuipc/implicit__geometry_8h_source/#file-implicit_geometryh","title":"File implicit_geometry.h","text":"<p>File List &gt; geometry &gt; implicit_geometry.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/builtin/uid_info.h&gt;\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API ImplicitGeometry : public Geometry\n{\n  public:\n    ImplicitGeometry();\n\n    const builtin::UIDInfo&amp; uid_info() const noexcept;\n    std::string_view        name() const noexcept;\n\n  protected:\n    virtual std::string_view get_type() const noexcept override;\n    virtual S&lt;IGeometry&gt;     do_clone() const override;\n};\n}  // namespace uipc::geometry\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::geometry::ImplicitGeometry&gt;\n    : public formatter&lt;std::string_view&gt;\n{\n    appender format(const uipc::geometry::ImplicitGeometry&amp; geometry,\n                    format_context&amp;                         ctx) const;\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/implicit__geometry__slot_8h/","title":"File implicit_geometry_slot.h","text":""},{"location":"Libuipc/implicit__geometry__slot_8h/#file-implicit_geometry_sloth","title":"File implicit_geometry_slot.h","text":"<p>FileList &gt; geometry &gt; implicit_geometry_slot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/implicit_geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/implicit__geometry__slot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace std namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/implicit_geometry_slot.h</code></p>"},{"location":"Libuipc/implicit__geometry__slot_8h_source/","title":"File implicit_geometry_slot.h","text":""},{"location":"Libuipc/implicit__geometry__slot_8h_source/#file-implicit_geometry_sloth","title":"File implicit_geometry_slot.h","text":"<p>File List &gt; geometry &gt; implicit_geometry_slot.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry_slot.h&gt;\n#include &lt;uipc/geometry/implicit_geometry.h&gt;\n\nnamespace uipc::geometry\n{\ntemplate &lt;&gt;\nclass UIPC_CORE_API GeometrySlotT&lt;ImplicitGeometry&gt; : public GeometrySlot\n{\n  public:\n    GeometrySlotT(IndexT id, const ImplicitGeometry&amp; geometry);\n\n    ImplicitGeometry&amp;       geometry() noexcept;\n    const ImplicitGeometry&amp; geometry() const noexcept;\n\n  protected:\n    Geometry&amp;       get_geometry() noexcept override;\n    const Geometry&amp; get_geometry() const noexcept override;\n    S&lt;GeometrySlot&gt; do_clone() const override;\n\n  private:\n    ImplicitGeometry m_geometry;\n};\n\nusing ImplicitGeometrySlot = GeometrySlotT&lt;ImplicitGeometry&gt;;\n}  // namespace uipc::geometry\n\nnamespace std\n{\nextern template class std::shared_ptr&lt;uipc::geometry::ImplicitGeometrySlot&gt;;\n}\n</code></pre>"},{"location":"Libuipc/dir_739799d2da88efedfd4a7c44220c72e4/","title":"Dir include/uipc/geometry/utils","text":""},{"location":"Libuipc/dir_739799d2da88efedfd4a7c44220c72e4/#dir-includeuipcgeometryutils","title":"Dir include/uipc/geometry/utils","text":"<p>FileList &gt; geometry &gt; utils</p>"},{"location":"Libuipc/dir_739799d2da88efedfd4a7c44220c72e4/#files","title":"Files","text":"Type Name file apply_region.h file apply_transform.h file bvh.h file closure.h file compute_instance_volume.h file compute_vertex_volume.h file distance.h file extract_surface.h file factory.h file flip_inward_triangles.h file intersection.h file is_trimesh_closed.h file label_connected_vertices.h file label_region.h file label_surface.h file label_triangle_orient.h file merge.h file mesh_partition.h file octree.h file optimal_transform.h file simplex_utils.h file tetrahedralize.h"},{"location":"Libuipc/dir_739799d2da88efedfd4a7c44220c72e4/#directories","title":"Directories","text":"Type Name dir affine_body <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/</code></p>"},{"location":"Libuipc/apply__region_8h/","title":"File apply_region.h","text":""},{"location":"Libuipc/apply__region_8h/#file-apply_regionh","title":"File apply_region.h","text":"<p>FileList &gt; geometry &gt; utils &gt; apply_region.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/apply__region_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/apply_region.h</code></p>"},{"location":"Libuipc/apply__region_8h_source/","title":"File apply_region.h","text":""},{"location":"Libuipc/apply__region_8h_source/#file-apply_regionh","title":"File apply_region.h","text":"<p>File List &gt; geometry &gt; utils &gt; apply_region.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API vector&lt;SimplicialComplex&gt; apply_region(const SimplicialComplex&amp; complex);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/apply__transform_8h/","title":"File apply_transform.h","text":""},{"location":"Libuipc/apply__transform_8h/#file-apply_transformh","title":"File apply_transform.h","text":"<p>FileList &gt; geometry &gt; utils &gt; apply_transform.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/apply__transform_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/apply_transform.h</code></p>"},{"location":"Libuipc/apply__transform_8h_source/","title":"File apply_transform.h","text":""},{"location":"Libuipc/apply__transform_8h_source/#file-apply_transformh","title":"File apply_transform.h","text":"<p>File List &gt; geometry &gt; utils &gt; apply_transform.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API [[nodiscard]] vector&lt;SimplicialComplex&gt; apply_transform(const SimplicialComplex&amp; complex);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/bvh_8h/","title":"File bvh.h","text":""},{"location":"Libuipc/bvh_8h/#file-bvhh","title":"File bvh.h","text":"<p>FileList &gt; geometry &gt; utils &gt; bvh.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;Eigen/Geometry&gt;</code></li> </ul>"},{"location":"Libuipc/bvh_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/bvh_8h/#classes","title":"Classes","text":"Type Name class BVH <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/bvh.h</code></p>"},{"location":"Libuipc/bvh_8h_source/","title":"File bvh.h","text":""},{"location":"Libuipc/bvh_8h_source/#file-bvhh","title":"File bvh.h","text":"<p>File List &gt; geometry &gt; utils &gt; bvh.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;Eigen/Geometry&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_GEOMETRY_API BVH\n{\n  public:\n    using AABB = Eigen::AlignedBox&lt;Float, 3&gt;;\n\n    BVH();\n    ~BVH();\n\n    void build(span&lt;const AABB&gt; aabbs);\n\n    void clear();\n\n    void query(span&lt;const AABB&gt; aabbs, std::function&lt;void(IndexT, IndexT)&gt;&amp;&amp; QF) const;\n\n  private:\n    class Impl;\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/closure_8h/","title":"File closure.h","text":""},{"location":"Libuipc/closure_8h/#file-closureh","title":"File closure.h","text":"<p>FileList &gt; geometry &gt; utils &gt; closure.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/closure_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/closure.h</code></p>"},{"location":"Libuipc/closure_8h_source/","title":"File closure.h","text":""},{"location":"Libuipc/closure_8h_source/#file-closureh","title":"File closure.h","text":"<p>File List &gt; geometry &gt; utils &gt; closure.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex facet_closure(const SimplicialComplex&amp; complex);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/compute__instance__volume_8h/","title":"File compute_instance_volume.h","text":""},{"location":"Libuipc/compute__instance__volume_8h/#file-compute_instance_volumeh","title":"File compute_instance_volume.h","text":"<p>FileList &gt; geometry &gt; utils &gt; compute_instance_volume.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/compute__instance__volume_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/compute_instance_volume.h</code></p>"},{"location":"Libuipc/compute__instance__volume_8h_source/","title":"File compute_instance_volume.h","text":""},{"location":"Libuipc/compute__instance__volume_8h_source/#file-compute_instance_volumeh","title":"File compute_instance_volume.h","text":"<p>File List &gt; geometry &gt; utils &gt; compute_instance_volume.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API S&lt;AttributeSlot&lt;Float&gt;&gt; compute_instance_volume(SimplicialComplex&amp; R);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/compute__vertex__volume_8h/","title":"File compute_vertex_volume.h","text":""},{"location":"Libuipc/compute__vertex__volume_8h/#file-compute_vertex_volumeh","title":"File compute_vertex_volume.h","text":"<p>FileList &gt; geometry &gt; utils &gt; compute_vertex_volume.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/compute__vertex__volume_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/compute_vertex_volume.h</code></p>"},{"location":"Libuipc/compute__vertex__volume_8h_source/","title":"File compute_vertex_volume.h","text":""},{"location":"Libuipc/compute__vertex__volume_8h_source/#file-compute_vertex_volumeh","title":"File compute_vertex_volume.h","text":"<p>File List &gt; geometry &gt; utils &gt; compute_vertex_volume.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API S&lt;AttributeSlot&lt;Float&gt;&gt; compute_vertex_volume(SimplicialComplex&amp; R);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/distance_8h/","title":"File distance.h","text":""},{"location":"Libuipc/distance_8h/#file-distanceh","title":"File distance.h","text":"<p>FileList &gt; geometry &gt; utils &gt; distance.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> </ul>"},{"location":"Libuipc/distance_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/distance.h</code></p>"},{"location":"Libuipc/distance_8h_source/","title":"File distance.h","text":""},{"location":"Libuipc/distance_8h_source/#file-distanceh","title":"File distance.h","text":"<p>File List &gt; geometry &gt; utils &gt; distance.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n\nnamespace uipc::geometry\n{\nFloat UIPC_GEOMETRY_API halfplane_vertex_signed_distance(const Vector3&amp; P,\n                                                         const Vector3&amp; N,\n                                                         const Vector3&amp; V,\n                                                         Float V_thickness = 0.0);\n\nFloat UIPC_GEOMETRY_API point_point_squared_distance(const Vector3&amp; P0, const Vector3&amp; P1);\n\nFloat UIPC_GEOMETRY_API point_edge_squared_distance(const Vector3&amp; P,\n                                                    const Vector3&amp; E0,\n                                                    const Vector3&amp; E1);\n\nFloat UIPC_GEOMETRY_API point_triangle_squared_distance(const Vector3&amp; P,\n                                                        const Vector3&amp; T0,\n                                                        const Vector3&amp; T1,\n                                                        const Vector3&amp; T2);\n\nFloat UIPC_GEOMETRY_API edge_edge_squared_distance(const Vector3&amp; Ea0,\n                                                   const Vector3&amp; Ea1,\n                                                   const Vector3&amp; Eb0,\n                                                   const Vector3&amp; Eb1);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/extract__surface_8h/","title":"File extract_surface.h","text":""},{"location":"Libuipc/extract__surface_8h/#file-extract_surfaceh","title":"File extract_surface.h","text":"<p>FileList &gt; geometry &gt; utils &gt; extract_surface.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/extract__surface_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/extract_surface.h</code></p>"},{"location":"Libuipc/extract__surface_8h_source/","title":"File extract_surface.h","text":""},{"location":"Libuipc/extract__surface_8h_source/#file-extract_surfaceh","title":"File extract_surface.h","text":"<p>File List &gt; geometry &gt; utils &gt; extract_surface.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex extract_surface(const SimplicialComplex&amp; src);\n\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex extract_surface(span&lt;const SimplicialComplex*&gt; complexes);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/factory_8h/","title":"File factory.h","text":""},{"location":"Libuipc/factory_8h/#file-factoryh","title":"File factory.h","text":"<p>FileList &gt; geometry &gt; utils &gt; factory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/implicit_geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/factory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/factory.h</code></p>"},{"location":"Libuipc/factory_8h_source/","title":"File factory.h","text":""},{"location":"Libuipc/factory_8h_source/#file-factoryh","title":"File factory.h","text":"<p>File List &gt; geometry &gt; utils &gt; factory.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n#include &lt;uipc/geometry/implicit_geometry.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex tetmesh(span&lt;const Vector3&gt; Vs,\n                                                          span&lt;const Vector4i&gt; Ts);\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex trimesh(span&lt;const Vector3&gt; Vs,\n                                                          span&lt;const Vector3i&gt; Fs);\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex linemesh(span&lt;const Vector3&gt; Vs,\n                                                           span&lt;const Vector2i&gt; Es);\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex pointcloud(span&lt;const Vector3&gt; Vs);\n\n\nUIPC_GEOMETRY_API [[nodiscard]] ImplicitGeometry halfplane(\n    const Vector3&amp; P = Vector3::Zero(), const Vector3&amp; N = Vector3::UnitY());\n\nUIPC_GEOMETRY_API [[nodiscard]] ImplicitGeometry ground(Float height = 0.0,\n                                                        const Vector3&amp; N = Vector3::UnitY());\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/flip__inward__triangles_8h/","title":"File flip_inward_triangles.h","text":""},{"location":"Libuipc/flip__inward__triangles_8h/#file-flip_inward_trianglesh","title":"File flip_inward_triangles.h","text":"<p>FileList &gt; geometry &gt; utils &gt; flip_inward_triangles.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/flip__inward__triangles_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/flip_inward_triangles.h</code></p>"},{"location":"Libuipc/flip__inward__triangles_8h_source/","title":"File flip_inward_triangles.h","text":""},{"location":"Libuipc/flip__inward__triangles_8h_source/#file-flip_inward_trianglesh","title":"File flip_inward_triangles.h","text":"<p>File List &gt; geometry &gt; utils &gt; flip_inward_triangles.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex flip_inward_triangles(const SimplicialComplex&amp; sc);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/dir_0434b40e061af98901db13a48821d02b/","title":"Dir include/uipc/geometry/utils/affine_body","text":""},{"location":"Libuipc/dir_0434b40e061af98901db13a48821d02b/#dir-includeuipcgeometryutilsaffine_body","title":"Dir include/uipc/geometry/utils/affine_body","text":"<p>FileList &gt; affine_body</p>"},{"location":"Libuipc/dir_0434b40e061af98901db13a48821d02b/#files","title":"Files","text":"Type Name file compute_body_force.h file compute_dyadic_mass.h <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/affine_body/</code></p>"},{"location":"Libuipc/compute__body__force_8h/","title":"File compute_body_force.h","text":""},{"location":"Libuipc/compute__body__force_8h/#file-compute_body_forceh","title":"File compute_body_force.h","text":"<p>FileList &gt; affine_body &gt; compute_body_force.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/compute__body__force_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry namespace affine_body <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/affine_body/compute_body_force.h</code></p>"},{"location":"Libuipc/compute__body__force_8h_source/","title":"File compute_body_force.h","text":""},{"location":"Libuipc/compute__body__force_8h_source/#file-compute_body_forceh","title":"File compute_body_force.h","text":"<p>File List &gt; affine_body &gt; compute_body_force.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry::affine_body\n{\nUIPC_GEOMETRY_API Vector12 compute_body_force(const SimplicialComplex&amp; sc,\n                                              const Vector3&amp; body_force_density);\n}  // namespace uipc::geometry::affine_body\n</code></pre>"},{"location":"Libuipc/compute__dyadic__mass_8h/","title":"File compute_dyadic_mass.h","text":""},{"location":"Libuipc/compute__dyadic__mass_8h/#file-compute_dyadic_massh","title":"File compute_dyadic_mass.h","text":"<p>FileList &gt; affine_body &gt; compute_dyadic_mass.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/compute__dyadic__mass_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry namespace affine_body <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/affine_body/compute_dyadic_mass.h</code></p>"},{"location":"Libuipc/compute__dyadic__mass_8h_source/","title":"File compute_dyadic_mass.h","text":""},{"location":"Libuipc/compute__dyadic__mass_8h_source/#file-compute_dyadic_massh","title":"File compute_dyadic_mass.h","text":"<p>File List &gt; affine_body &gt; compute_dyadic_mass.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry::affine_body\n{\nUIPC_GEOMETRY_API void compute_dyadic_mass(const SimplicialComplex&amp; sc,\n                                           Float                    rho,\n                                           //tex: $$ \\sum \\mathbf{m} $$\n                                           Float&amp; m,\n                                           //tex: $$ \\sum \\mathbf{m} \\bar{\\mathbf{x}} $$\n                                           Vector3&amp; m_x_bar,\n                                           //tex: $$ \\sum \\mathbf{m} \\bar{\\mathbf{x}} \\cdot \\bar{\\mathbf{x}}^T$$\n                                           Matrix3x3&amp; m_x_bar_x_bar);\n}  // namespace uipc::geometry::affine_body\n</code></pre>"},{"location":"Libuipc/intersection_8h/","title":"File intersection.h","text":""},{"location":"Libuipc/intersection_8h/#file-intersectionh","title":"File intersection.h","text":"<p>FileList &gt; geometry &gt; utils &gt; intersection.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> </ul>"},{"location":"Libuipc/intersection_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/intersection.h</code></p>"},{"location":"Libuipc/intersection_8h_source/","title":"File intersection.h","text":""},{"location":"Libuipc/intersection_8h_source/#file-intersectionh","title":"File intersection.h","text":"<p>File List &gt; geometry &gt; utils &gt; intersection.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API bool tri_edge_intersect(const Vector3&amp; T0,\n                                          const Vector3&amp; T1,\n                                          const Vector3&amp; T2,\n                                          const Vector3&amp; E0,\n                                          const Vector3&amp; E1,\n                                          bool&amp;          coplanar,\n                                          Vector3&amp;       uvw_in_tri,\n                                          Vector2&amp;       uv_in_edge);\n\nUIPC_GEOMETRY_API bool is_point_in_tet(const Vector3&amp; T0,\n                                       const Vector3&amp; T1,\n                                       const Vector3&amp; T2,\n                                       const Vector3&amp; T3,\n                                       const Vector3&amp; P,\n                                       Vector4&amp; tuvw_in_tet  // the barycentric coordinates of the intersection point in the tet\n);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/is__trimesh__closed_8h/","title":"File is_trimesh_closed.h","text":""},{"location":"Libuipc/is__trimesh__closed_8h/#file-is_trimesh_closedh","title":"File is_trimesh_closed.h","text":"<p>FileList &gt; geometry &gt; utils &gt; is_trimesh_closed.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/is__trimesh__closed_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/is_trimesh_closed.h</code></p>"},{"location":"Libuipc/is__trimesh__closed_8h_source/","title":"File is_trimesh_closed.h","text":""},{"location":"Libuipc/is__trimesh__closed_8h_source/#file-is_trimesh_closedh","title":"File is_trimesh_closed.h","text":"<p>File List &gt; geometry &gt; utils &gt; is_trimesh_closed.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API bool is_trimesh_closed(const SimplicialComplex&amp; R);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/label__connected__vertices_8h/","title":"File label_connected_vertices.h","text":""},{"location":"Libuipc/label__connected__vertices_8h/#file-label_connected_verticesh","title":"File label_connected_vertices.h","text":"<p>FileList &gt; geometry &gt; utils &gt; label_connected_vertices.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/label__connected__vertices_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/label_connected_vertices.h</code></p>"},{"location":"Libuipc/label__connected__vertices_8h_source/","title":"File label_connected_vertices.h","text":""},{"location":"Libuipc/label__connected__vertices_8h_source/#file-label_connected_verticesh","title":"File label_connected_vertices.h","text":"<p>File List &gt; geometry &gt; utils &gt; label_connected_vertices.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API S&lt;AttributeSlot&lt;IndexT&gt;&gt; label_connected_vertices(SimplicialComplex&amp; complex);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/label__region_8h/","title":"File label_region.h","text":""},{"location":"Libuipc/label__region_8h/#file-label_regionh","title":"File label_region.h","text":"<p>FileList &gt; geometry &gt; utils &gt; label_region.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/label__region_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/label_region.h</code></p>"},{"location":"Libuipc/label__region_8h_source/","title":"File label_region.h","text":""},{"location":"Libuipc/label__region_8h_source/#file-label_regionh","title":"File label_region.h","text":"<p>File List &gt; geometry &gt; utils &gt; label_region.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API void label_region(SimplicialComplex&amp; complex);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/label__surface_8h/","title":"File label_surface.h","text":""},{"location":"Libuipc/label__surface_8h/#file-label_surfaceh","title":"File label_surface.h","text":"<p>FileList &gt; geometry &gt; utils &gt; label_surface.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/label__surface_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/label_surface.h</code></p>"},{"location":"Libuipc/label__surface_8h_source/","title":"File label_surface.h","text":""},{"location":"Libuipc/label__surface_8h_source/#file-label_surfaceh","title":"File label_surface.h","text":"<p>File List &gt; geometry &gt; utils &gt; label_surface.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API void label_surface(SimplicialComplex&amp; R);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/label__triangle__orient_8h/","title":"File label_triangle_orient.h","text":""},{"location":"Libuipc/label__triangle__orient_8h/#file-label_triangle_orienth","title":"File label_triangle_orient.h","text":"<p>FileList &gt; geometry &gt; utils &gt; label_triangle_orient.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/label__triangle__orient_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/label_triangle_orient.h</code></p>"},{"location":"Libuipc/label__triangle__orient_8h_source/","title":"File label_triangle_orient.h","text":""},{"location":"Libuipc/label__triangle__orient_8h_source/#file-label_triangle_orienth","title":"File label_triangle_orient.h","text":"<p>File List &gt; geometry &gt; utils &gt; label_triangle_orient.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API S&lt;AttributeSlot&lt;IndexT&gt;&gt; label_triangle_orient(SimplicialComplex&amp; sc);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/merge_8h/","title":"File merge.h","text":""},{"location":"Libuipc/merge_8h/#file-mergeh","title":"File merge.h","text":"<p>FileList &gt; geometry &gt; utils &gt; merge.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/merge_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/merge.h</code></p>"},{"location":"Libuipc/merge_8h_source/","title":"File merge.h","text":""},{"location":"Libuipc/merge_8h_source/#file-mergeh","title":"File merge.h","text":"<p>File List &gt; geometry &gt; utils &gt; merge.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex merge(span&lt;const SimplicialComplex*&gt; complexes);\n\nUIPC_GEOMETRY_API [[nodiscard]] SimplicialComplex merge(\n    std::initializer_list&lt;const SimplicialComplex*&gt;&amp;&amp; complexes);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/mesh__partition_8h/","title":"File mesh_partition.h","text":""},{"location":"Libuipc/mesh__partition_8h/#file-mesh_partitionh","title":"File mesh_partition.h","text":"<p>FileList &gt; geometry &gt; utils &gt; mesh_partition.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/mesh__partition_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/mesh_partition.h</code></p>"},{"location":"Libuipc/mesh__partition_8h_source/","title":"File mesh_partition.h","text":""},{"location":"Libuipc/mesh__partition_8h_source/#file-mesh_partitionh","title":"File mesh_partition.h","text":"<p>File List &gt; geometry &gt; utils &gt; mesh_partition.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nvoid UIPC_GEOMETRY_API mesh_partition(SimplicialComplex&amp; sc, SizeT part_max_size);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/octree_8h/","title":"File octree.h","text":""},{"location":"Libuipc/octree_8h/#file-octreeh","title":"File octree.h","text":"<p>FileList &gt; geometry &gt; utils &gt; octree.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;Eigen/Geometry&gt;</code></li> </ul>"},{"location":"Libuipc/octree_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/octree_8h/#classes","title":"Classes","text":"Type Name class Octree <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/octree.h</code></p>"},{"location":"Libuipc/octree_8h_source/","title":"File octree.h","text":""},{"location":"Libuipc/octree_8h_source/#file-octreeh","title":"File octree.h","text":"<p>File List &gt; geometry &gt; utils &gt; octree.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/span.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;Eigen/Geometry&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_GEOMETRY_API Octree\n{\n  public:\n    using AABB = Eigen::AlignedBox&lt;Float, 3&gt;;\n\n    Octree();\n    ~Octree();\n\n    void build(span&lt;const AABB&gt; aabbs);\n\n    void clear();\n\n    void query(span&lt;const AABB&gt; aabbs, std::function&lt;void(IndexT, IndexT)&gt;&amp;&amp; QF) const;\n\n    void detect(std::function&lt;void(IndexT, IndexT)&gt;&amp;&amp; QF) const;\n\n  private:\n    class Impl;\n    U&lt;Impl&gt; m_impl;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/optimal__transform_8h/","title":"File optimal_transform.h","text":""},{"location":"Libuipc/optimal__transform_8h/#file-optimal_transformh","title":"File optimal_transform.h","text":"<p>FileList &gt; geometry &gt; utils &gt; optimal_transform.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"uipc/common/dllexport.h\"</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/optimal__transform_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/optimal_transform.h</code></p>"},{"location":"Libuipc/optimal__transform_8h_source/","title":"File optimal_transform.h","text":""},{"location":"Libuipc/optimal__transform_8h_source/#file-optimal_transformh","title":"File optimal_transform.h","text":"<p>File List &gt; geometry &gt; utils &gt; optimal_transform.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include \"uipc/common/dllexport.h\"\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API Matrix4x4 optimal_transform(span&lt;const Vector3&gt; S, span&lt;const Vector3&gt; D);\n\nUIPC_GEOMETRY_API Matrix4x4 optimal_transform(const SimplicialComplex&amp; S, const SimplicialComplex&amp; D);\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/simplex__utils_8h/","title":"File simplex_utils.h","text":""},{"location":"Libuipc/simplex__utils_8h/#file-simplex_utilsh","title":"File simplex_utils.h","text":"<p>FileList &gt; geometry &gt; utils &gt; simplex_utils.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/type_define.h&gt;</code></li> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/span.h&gt;</code></li> </ul>"},{"location":"Libuipc/simplex__utils_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/simplex__utils_8h/#classes","title":"Classes","text":"Type Name class SimplexUtils <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/simplex_utils.h</code></p>"},{"location":"Libuipc/simplex__utils_8h_source/","title":"File simplex_utils.h","text":""},{"location":"Libuipc/simplex__utils_8h_source/#file-simplex_utilsh","title":"File simplex_utils.h","text":"<p>File List &gt; geometry &gt; utils &gt; simplex_utils.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/type_define.h&gt;\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/span.h&gt;\nnamespace uipc::geometry\n{\nclass UIPC_GEOMETRY_API SimplexUtils\n{\n  public:\n    static bool is_same_edge(const Vector2i&amp;, const Vector2i&amp;) noexcept;\n    static bool is_same_oriented_edge(const Vector2i&amp;, const Vector2i&amp;) noexcept;\n    static bool is_same_tri(const Vector3i&amp;, const Vector3i&amp;) noexcept;\n    static bool is_same_oriented_tri(const Vector3i&amp;, const Vector3i&amp;) noexcept;\n    static bool is_same_tet(const Vector4i&amp;, const Vector4i&amp;) noexcept;\n    static bool is_same_oriented_tet(const Vector4i&amp;, const Vector4i&amp;) noexcept;\n    static bool compare_edge(const Vector2i&amp;, const Vector2i&amp;) noexcept;\n    static bool compare_tri(const Vector3i&amp;, const Vector3i&amp;) noexcept;\n    static bool compare_tet(const Vector4i&amp;, const Vector4i&amp;) noexcept;\n\n    static void outward_tri_from_tet(span&lt;const Vector3, 4&gt; Vs, span&lt;Vector3i, 4&gt; Fs) noexcept;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/tetrahedralize_8h/","title":"File tetrahedralize.h","text":""},{"location":"Libuipc/tetrahedralize_8h/#file-tetrahedralizeh","title":"File tetrahedralize.h","text":"<p>FileList &gt; geometry &gt; utils &gt; tetrahedralize.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/tetrahedralize_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils/tetrahedralize.h</code></p>"},{"location":"Libuipc/tetrahedralize_8h_source/","title":"File tetrahedralize.h","text":""},{"location":"Libuipc/tetrahedralize_8h_source/#file-tetrahedralizeh","title":"File tetrahedralize.h","text":"<p>File List &gt; geometry &gt; utils &gt; tetrahedralize.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::geometry\n{\nUIPC_GEOMETRY_API SimplicialComplex tetrahedralize(const SimplicialComplex&amp; sc,\n                                                   const Json&amp; options = Json::object());\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/shared__attribute__context_8h/","title":"File shared_attribute_context.h","text":""},{"location":"Libuipc/shared__attribute__context_8h/#file-shared_attribute_contexth","title":"File shared_attribute_context.h","text":"<p>FileList &gt; geometry &gt; shared_attribute_context.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/attribute.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_slot.h&gt;</code></li> <li><code>#include &lt;uipc/common/unordered_map.h&gt;</code></li> </ul>"},{"location":"Libuipc/shared__attribute__context_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/shared__attribute__context_8h/#classes","title":"Classes","text":"Type Name class DeserialSharedAttributeContext class SerialSharedAttributeContext <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/shared_attribute_context.h</code></p>"},{"location":"Libuipc/shared__attribute__context_8h_source/","title":"File shared_attribute_context.h","text":""},{"location":"Libuipc/shared__attribute__context_8h_source/#file-shared_attribute_contexth","title":"File shared_attribute_context.h","text":"<p>File List &gt; geometry &gt; shared_attribute_context.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/attribute.h&gt;\n#include &lt;uipc/geometry/attribute_slot.h&gt;\n#include &lt;uipc/common/unordered_map.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API SerialSharedAttributeContext\n{\n  public:\n    SerialSharedAttributeContext() = default;\n\n    [[nodiscard]] IndexT index_of(IAttribute* attr) const;\n\n    [[nodiscard]] IAttribute* attribute_of(IndexT index) const;\n\n  private:\n    friend class GeometryAtlas;\n    friend class GeometryAtlasCommit;\n\n    unordered_map&lt;IAttribute*, IndexT&gt; m_attr_to_index;\n    vector&lt;IAttribute*&gt;                m_index_to_attr;\n    void                               clear();\n};\n\nclass UIPC_CORE_API DeserialSharedAttributeContext\n{\n  public:\n    DeserialSharedAttributeContext() = default;\n\n    [[nodiscard]] S&lt;IAttributeSlot&gt; attribute_slot_of(IndexT index) const;\n\n  private:\n    friend class GeometryAtlas;\n    friend class GeometryAtlasCommit;\n\n    vector&lt;S&lt;IAttributeSlot&gt;&gt; m_attribute_slots;\n    void                      clear();\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/simplicial__complex_8h/","title":"File simplicial_complex.h","text":""},{"location":"Libuipc/simplicial__complex_8h/#file-simplicial_complexh","title":"File simplicial_complex.h","text":"<p>FileList &gt; geometry &gt; simplicial_complex.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/abstract_simplicial_complex.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex_attributes.h&gt;</code></li> </ul>"},{"location":"Libuipc/simplicial__complex_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace geometry"},{"location":"Libuipc/simplicial__complex_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::geometry::SimplicialComplex &gt; &lt;&gt; class SimplicialComplex A simplicial complex is a collection of simplices. <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/simplicial_complex.h</code></p>"},{"location":"Libuipc/simplicial__complex_8h_source/","title":"File simplicial_complex.h","text":""},{"location":"Libuipc/simplicial__complex_8h_source/#file-simplicial_complexh","title":"File simplicial_complex.h","text":"<p>File List &gt; geometry &gt; simplicial_complex.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry.h&gt;\n#include &lt;uipc/geometry/abstract_simplicial_complex.h&gt;\n#include &lt;uipc/geometry/simplicial_complex_attributes.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_CORE_API SimplicialComplex : public Geometry\n{\n    friend struct fmt::formatter&lt;SimplicialComplex&gt;;\n\n    template &lt;typename T&gt;\n    friend class AttributeFriend;\n\n    template &lt;typename T&gt;\n    friend class GeometryFriend;\n\n  public:\n    using VertexAttributes  = SimplicialComplexAttributes&lt;false, 0&gt;;\n    using CVertexAttributes = SimplicialComplexAttributes&lt;true, 0&gt;;\n    using EdgeAttributes  = SimplicialComplexAttributes&lt;false, 1&gt;;\n    using CEdgeAttributes = SimplicialComplexAttributes&lt;true, 1&gt;;\n    using TriangleAttributes  = SimplicialComplexAttributes&lt;false, 2&gt;;\n    using CTriangleAttributes = SimplicialComplexAttributes&lt;true, 2&gt;;\n    using TetrahedronAttributes  = SimplicialComplexAttributes&lt;false, 3&gt;;\n    using CTetrahedronAttributes = SimplicialComplexAttributes&lt;true, 3&gt;;\n\n    SimplicialComplex();\n\n\n    SimplicialComplex(const SimplicialComplex&amp; o);\n    SimplicialComplex(SimplicialComplex&amp;&amp; o) = default;\n\n    SimplicialComplex&amp; operator=(const SimplicialComplex&amp; o) = delete;\n    SimplicialComplex&amp; operator=(SimplicialComplex&amp;&amp; o)      = delete;\n\n\n    [[nodiscard]] AttributeSlot&lt;Matrix4x4&gt;&amp; transforms();\n    [[nodiscard]] const AttributeSlot&lt;Matrix4x4&gt;&amp; transforms() const;\n\n    [[nodiscard]] AttributeSlot&lt;Vector3&gt;&amp; positions() noexcept;\n\n    [[nodiscard]] const AttributeSlot&lt;Vector3&gt;&amp; positions() const noexcept;\n\n    [[nodiscard]] VertexAttributes  vertices() noexcept;\n    [[nodiscard]] CVertexAttributes vertices() const noexcept;\n\n    [[nodiscard]] EdgeAttributes  edges() noexcept;\n    [[nodiscard]] CEdgeAttributes edges() const noexcept;\n\n\n    [[nodiscard]] TriangleAttributes  triangles() noexcept;\n    [[nodiscard]] CTriangleAttributes triangles() const noexcept;\n    [[nodiscard]] TetrahedronAttributes  tetrahedra() noexcept;\n    [[nodiscard]] CTetrahedronAttributes tetrahedra() const noexcept;\n\n    [[nodiscard]] IndexT dim() const noexcept;\n\n\n  protected:\n    virtual std::string_view get_type() const noexcept override;\n\n    virtual S&lt;IGeometry&gt; do_clone() const override;\n\n  private:\n    // shortcut to the attribute collections\n    S&lt;AttributeCollection&gt; m_vertex_attributes;\n    S&lt;AttributeCollection&gt; m_edge_attributes;\n    S&lt;AttributeCollection&gt; m_triangle_attributes;\n    S&lt;AttributeCollection&gt; m_tetrahedron_attributes;\n};\n}  // namespace uipc::geometry\n\n//formatter\n\nnamespace fmt\n{\ntemplate &lt;&gt;\nstruct UIPC_CORE_API formatter&lt;uipc::geometry::SimplicialComplex&gt; : formatter&lt;string_view&gt;\n{\n    appender format(const uipc::geometry::SimplicialComplex&amp; c, format_context&amp; ctx) const;\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/simplicial__complex__attributes_8h/","title":"File simplicial_complex_attributes.h","text":""},{"location":"Libuipc/simplicial__complex__attributes_8h/#file-simplicial_complex_attributesh","title":"File simplicial_complex_attributes.h","text":"<p>FileList &gt; geometry &gt; simplicial_complex_attributes.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/attribute_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_collection.h&gt;</code></li> <li><code>#include &lt;uipc/common/json.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_friend.h&gt;</code></li> </ul>"},{"location":"Libuipc/simplicial__complex__attributes_8h/#namespaces","title":"Namespaces","text":"Type Name namespace fmt namespace uipc namespace geometry"},{"location":"Libuipc/simplicial__complex__attributes_8h/#classes","title":"Classes","text":"Type Name struct formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt; &lt;IsConst, N&gt; class SimplicialComplexAttributes &lt;IsConst, N&gt; <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/simplicial_complex_attributes.h</code></p>"},{"location":"Libuipc/simplicial__complex__attributes_8h_source/","title":"File simplicial_complex_attributes.h","text":""},{"location":"Libuipc/simplicial__complex__attributes_8h_source/#file-simplicial_complex_attributesh","title":"File simplicial_complex_attributes.h","text":"<p>File List &gt; geometry &gt; simplicial_complex_attributes.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/attribute_slot.h&gt;\n#include &lt;uipc/geometry/attribute_collection.h&gt;\n#include &lt;uipc/common/json.h&gt;\n#include &lt;uipc/geometry/attribute_friend.h&gt;\nnamespace uipc::geometry\n{\ntemplate &lt;bool IsConst, IndexT N&gt;\nclass SimplicialComplexAttributes\n{\n  public:\n    friend class fmt::formatter&lt;SimplicialComplexAttributes&lt;IsConst, N&gt;&gt;;\n\n    template &lt;typename T&gt;\n    friend class AttributeFriend;\n\n    template &lt;bool OtherIsConst, IndexT OtherN&gt;\n    friend class SimplicialComplexAttributes;\n\n    static constexpr bool IsScalar = (N == 0);\n\n    using AutoAttributeCollection =\n        std::conditional_t&lt;IsConst, const AttributeCollection, AttributeCollection&gt;;\n\n    using TopoValueT = std::conditional_t&lt;IsScalar, IndexT, Vector&lt;IndexT, N + 1&gt;&gt;;\n\n    SimplicialComplexAttributes(const SimplicialComplexAttributes&amp; o) = default;\n    SimplicialComplexAttributes(SimplicialComplexAttributes&amp;&amp; o)      = default;\n    SimplicialComplexAttributes&amp; operator=(const SimplicialComplexAttributes&amp; o) = default;\n    SimplicialComplexAttributes&amp; operator=(SimplicialComplexAttributes&amp;&amp; o) = default;\n\n    template &lt;bool OtherIsConst&gt;\n    SimplicialComplexAttributes(const SimplicialComplexAttributes&lt;OtherIsConst, N&gt;&amp; o) noexcept\n        requires(!OtherIsConst)\n        : m_attributes(o.m_attributes)\n    {\n    }\n\n    [[nodiscard]] AttributeSlot&lt;TopoValueT&gt;&amp; topo()\n        requires(!IsConst &amp;&amp; N &gt; 0)\n    {\n        return *m_attributes.template find&lt;TopoValueT&gt;(\"topo\");\n    }\n\n    [[nodiscard]] const AttributeSlot&lt;TopoValueT&gt;&amp; topo() const\n        requires(N &gt; 0)\n    {\n        return *m_attributes.template find&lt;TopoValueT&gt;(\"topo\");\n    }\n\n    void resize(SizeT size)\n        requires(!IsConst)\n    {\n        m_attributes.resize(size);\n    }\n\n    void reserve(SizeT size)\n        requires(!IsConst)\n    {\n        m_attributes.reserve(size);\n    }\n    void clear()\n        requires(!IsConst)\n    {\n        m_attributes.clear();\n    }\n    [[nodiscard]] SizeT size() const noexcept { return m_attributes.size(); }\n    void destroy(std::string_view name)\n        requires(!IsConst)\n    {\n        m_attributes.destroy(name);\n    }\n\n    template &lt;typename T&gt;\n    [[nodiscard]] decltype(auto) find(std::string_view name)\n        requires(!IsConst)\n    {\n        return m_attributes.template find&lt;T&gt;(name);\n    }\n\n    template &lt;typename T&gt;\n    [[nodiscard]] decltype(auto) find(std::string_view name) const\n    {\n        return std::as_const(m_attributes).template find&lt;T&gt;(name);\n    }\n\n    template &lt;typename T&gt;\n    decltype(auto) create(std::string_view name, const T&amp; default_value = {}, bool allow_destroy = true)\n        requires(!IsConst)\n    {\n        return m_attributes.template create&lt;T&gt;(name, default_value, allow_destroy);\n    }\n\n    template &lt;typename T&gt;\n    decltype(auto) share(std::string_view name, const AttributeSlot&lt;T&gt;&amp; slot, bool allow_destroy = true)\n        requires(!IsConst)\n    {\n        return m_attributes.template share&lt;T&gt;(name, slot, allow_destroy);\n    }\n\n    void copy_from(SimplicialComplexAttributes&lt;true, N&gt; other,\n                   const AttributeCopy&amp;                 copy          = {},\n                   span&lt;const string&gt;                   include_names = {},\n                   span&lt;const string&gt;                   exclude_names = {})\n        requires(!IsConst)\n    {\n        m_attributes.copy_from(other.m_attributes, copy, include_names, exclude_names);\n    }\n\n    Json to_json() const { return m_attributes.to_json(); }\n\n  private:\n    friend class SimplicialComplex;\n    friend class AbstractSimplicialComplex;\n    AutoAttributeCollection&amp; m_attributes;\n\n    SimplicialComplexAttributes(AutoAttributeCollection&amp; attributes) noexcept\n        : m_attributes(attributes)\n    {\n    }\n};\n\nextern template class SimplicialComplexAttributes&lt;false, 0&gt;;\nextern template class SimplicialComplexAttributes&lt;true, 0&gt;;\n\nextern template class SimplicialComplexAttributes&lt;false, 1&gt;;\nextern template class SimplicialComplexAttributes&lt;true, 1&gt;;\n\nextern template class SimplicialComplexAttributes&lt;false, 2&gt;;\nextern template class SimplicialComplexAttributes&lt;true, 2&gt;;\n\nextern template class SimplicialComplexAttributes&lt;false, 3&gt;;\nextern template class SimplicialComplexAttributes&lt;true, 3&gt;;\n}  // namespace uipc::geometry\n\n\nnamespace fmt\n{\ntemplate &lt;bool IsConst, uipc::IndexT N&gt;\nstruct formatter&lt;uipc::geometry::SimplicialComplexAttributes&lt;IsConst, N&gt;&gt;\n    : formatter&lt;std::string_view&gt;\n{\n    appender format(const uipc::geometry::SimplicialComplexAttributes&lt;IsConst, N&gt;&amp; attributes,\n                    format_context&amp; ctx) const\n    {\n        return ::fmt::format_to(ctx.out(), \"{}\", attributes.m_attributes);\n    }\n};\n}  // namespace fmt\n</code></pre>"},{"location":"Libuipc/simplicial__complex__slot_8h/","title":"File simplicial_complex_slot.h","text":""},{"location":"Libuipc/simplicial__complex__slot_8h/#file-simplicial_complex_sloth","title":"File simplicial_complex_slot.h","text":"<p>FileList &gt; geometry &gt; simplicial_complex_slot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry_slot.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/simplicial__complex__slot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace std namespace uipc namespace geometry <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/simplicial_complex_slot.h</code></p>"},{"location":"Libuipc/simplicial__complex__slot_8h_source/","title":"File simplicial_complex_slot.h","text":""},{"location":"Libuipc/simplicial__complex__slot_8h_source/#file-simplicial_complex_sloth","title":"File simplicial_complex_slot.h","text":"<p>File List &gt; geometry &gt; simplicial_complex_slot.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry_slot.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\nnamespace uipc::geometry\n{\ntemplate &lt;&gt;\nclass GeometrySlotT&lt;SimplicialComplex&gt; : public GeometrySlot\n{\n  public:\n    GeometrySlotT(IndexT id, const SimplicialComplex&amp; simplicial_complex) noexcept;\n\n    GeometrySlotT(const GeometrySlotT&amp;)            = delete;\n    GeometrySlotT(GeometrySlotT&amp;&amp;)                 = delete;\n    GeometrySlotT&amp; operator=(const GeometrySlotT&amp;) = delete;\n    GeometrySlotT&amp; operator=(GeometrySlotT&amp;&amp;)      = delete;\n\n    SimplicialComplex&amp;       geometry() noexcept;\n    const SimplicialComplex&amp; geometry() const noexcept;\n\n  protected:\n    virtual Geometry&amp;       get_geometry() noexcept override;\n    virtual const Geometry&amp; get_geometry() const noexcept override;\n    virtual S&lt;GeometrySlot&gt; do_clone() const override;\n\n  private:\n    SimplicialComplex m_simplicial_complex;\n};\n\nusing SimplicialComplexSlot = GeometrySlotT&lt;SimplicialComplex&gt;;\n}  // namespace uipc::geometry\n\nnamespace std\n{\nextern template class std::shared_ptr&lt;uipc::geometry::SimplicialComplexSlot&gt;;\n}\n</code></pre>"},{"location":"Libuipc/utils_8h/","title":"File utils.h","text":""},{"location":"Libuipc/utils_8h/#file-utilsh","title":"File utils.h","text":"<p>FileList &gt; geometry &gt; utils.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/utils/factory.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/apply_transform.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/closure.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/label_surface.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/label_triangle_orient.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/flip_inward_triangles.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/extract_surface.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/merge.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/simplex_utils.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/label_connected_vertices.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/label_region.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/apply_region.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/tetrahedralize.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/compute_instance_volume.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/optimal_transform.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/utils/is_trimesh_closed.h&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/geometry/utils.h</code></p>"},{"location":"Libuipc/utils_8h_source/","title":"File utils.h","text":""},{"location":"Libuipc/utils_8h_source/#file-utilsh","title":"File utils.h","text":"<p>File List &gt; geometry &gt; utils.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/utils/factory.h&gt;\n#include &lt;uipc/geometry/utils/apply_transform.h&gt;\n#include &lt;uipc/geometry/utils/closure.h&gt;\n#include &lt;uipc/geometry/utils/label_surface.h&gt;\n#include &lt;uipc/geometry/utils/label_triangle_orient.h&gt;\n#include &lt;uipc/geometry/utils/flip_inward_triangles.h&gt;\n#include &lt;uipc/geometry/utils/extract_surface.h&gt;\n#include &lt;uipc/geometry/utils/merge.h&gt;\n#include &lt;uipc/geometry/utils/simplex_utils.h&gt;\n#include &lt;uipc/geometry/utils/label_connected_vertices.h&gt;\n#include &lt;uipc/geometry/utils/label_region.h&gt;\n#include &lt;uipc/geometry/utils/apply_region.h&gt;\n#include &lt;uipc/geometry/utils/tetrahedralize.h&gt;\n#include &lt;uipc/geometry/utils/compute_instance_volume.h&gt;\n#include &lt;uipc/geometry/utils/optimal_transform.h&gt;\n#include &lt;uipc/geometry/utils/is_trimesh_closed.h&gt;\n</code></pre>"},{"location":"Libuipc/dir_852854ea57a318f61c10cfed1155dbd7/","title":"Dir include/uipc/io","text":""},{"location":"Libuipc/dir_852854ea57a318f61c10cfed1155dbd7/#dir-includeuipcio","title":"Dir include/uipc/io","text":"<p>FileList &gt; include &gt; uipc &gt; io</p>"},{"location":"Libuipc/dir_852854ea57a318f61c10cfed1155dbd7/#files","title":"Files","text":"Type Name file attribute_io.h file gltf_io.h file scene_io.h file simplicial_complex_io.h file spread_sheet_io.h file urdf_io.h <p>The documentation for this class was generated from the following file <code>include/uipc/io/</code></p>"},{"location":"Libuipc/attribute__io_8h/","title":"File attribute_io.h","text":""},{"location":"Libuipc/attribute__io_8h/#file-attribute_ioh","title":"File attribute_io.h","text":"<p>FileList &gt; include &gt; uipc &gt; io &gt; attribute_io.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/dllexport.h&gt;</code></li> <li><code>#include &lt;uipc/common/smart_pointer.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/attribute_slot.h&gt;</code></li> </ul>"},{"location":"Libuipc/attribute__io_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/attribute__io_8h/#classes","title":"Classes","text":"Type Name class AttributeIO class AttributeIOError <p>The documentation for this class was generated from the following file <code>include/uipc/io/attribute_io.h</code></p>"},{"location":"Libuipc/attribute__io_8h_source/","title":"File attribute_io.h","text":""},{"location":"Libuipc/attribute__io_8h_source/#file-attribute_ioh","title":"File attribute_io.h","text":"<p>File List &gt; include &gt; uipc &gt; io &gt; attribute_io.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/dllexport.h&gt;\n#include &lt;uipc/common/smart_pointer.h&gt;\n#include &lt;uipc/geometry/attribute_slot.h&gt;\n\nnamespace uipc::geometry\n{\nclass UIPC_IO_API AttributeIO final\n{\n  public:\n    class Interface;\n\n    AttributeIO(std::string_view file);\n    ~AttributeIO() noexcept;\n\n    void read(std::string_view name, IAttributeSlot&amp; slot);\n\n  private:\n    U&lt;Interface&gt; m_impl;\n};\n\nclass UIPC_IO_API AttributeIOError : public Exception\n{\n  public:\n    using Exception::Exception;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/gltf__io_8h/","title":"File gltf_io.h","text":""},{"location":"Libuipc/gltf__io_8h/#file-gltf_ioh","title":"File gltf_io.h","text":"<p>FileList &gt; include &gt; uipc &gt; io &gt; gltf_io.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/io/scene_io.h&gt;</code></li> <li><code>#include &lt;tiny_gltf.h&gt;</code></li> </ul>"},{"location":"Libuipc/gltf__io_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc <p>The documentation for this class was generated from the following file <code>include/uipc/io/gltf_io.h</code></p>"},{"location":"Libuipc/gltf__io_8h_source/","title":"File gltf_io.h","text":""},{"location":"Libuipc/gltf__io_8h_source/#file-gltf_ioh","title":"File gltf_io.h","text":"<p>File List &gt; include &gt; uipc &gt; io &gt; gltf_io.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/io/scene_io.h&gt;\n#include &lt;tiny_gltf.h&gt;\n\nnamespace uipc\n{\nUIPC_IO_API int test_gltf(std::string_view path);\n}\n</code></pre>"},{"location":"Libuipc/scene__io_8h/","title":"File scene_io.h","text":""},{"location":"Libuipc/scene__io_8h/#file-scene_ioh","title":"File scene_io.h","text":"<p>FileList &gt; include &gt; uipc &gt; io &gt; scene_io.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core/scene.h&gt;</code></li> <li><code>#include &lt;uipc/common/exception.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/scene__io_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace core"},{"location":"Libuipc/scene__io_8h/#classes","title":"Classes","text":"Type Name class SceneIO class SceneIOError <p>The documentation for this class was generated from the following file <code>include/uipc/io/scene_io.h</code></p>"},{"location":"Libuipc/scene__io_8h_source/","title":"File scene_io.h","text":""},{"location":"Libuipc/scene__io_8h_source/#file-scene_ioh","title":"File scene_io.h","text":"<p>File List &gt; include &gt; uipc &gt; io &gt; scene_io.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core/scene.h&gt;\n#include &lt;uipc/common/exception.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\nnamespace uipc::core\n{\nclass UIPC_IO_API SceneIO\n{\n  public:\n    SceneIO(Scene&amp; scene);\n\n    void write_surface(std::string_view filename);\n\n    geometry::SimplicialComplex simplicial_surface(IndexT dim = -1) const;\n\n    static Scene load(std::string_view filename);\n\n    static void save(const Scene&amp; scene, std::string_view filename);\n\n    void save(std::string_view filename) const;\n\n    void commit(const SceneSnapshot&amp; reference, std::string_view filename);\n\n    void update(std::string_view filename);\n\n    Json to_json() const;\n\n    static Scene from_json(const Json&amp; json);\n\n    Json commit_to_json(const SceneSnapshot&amp; reference) const;\n\n    void update_from_json(const Json&amp; json);\n\n  private:\n    Scene&amp; m_scene;\n    void   write_surface_obj(std::string_view filename);\n};\n\nclass UIPC_IO_API SceneIOError : public Exception\n{\n  public:\n    using Exception::Exception;\n};\n}  // namespace uipc::core\n</code></pre>"},{"location":"Libuipc/simplicial__complex__io_8h/","title":"File simplicial_complex_io.h","text":""},{"location":"Libuipc/simplicial__complex__io_8h/#file-simplicial_complex_ioh","title":"File simplicial_complex_io.h","text":"<p>FileList &gt; include &gt; uipc &gt; io &gt; simplicial_complex_io.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/common/exception.h&gt;</code></li> <li><code>#include &lt;uipc/geometry/simplicial_complex.h&gt;</code></li> </ul>"},{"location":"Libuipc/simplicial__complex__io_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/simplicial__complex__io_8h/#classes","title":"Classes","text":"Type Name class GeometryIOError class SimplicialComplexIO A class for reading and writing simplicial complex. <p>The documentation for this class was generated from the following file <code>include/uipc/io/simplicial_complex_io.h</code></p>"},{"location":"Libuipc/simplicial__complex__io_8h_source/","title":"File simplicial_complex_io.h","text":""},{"location":"Libuipc/simplicial__complex__io_8h_source/#file-simplicial_complex_ioh","title":"File simplicial_complex_io.h","text":"<p>File List &gt; include &gt; uipc &gt; io &gt; simplicial_complex_io.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/common/exception.h&gt;\n#include &lt;uipc/geometry/simplicial_complex.h&gt;\n\n\nnamespace uipc::geometry\n{\nclass UIPC_IO_API SimplicialComplexIO\n{\n  public:\n    SimplicialComplexIO() = default;\n    explicit SimplicialComplexIO(const Matrix4x4&amp; pre_transform) noexcept;\n    explicit SimplicialComplexIO(const Transform&amp; pre_transform) noexcept;\n\n    // default copy/move ctor/assignment\n    SimplicialComplexIO(const SimplicialComplexIO&amp;)            = default;\n    SimplicialComplexIO(SimplicialComplexIO&amp;&amp;)                 = default;\n    SimplicialComplexIO&amp; operator=(const SimplicialComplexIO&amp;) = default;\n    SimplicialComplexIO&amp; operator=(SimplicialComplexIO&amp;&amp;)      = default;\n\n    [[nodiscard]] SimplicialComplex read(std::string_view file_name);\n\n    [[nodiscard]] SimplicialComplex read_msh(std::string_view file_name);\n\n    [[nodiscard]] SimplicialComplex read_obj(std::string_view file_name);\n\n    [[nodiscard]] SimplicialComplex read_ply(std::string_view file_name);\n\n\n    void write(std::string_view file_name, const SimplicialComplex&amp; sc);\n\n    void write_obj(std::string_view file_name, const SimplicialComplex&amp; sc);\n\n    void write_msh(std::string_view file_name, const SimplicialComplex&amp; sc);\n\n  private:\n    Matrix4x4 m_pre_transform = Matrix4x4::Identity();\n    void      apply_pre_transform(Vector3&amp; v) const noexcept;\n};\n}  // namespace uipc::geometry\n\nnamespace uipc::geometry\n{\nclass GeometryIOError : public Exception\n{\n  public:\n    using Exception::Exception;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/spread__sheet__io_8h/","title":"File spread_sheet_io.h","text":""},{"location":"Libuipc/spread__sheet__io_8h/#file-spread_sheet_ioh","title":"File spread_sheet_io.h","text":"<p>FileList &gt; include &gt; uipc &gt; io &gt; spread_sheet_io.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/geometry/geometry.h&gt;</code></li> </ul>"},{"location":"Libuipc/spread__sheet__io_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace geometry"},{"location":"Libuipc/spread__sheet__io_8h/#classes","title":"Classes","text":"Type Name class SpreadSheetIO A class for writing geometry spreadsheet. <p>The documentation for this class was generated from the following file <code>include/uipc/io/spread_sheet_io.h</code></p>"},{"location":"Libuipc/spread__sheet__io_8h_source/","title":"File spread_sheet_io.h","text":""},{"location":"Libuipc/spread__sheet__io_8h_source/#file-spread_sheet_ioh","title":"File spread_sheet_io.h","text":"<p>File List &gt; include &gt; uipc &gt; io &gt; spread_sheet_io.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/geometry/geometry.h&gt;\nnamespace uipc::geometry\n{\nclass UIPC_IO_API SpreadSheetIO\n{\n  public:\n    SpreadSheetIO(std::string_view output_folder = \"./\");\n    void write_json(std::string_view geo_name, const Geometry&amp; simplicial_complex) const;\n    void write_json(const Geometry&amp; simplicial_complex) const;\n    void write_csv(std::string_view geo_name, const Geometry&amp; simplicial_complex) const;\n    void write_csv(const Geometry&amp; simplicial_complex) const;\n\n  private:\n    string m_output_folder;\n};\n}  // namespace uipc::geometry\n</code></pre>"},{"location":"Libuipc/urdf__io_8h/","title":"File urdf_io.h","text":""},{"location":"Libuipc/urdf__io_8h/#file-urdf_ioh","title":"File urdf_io.h","text":"<p>FileList &gt; include &gt; uipc &gt; io &gt; urdf_io.h</p> <p>Go to the source code of this file</p> <p>The documentation for this class was generated from the following file <code>include/uipc/io/urdf_io.h</code></p>"},{"location":"Libuipc/urdf__io_8h_source/","title":"File urdf_io.h","text":""},{"location":"Libuipc/urdf__io_8h_source/#file-urdf_ioh","title":"File urdf_io.h","text":"<p>File List &gt; include &gt; uipc &gt; io &gt; urdf_io.h</p> <p>Go to the documentation of this file</p>"},{"location":"Libuipc/io_8h/","title":"File io.h","text":""},{"location":"Libuipc/io_8h/#file-ioh","title":"File io.h","text":"<p>FileList &gt; include &gt; uipc &gt; io.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/io/simplicial_complex_io.h&gt;</code></li> <li><code>#include &lt;uipc/io/spread_sheet_io.h&gt;</code></li> <li><code>#include &lt;uipc/io/scene_io.h&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/io.h</code></p>"},{"location":"Libuipc/io_8h_source/","title":"File io.h","text":""},{"location":"Libuipc/io_8h_source/#file-ioh","title":"File io.h","text":"<p>File List &gt; include &gt; uipc &gt; io.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/io/simplicial_complex_io.h&gt;\n#include &lt;uipc/io/spread_sheet_io.h&gt;\n#include &lt;uipc/io/scene_io.h&gt;\n</code></pre>"},{"location":"Libuipc/uipc_8h/","title":"File uipc.h","text":""},{"location":"Libuipc/uipc_8h/#file-uipch","title":"File uipc.h","text":"<p>FileList &gt; include &gt; uipc &gt; uipc.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;uipc/core.h&gt;</code></li> <li><code>#include &lt;uipc/geometry.h&gt;</code></li> <li><code>#include &lt;uipc/io.h&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>include/uipc/uipc.h</code></p>"},{"location":"Libuipc/uipc_8h_source/","title":"File uipc.h","text":""},{"location":"Libuipc/uipc_8h_source/#file-uipch","title":"File uipc.h","text":"<p>File List &gt; include &gt; uipc &gt; uipc.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;uipc/core.h&gt;\n#include &lt;uipc/geometry.h&gt;\n#include &lt;uipc/io.h&gt;\n</code></pre>"},{"location":"Libuipc/dir_e6f33594e1ca9c65efcf98646d93736b/","title":"Dir include/uipc_gui","text":""},{"location":"Libuipc/dir_e6f33594e1ca9c65efcf98646d93736b/#dir-includeuipc_gui","title":"Dir include/uipc_gui","text":"<p>FileList &gt; include &gt; uipc_gui</p>"},{"location":"Libuipc/dir_e6f33594e1ca9c65efcf98646d93736b/#directories","title":"Directories","text":"Type Name dir common <p>The documentation for this class was generated from the following file <code>include/uipc_gui/</code></p>"},{"location":"Libuipc/dir_a4796c188772d0a0fa09f1942d616969/","title":"Dir include/uipc_gui/common","text":""},{"location":"Libuipc/dir_a4796c188772d0a0fa09f1942d616969/#dir-includeuipc_guicommon","title":"Dir include/uipc_gui/common","text":"<p>FileList &gt; common</p>"},{"location":"Libuipc/dir_a4796c188772d0a0fa09f1942d616969/#files","title":"Files","text":"Type Name file platform_handle.h <p>The documentation for this class was generated from the following file <code>include/uipc_gui/common/</code></p>"},{"location":"Libuipc/platform__handle_8h/","title":"File platform_handle.h","text":""},{"location":"Libuipc/platform__handle_8h/#file-platform_handleh","title":"File platform_handle.h","text":"<p>FileList &gt; common &gt; platform_handle.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;GLFW/glfw3.h&gt;</code></li> <li><code>#include &lt;bgfx/bgfx.h&gt;</code></li> </ul>"},{"location":"Libuipc/platform__handle_8h/#namespaces","title":"Namespaces","text":"Type Name namespace uipc namespace gui <p>The documentation for this class was generated from the following file <code>include/uipc_gui/common/platform_handle.h</code></p>"},{"location":"Libuipc/platform__handle_8h_source/","title":"File platform_handle.h","text":""},{"location":"Libuipc/platform__handle_8h_source/#file-platform_handleh","title":"File platform_handle.h","text":"<p>File List &gt; common &gt; platform_handle.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;bgfx/bgfx.h&gt;\nnamespace uipc::gui\n{\nvoid* glfw_native_window_handle(GLFWwindow* window);\n\nbgfx::NativeWindowHandleType::Enum native_window_handle_type();\n\nvoid* native_display_handle();\n}\n</code></pre>"},{"location":"Libuipc/namespaces/","title":"Index","text":""},{"location":"Libuipc/namespaces/#namespace-list","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace fmt </li> <li>namespace nlohmann </li> <li>namespace std </li> <li>namespace uipc <ul> <li>namespace backend </li> <li>namespace builtin <ul> <li>namespace details </li> </ul> </li> <li>namespace constitution </li> <li>namespace core <ul> <li>namespace internal </li> </ul> </li> <li>namespace details </li> <li>namespace diff_sim </li> <li>namespace geometry <ul> <li>namespace affine_body </li> </ul> </li> <li>namespace gui </li> <li>namespace pmr </li> <li>namespace sanity_check </li> </ul> </li> </ul>"},{"location":"Libuipc/classes/","title":"Index","text":""},{"location":"Libuipc/classes/#class-index","title":"Class Index","text":""},{"location":"Libuipc/classes/#a","title":"a","text":"<ul> <li>AbstractSimplicialComplex (uipc::geometry)</li> <li>AdjointMethodFeature (uipc::diff_sim)</li> <li>AdjointMethodFeatureOverrider (uipc::diff_sim)</li> <li>adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; (nlohmann)</li> <li>AffineBodyConstitution (uipc::constitution)</li> <li>AffineBodyMaterial (uipc::constitution)</li> <li>Animation (uipc::core)</li> <li>Animator (uipc::core)</li> <li>AnimatorVisitor (uipc::backend)</li> <li>ARAP (uipc::constitution)</li> <li>Attribute (uipc::geometry)</li> <li>AttributeCollection (uipc::geometry)</li> <li>AttributeCollectionCommit (uipc::geometry)</li> <li>AttributeCollectionError (uipc::geometry)</li> <li>AttributeCollectionFactory (uipc::geometry)</li> <li>AttributeCopy (uipc::geometry)</li> <li>AttributeFactory (uipc::geometry)</li> <li>AttributeFriend (uipc::geometry)</li> <li>AttributeIO (uipc::geometry)</li> <li>AttributeIOError (uipc::geometry)</li> <li>AttributeSlot (uipc::geometry)</li> </ul>"},{"location":"Libuipc/classes/#b","title":"b","text":"<ul> <li>Buffer (uipc::backend)</li> <li>BufferInfo (uipc)</li> <li>BufferView (uipc::backend)</li> <li>BVH (uipc::geometry)</li> </ul>"},{"location":"Libuipc/classes/#c","title":"c","text":"<ul> <li>CGeometries (uipc::core::Object)</li> <li>CGeometries (uipc::core::Scene)</li> <li>CObjects (uipc::core::Scene)</li> <li>ConstitutionTabular (uipc::core)</li> <li>ConstitutionUIDAutoRegister (uipc::builtin)</li> <li>ConstitutionUIDCollection (uipc::builtin)</li> <li>Constraint (uipc::constitution)</li> <li>ContactElement (uipc::core)</li> <li>ContactModel (uipc::core)</li> <li>ContactModelCollectionT (uipc::core)</li> <li>ContactTabular (uipc::core)</li> <li>ContactTabularVisitor (uipc::backend)</li> </ul>"},{"location":"Libuipc/classes/#d","title":"d","text":"<ul> <li>DeserialSharedAttributeContext (uipc::geometry)</li> <li>DiffSim (uipc::core)</li> <li>DiffSimVisitor (uipc::backend)</li> <li>DiscreteShellBending (uipc::constitution)</li> </ul>"},{"location":"Libuipc/classes/#e","title":"e","text":"<ul> <li>ElasticModuli (uipc::constitution)</li> <li>Empty (uipc::constitution)</li> <li>EnableGradFeature (uipc::diff_sim)</li> <li>EnableGradFeatureOverrider (uipc::diff_sim)</li> <li>Engine (uipc::core)</li> <li>Engine (uipc::core::internal)</li> <li>EngineCreateInfo (uipc::backend)</li> <li>EngineException (uipc::core)</li> <li>EngineStatus (uipc::core)</li> <li>EngineStatusCollection (uipc::core)</li> <li>Exception (uipc)</li> </ul>"},{"location":"Libuipc/classes/#f","title":"f","text":"<ul> <li>Feature (uipc::core)</li> <li>FeatureCollection (uipc::core)</li> <li>FiniteElementConstitution (uipc::constitution)</li> <li>FiniteElementExtraConstitution (uipc::constitution)</li> <li>formatter&lt; uipc::core::Animation &gt; (fmt)</li> <li>formatter&lt; uipc::core::Animator &gt; (fmt)</li> <li>formatter&lt; uipc::core::Object &gt; (fmt)</li> <li>formatter&lt; uipc::core::ObjectCollection &gt; (fmt)</li> <li>formatter&lt; uipc::core::Scene &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::AttributeCollection &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::Geometry &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::ImplicitGeometry &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::SimplicialComplex &gt; (fmt)</li> <li>formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt; (fmt)</li> </ul>"},{"location":"Libuipc/classes/#g","title":"g","text":"<ul> <li>Geometries (uipc::core::Object)</li> <li>Geometries (uipc::core::Scene)</li> <li>Geometry (uipc::geometry)</li> <li>GeometryAtlas (uipc::geometry)</li> <li>GeometryAtlasCommit (uipc::geometry)</li> <li>GeometryCollection (uipc::geometry)</li> <li>GeometryCollectionCommit (uipc::geometry)</li> <li>GeometryCommit (uipc::geometry)</li> <li>GeometryFactory (uipc::geometry)</li> <li>GeometryFriend (uipc::geometry)</li> <li>GeometryIOError (uipc::geometry)</li> <li>GeometrySlot (uipc::geometry)</li> <li>GeometrySlotT (uipc::geometry)</li> <li>GeometrySlotT&lt; Geometry &gt; (uipc::geometry)</li> <li>GeometryVisitor (uipc::backend)</li> <li>GlobalTimer (uipc)</li> </ul>"},{"location":"Libuipc/classes/#h","title":"h","text":"<ul> <li>HookeanSpring (uipc::constitution)</li> </ul>"},{"location":"Libuipc/classes/#i","title":"i","text":"<ul> <li>IAttribute (uipc::geometry)</li> <li>IAttributeSlot (uipc::geometry)</li> <li>IConstitution (uipc::constitution)</li> <li>IEngine (uipc::core)</li> <li>IFeature (uipc::core)</li> <li>IGeometry (uipc::geometry)</li> <li>IGeometryCollection (uipc::geometry)</li> <li>ImplicitGeometry (uipc::geometry)</li> <li>ImplicitGeometryUIDAutoRegister (uipc::builtin)</li> <li>ImplicitGeometryUIDCollection (uipc::builtin)</li> <li>InstanceAttributesT (uipc::geometry::Geometry)</li> <li>IObject (uipc::core)</li> <li>IObjectCollection (uipc::core)</li> <li>is_matrix (uipc)</li> <li>is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; (uipc)</li> <li>ISanityChecker (uipc::core)</li> <li>ISanityCheckerCollection (uipc::core)</li> </ul>"},{"location":"Libuipc/classes/#j","title":"j","text":"<ul> <li>JsonIOError (uipc)</li> </ul>"},{"location":"Libuipc/classes/#k","title":"k","text":"<ul> <li>KirchhoffRodBending (uipc::constitution)</li> </ul>"},{"location":"Libuipc/classes/#l","title":"l","text":"<ul> <li>LinearMotor (uipc::constitution)</li> <li>LogPatternGuard (uipc)</li> </ul>"},{"location":"Libuipc/classes/#m","title":"m","text":"<ul> <li>MergeResult</li> <li>MetaAttributesT (uipc::geometry::Geometry)</li> </ul>"},{"location":"Libuipc/classes/#n","title":"n","text":"<ul> <li>NeoHookeanShell (uipc::constitution)</li> </ul>"},{"location":"Libuipc/classes/#o","title":"o","text":"<ul> <li>Object (uipc::core)</li> <li>ObjectCollection (uipc::core)</li> <li>ObjectCollectionSnapshot (uipc::core)</li> <li>ObjectGeometrySlots (uipc::core)</li> <li>ObjectGeometrySlots&lt; const geometry::Geometry &gt; (uipc::core)</li> <li>ObjectGeometrySlots&lt; geometry::Geometry &gt; (uipc::core)</li> <li>Objects (uipc::core::Scene)</li> <li>ObjectSnapshot (uipc::core)</li> <li>Octree (uipc::geometry)</li> </ul>"},{"location":"Libuipc/classes/#p","title":"p","text":"<ul> <li>ParameterCollection (uipc::diff_sim)</li> <li>Particle (uipc::constitution)</li> <li>PmrDeleter (uipc)</li> <li>propagate_const (uipc)</li> </ul>"},{"location":"Libuipc/classes/#r","title":"r","text":"<ul> <li>RotatingMotor (uipc::constitution)</li> </ul>"},{"location":"Libuipc/classes/#s","title":"s","text":"<ul> <li>SanityChecker (uipc::core)</li> <li>SanityCheckerCollectionCreateInfo (uipc::core)</li> <li>SanityCheckMessage (uipc::core)</li> <li>SanityCheckMessageCollection (uipc::core)</li> <li>SanityCheckMessageVisitor (uipc::backend)</li> <li>Scene (uipc::core)</li> <li>Scene (uipc::core::internal)</li> <li>SceneFactory (uipc::core)</li> <li>SceneIO (uipc::core)</li> <li>SceneIOError (uipc::core)</li> <li>SceneSnapshot (uipc::core)</li> <li>SceneSnapshotCommit (uipc::core)</li> <li>SceneVisitor (uipc::backend)</li> <li>ScopedTimer (uipc::details)</li> <li>SerialSharedAttributeContext (uipc::geometry)</li> <li>signature (uipc)</li> <li>signature&lt; R(&amp;)(Args...)&gt; (uipc)</li> <li>signature&lt; R(*)(Args...)&gt; (uipc)</li> <li>signature&lt; R(Args...)&gt; (uipc)</li> <li>signature&lt; R(C::*)(Args...) &amp;&amp; &gt; (uipc)</li> <li>signature&lt; R(C::*)(Args...) const &gt; (uipc)</li> <li>signature&lt; R(C::*)(Args...) const volatile &gt; (uipc)</li> <li>signature&lt; R(C::*)(Args...) volatile &gt; (uipc)</li> <li>signature&lt; R(C::*)(Args...)&gt; (uipc)</li> <li>SimplexUtils (uipc::geometry)</li> <li>SimplicialComplex (uipc::geometry)</li> <li>SimplicialComplexAttributes (uipc::geometry)</li> <li>SimplicialComplexIO (uipc::geometry)</li> <li>SoftPositionConstraint (uipc::constitution)</li> <li>SoftTransformConstraint (uipc::constitution)</li> <li>SparseCOOView (uipc::diff_sim)</li> <li>SpreadSheetIO (uipc::geometry)</li> <li>StableNeoHookean (uipc::constitution)</li> </ul>"},{"location":"Libuipc/classes/#t","title":"t","text":"<ul> <li>Timer (uipc)</li> </ul>"},{"location":"Libuipc/classes/#u","title":"u","text":"<ul> <li>UIDInfo (uipc::builtin)</li> <li>UIDRegister (uipc::builtin::details)</li> <li>UIPCModuleInitInfo</li> <li>UpdateHint (uipc::core::Animation)</li> <li>UpdateInfo (uipc::core::Animation)</li> </ul>"},{"location":"Libuipc/classes/#w","title":"w","text":"<ul> <li>World (uipc::core)</li> <li>World (uipc::core::internal)</li> <li>WorldVisitor (uipc::backend)</li> </ul>"},{"location":"Libuipc/hierarchy/","title":"Hierarchy","text":""},{"location":"Libuipc/hierarchy/#class-hierarchy","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class UIPCModuleInitInfo </li> <li>class uipc::BufferInfo </li> <li>class uipc::GlobalTimer </li> <li>class uipc::LogPatternGuard </li> <li>class uipc::Timer </li> <li>class uipc::backend::AnimatorVisitor </li> <li>class uipc::backend::Buffer </li> <li>class uipc::backend::BufferView </li> <li>class uipc::backend::ContactTabularVisitor </li> <li>class uipc::backend::DiffSimVisitor </li> <li>class uipc::backend::EngineCreateInfo </li> <li>class uipc::backend::GeometryVisitor </li> <li>class uipc::backend::SanityCheckMessageVisitor </li> <li>class uipc::backend::SceneVisitor </li> <li>class uipc::backend::WorldVisitor </li> <li>class uipc::builtin::ConstitutionUIDAutoRegister </li> <li>class uipc::builtin::details::UIDRegister <ul> <li>class uipc::builtin::ConstitutionUIDCollection </li> <li>class uipc::builtin::ImplicitGeometryUIDCollection </li> </ul> </li> <li>class uipc::builtin::ImplicitGeometryUIDAutoRegister </li> <li>class uipc::constitution::IConstitution <ul> <li>class uipc::constitution::AffineBodyConstitution </li> <li>class uipc::constitution::Constraint <ul> <li>class uipc::constitution::LinearMotor </li> <li>class uipc::constitution::RotatingMotor </li> <li>class uipc::constitution::SoftPositionConstraint </li> <li>class uipc::constitution::SoftTransformConstraint </li> </ul> </li> <li>class uipc::constitution::FiniteElementConstitution <ul> <li>class uipc::constitution::ARAP </li> <li>class uipc::constitution::Empty </li> <li>class uipc::constitution::HookeanSpring </li> <li>class uipc::constitution::NeoHookeanShell </li> <li>class uipc::constitution::Particle </li> <li>class uipc::constitution::StableNeoHookean </li> </ul> </li> <li>class uipc::constitution::FiniteElementExtraConstitution <ul> <li>class uipc::constitution::DiscreteShellBending </li> <li>class uipc::constitution::KirchhoffRodBending </li> </ul> </li> </ul> </li> <li>class uipc::constitution::AffineBodyMaterial </li> <li>class uipc::constitution::ElasticModuli </li> <li>class uipc::core::Animation </li> <li>class uipc::core::Animation::UpdateHint </li> <li>class uipc::core::Animation::UpdateInfo </li> <li>class uipc::core::Animator </li> <li>class uipc::core::ConstitutionTabular </li> <li>class uipc::core::ContactElement </li> <li>class uipc::core::ContactModel </li> <li>class uipc::core::ContactModelCollectionT </li> <li>class uipc::core::ContactTabular </li> <li>class uipc::core::DiffSim </li> <li>class uipc::core::Engine </li> <li>class uipc::core::EngineStatus </li> <li>class uipc::core::EngineStatusCollection </li> <li>class uipc::core::IFeature <ul> <li>class uipc::core::Feature <ul> <li>class uipc::diff_sim::AdjointMethodFeature </li> <li>class uipc::diff_sim::EnableGradFeature </li> </ul> </li> </ul> </li> <li>class uipc::core::FeatureCollection </li> <li>class uipc::core::IEngine </li> <li>class uipc::core::IObject <ul> <li>class uipc::core::Object </li> </ul> </li> <li>class uipc::core::IObjectCollection <ul> <li>class uipc::core::ObjectCollection </li> </ul> </li> <li>class uipc::core::ISanityChecker </li> <li>class uipc::core::ISanityCheckerCollection </li> <li>class uipc::core::Object::CGeometries </li> <li>class uipc::core::Object::Geometries </li> <li>class uipc::core::ObjectCollectionSnapshot </li> <li>class uipc::core::ObjectGeometrySlots </li> <li>class uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt; </li> <li>class uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt; </li> <li>class uipc::core::ObjectSnapshot </li> <li>class uipc::core::SanityCheckMessage </li> <li>class uipc::core::SanityCheckMessageCollection </li> <li>class uipc::core::SanityChecker </li> <li>class uipc::core::SanityCheckerCollectionCreateInfo </li> <li>class uipc::core::Scene </li> <li>class uipc::core::Scene::CGeometries </li> <li>class uipc::core::Scene::CObjects </li> <li>class uipc::core::Scene::Geometries </li> <li>class uipc::core::Scene::Objects </li> <li>class uipc::core::SceneFactory </li> <li>class uipc::core::SceneIO </li> <li>class uipc::core::SceneSnapshot </li> <li>class uipc::core::SceneSnapshotCommit </li> <li>class uipc::core::World </li> <li>class uipc::core::internal::Engine </li> <li>class uipc::details::ScopedTimer </li> <li>class uipc::diff_sim::AdjointMethodFeatureOverrider </li> <li>class uipc::diff_sim::EnableGradFeatureOverrider </li> <li>class uipc::diff_sim::ParameterCollection </li> <li>class uipc::diff_sim::SparseCOOView </li> <li>class uipc::geometry::IGeometry An abstract class for geometries. <ul> <li>class uipc::geometry::Geometry A base geometries class that contains the instance attributes and the meta attributes. <ul> <li>class uipc::geometry::AbstractSimplicialComplex Represents an abstract simplicial complex, containing vertices, edges, triangles, and tetrahedra. </li> <li>class uipc::geometry::ImplicitGeometry </li> <li>class uipc::geometry::SimplicialComplex A simplicial complex is a collection of simplices. </li> </ul> </li> </ul> </li> <li>class uipc::geometry::IAttribute An abstract class to represent a geometries attribute. <ul> <li>class uipc::geometry::Attribute Template class to represent a geometries attribute of type T. </li> </ul> </li> <li>class uipc::geometry::AttributeCollection A collection of geometries attributes. </li> <li>class uipc::geometry::AttributeCollectionCommit </li> <li>class uipc::geometry::AttributeCollectionFactory </li> <li>class uipc::geometry::AttributeCopy </li> <li>class uipc::geometry::AttributeFactory </li> <li>class uipc::geometry::AttributeFriend </li> <li>class uipc::geometry::AttributeIO </li> <li>class uipc::geometry::IAttributeSlot An abstract class to represent a geometries attribute slot in a geometries attribute collection. <ul> <li>class uipc::geometry::AttributeSlot Template class to represent a geometries attribute slot of type T in a geometries attribute collection. </li> </ul> </li> <li>class uipc::geometry::BVH </li> <li>class uipc::geometry::DeserialSharedAttributeContext </li> <li>class uipc::geometry::Geometry::InstanceAttributesT A wrapper class for the instance attributes of a geometries. </li> <li>class uipc::geometry::Geometry::MetaAttributesT A wrapper class for the meta attributes of a geometries. </li> <li>class uipc::geometry::GeometryAtlas </li> <li>class uipc::geometry::GeometryAtlasCommit </li> <li>class uipc::geometry::IGeometryCollection <ul> <li>class uipc::geometry::GeometryCollection </li> </ul> </li> <li>class uipc::geometry::GeometryCollectionCommit </li> <li>class uipc::geometry::GeometryCommit </li> <li>class uipc::geometry::GeometryFactory </li> <li>class uipc::geometry::GeometryFriend </li> <li>class uipc::geometry::GeometrySlot <ul> <li>class uipc::geometry::GeometrySlotT&lt; Geometry &gt; </li> <li>none uipc::geometry::GeometrySlotT&lt; ImplicitGeometry &gt; </li> <li>none uipc::geometry::GeometrySlotT&lt; SimplicialComplex &gt; </li> </ul> </li> <li>class uipc::geometry::GeometrySlotT </li> <li>class uipc::geometry::Octree </li> <li>class uipc::geometry::SerialSharedAttributeContext </li> <li>class uipc::geometry::SimplexUtils </li> <li>class uipc::geometry::SimplicialComplexAttributes </li> <li>class uipc::geometry::SimplicialComplexIO A class for reading and writing simplicial complex. </li> <li>class uipc::geometry::SpreadSheetIO A class for writing geometry spreadsheet. </li> <li>struct nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; </li> <li>struct uipc::PmrDeleter </li> <li>struct uipc::builtin::UIDInfo </li> <li>struct uipc::propagate_const </li> <li>struct uipc::signature </li> <li>struct uipc::signature&lt; R(Args...)&gt; <ul> <li>struct uipc::signature&lt; R(&amp;)(Args...)&gt; </li> <li>struct uipc::signature&lt; R(*)(Args...)&gt; </li> <li>struct uipc::signature&lt; R(C::*)(Args...) &amp;&amp; &gt; </li> <li>struct uipc::signature&lt; R(C::*)(Args...) const &gt; </li> <li>struct uipc::signature&lt; R(C::*)(Args...) const volatile &gt; </li> <li>struct uipc::signature&lt; R(C::*)(Args...) volatile &gt; </li> <li>struct uipc::signature&lt; R(C::*)(Args...)&gt; </li> </ul> </li> <li>struct uipc::GlobalTimer::MergeResult </li> <li>class std::exception <ul> <li>class uipc::Exception <ul> <li>class uipc::JsonIOError </li> <li>class uipc::core::EngineException </li> <li>class uipc::core::SceneIOError </li> <li>class uipc::geometry::AttributeCollectionError </li> <li>class uipc::geometry::AttributeIOError </li> <li>class uipc::geometry::GeometryIOError </li> </ul> </li> <li>class uipc::Exception <ul> <li>class uipc::JsonIOError </li> <li>class uipc::core::EngineException </li> <li>class uipc::core::SceneIOError </li> <li>class uipc::geometry::AttributeCollectionError </li> <li>class uipc::geometry::AttributeIOError </li> <li>class uipc::geometry::GeometryIOError </li> </ul> </li> <li>class uipc::Exception <ul> <li>class uipc::JsonIOError </li> <li>class uipc::core::EngineException </li> <li>class uipc::core::SceneIOError </li> <li>class uipc::geometry::AttributeCollectionError </li> <li>class uipc::geometry::AttributeIOError </li> <li>class uipc::geometry::GeometryIOError </li> </ul> </li> <li>class uipc::Exception <ul> <li>class uipc::JsonIOError </li> <li>class uipc::core::EngineException </li> <li>class uipc::core::SceneIOError </li> <li>class uipc::geometry::AttributeCollectionError </li> <li>class uipc::geometry::AttributeIOError </li> <li>class uipc::geometry::GeometryIOError </li> </ul> </li> <li>class uipc::Exception <ul> <li>class uipc::JsonIOError </li> <li>class uipc::core::EngineException </li> <li>class uipc::core::SceneIOError </li> <li>class uipc::geometry::AttributeCollectionError </li> <li>class uipc::geometry::AttributeIOError </li> <li>class uipc::geometry::GeometryIOError </li> </ul> </li> <li>class uipc::Exception <ul> <li>class uipc::JsonIOError </li> <li>class uipc::core::EngineException </li> <li>class uipc::core::SceneIOError </li> <li>class uipc::geometry::AttributeCollectionError </li> <li>class uipc::geometry::AttributeIOError </li> <li>class uipc::geometry::GeometryIOError </li> </ul> </li> <li>class uipc::Exception <ul> <li>class uipc::JsonIOError </li> <li>class uipc::core::EngineException </li> <li>class uipc::core::SceneIOError </li> <li>class uipc::geometry::AttributeCollectionError </li> <li>class uipc::geometry::AttributeIOError </li> <li>class uipc::geometry::GeometryIOError </li> </ul> </li> </ul> </li> <li>class std::enable_shared_from_this&lt; Scene &gt; <ul> <li>class uipc::core::internal::Scene </li> </ul> </li> <li>class std::enable_shared_from_this&lt; World &gt; <ul> <li>class uipc::core::internal::World </li> </ul> </li> <li>class std::false_type <ul> <li>class uipc::is_matrix </li> <li>class uipc::is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; </li> </ul> </li> <li>class std::true_type <ul> <li>class uipc::is_matrix&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt; </li> </ul> </li> <li>class formatter&lt; string_view &gt; <ul> <li>struct fmt::formatter&lt; uipc::core::Animation &gt; </li> <li>struct fmt::formatter&lt; uipc::core::Animator &gt; </li> <li>struct fmt::formatter&lt; uipc::core::Object &gt; </li> <li>struct fmt::formatter&lt; uipc::core::ObjectCollection &gt; </li> <li>struct fmt::formatter&lt; uipc::core::Scene &gt; </li> <li>struct fmt::formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt; </li> <li>struct fmt::formatter&lt; uipc::geometry::Geometry &gt; </li> <li>struct fmt::formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt; </li> <li>struct fmt::formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt; </li> <li>struct fmt::formatter&lt; uipc::geometry::SimplicialComplex &gt; </li> </ul> </li> <li>class formatter&lt; std::string_view &gt; <ul> <li>struct fmt::formatter&lt; uipc::geometry::AttributeCollection &gt; </li> <li>struct fmt::formatter&lt; uipc::geometry::ImplicitGeometry &gt; </li> <li>struct fmt::formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt; </li> </ul> </li> </ul>"},{"location":"Libuipc/modules/","title":"Modules","text":""},{"location":"Libuipc/modules/#modules","title":"Modules","text":"<p>No modules found.</p>"},{"location":"Libuipc/pages/","title":"Related Pages","text":""},{"location":"Libuipc/pages/#related-pages","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"Libuipc/class_members/","title":"Members","text":""},{"location":"Libuipc/class_members/#class-members","title":"Class Members","text":""},{"location":"Libuipc/class_members/#a","title":"a","text":"<ul> <li>Allocator (uipc::PmrDeleter)</li> <li>AnimatorVisitor (uipc::backend::AnimatorVisitor)</li> <li>animator (uipc::backend::WorldVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>author (uipc::builtin::UIDInfo)</li> <li>ARAP (uipc::constitution::ARAP)</li> <li>apply_to (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::AffineBodyMaterial, uipc::constitution::Constraint, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::FiniteElementConstitution, uipc::constitution::FiniteElementExtraConstitution, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean, uipc::core::ContactElement)</li> <li>AffineBodyConstitution (uipc::constitution::AffineBodyConstitution)</li> <li>AffineBodyMaterial (uipc::constitution::AffineBodyMaterial)</li> <li>animate (uipc::constitution::LinearMotor, uipc::constitution::RotatingMotor)</li> <li>ActionOnUpdate (uipc::core::Animation)</li> <li>Animation (uipc::core::Animation)</li> <li>Animator (uipc::core::Animator)</li> <li>AutoAttributeCollection (uipc::core::ContactModelCollectionT, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::SimplicialComplexAttributes)</li> <li>at (uipc::core::ContactTabular)</li> <li>advance (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>AutoGeometrySlot (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;)</li> <li>AdjointMethodFeature (uipc::diff_sim::AdjointMethodFeature)</li> <li>as_eigen (uipc::diff_sim::ParameterCollection)</li> <li>AbstractSimplicialComplex (uipc::geometry::AbstractSimplicialComplex)</li> <li>Attribute (uipc::geometry::Attribute)</li> <li>AttributeCollection (uipc::geometry::AttributeCollection)</li> <li>attribute_count (uipc::geometry::AttributeCollection)</li> <li>AttributeCollectionCommit (uipc::geometry::AttributeCollectionCommit)</li> <li>attribute_collection (uipc::geometry::AttributeCollectionCommit)</li> <li>AttributeCollectionFactory (uipc::geometry::AttributeCollectionFactory)</li> <li>AttributeCopy (uipc::geometry::AttributeCopy)</li> <li>AttributeFactory (uipc::geometry::AttributeFactory)</li> <li>AttributeIO (uipc::geometry::AttributeIO)</li> <li>AttributeSlot (uipc::geometry::AttributeSlot)</li> <li>AABB (uipc::geometry::BVH, uipc::geometry::Octree)</li> <li>attribute_slot_of (uipc::geometry::DeserialSharedAttributeContext)</li> <li>as (uipc::geometry::Geometry)</li> <li>attribute_collection_count (uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit)</li> <li>attribute_collection_names (uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit)</li> <li>attribute_collections (uipc::geometry::GeometryCommit)</li> <li>allow_destroy (uipc::geometry::IAttributeSlot)</li> <li>attribute (uipc::geometry::IAttributeSlot)</li> <li>attribute_of (uipc::geometry::SerialSharedAttributeContext)</li> <li>apply_pre_transform (uipc::geometry::SimplicialComplexIO)</li> </ul>"},{"location":"Libuipc/class_members/#b","title":"b","text":"<ul> <li>Buffer (uipc::backend::Buffer)</li> <li>BufferView (uipc::backend::BufferView)</li> <li>backend (uipc::backend::BufferView)</li> <li>begin_pending (uipc::backend::SceneVisitor, uipc::core::internal::Scene)</li> <li>Base (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::FiniteElementConstitution, uipc::constitution::FiniteElementExtraConstitution, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean)</li> <li>build_from (uipc::core::ContactTabular, uipc::core::Object, uipc::core::ObjectCollection, uipc::geometry::GeometryCollection)</li> <li>backend_name (uipc::core::Engine, uipc::core::internal::Engine)</li> <li>backward (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>build (uipc::core::ISanityChecker, uipc::core::ISanityCheckerCollection, uipc::diff_sim::ParameterCollection, uipc::geometry::BVH, uipc::geometry::Octree)</li> <li>broadcast (uipc::diff_sim::ParameterCollection)</li> <li>BVH (uipc::geometry::BVH)</li> <li>build_from_attribute_collections (uipc::geometry::IGeometry)</li> </ul>"},{"location":"Libuipc/class_members/#c","title":"c","text":"<ul> <li>clear (uipc::GlobalTimer, uipc::core::EngineStatusCollection, uipc::core::SanityChecker, uipc::geometry::AttributeCollection, uipc::geometry::BVH, uipc::geometry::DeserialSharedAttributeContext, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection, uipc::geometry::Octree, uipc::geometry::SerialSharedAttributeContext, uipc::geometry::SimplicialComplexAttributes)</li> <li>current (uipc::GlobalTimer)</li> <li>ContactTabularVisitor (uipc::backend::ContactTabularVisitor)</li> <li>contact_models (uipc::backend::ContactTabularVisitor, uipc::core::ContactTabular, uipc::core::SceneSnapshotCommit)</li> <li>config (uipc::backend::EngineCreateInfo, uipc::core::ContactModel, uipc::core::Scene, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>collect_attribute_collections (uipc::backend::GeometryVisitor, uipc::geometry::IGeometry)</li> <li>constitution_tabular (uipc::backend::SceneVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>contact_tabular (uipc::backend::SceneVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>ConstitutionUIDAutoRegister (uipc::builtin::ConstitutionUIDAutoRegister)</li> <li>Creator (uipc::builtin::ConstitutionUIDAutoRegister, uipc::builtin::ImplicitGeometryUIDAutoRegister)</li> <li>creators (uipc::builtin::ConstitutionUIDAutoRegister, uipc::builtin::ImplicitGeometryUIDAutoRegister)</li> <li>ConstitutionUIDCollection (uipc::builtin::ConstitutionUIDCollection)</li> <li>create (uipc::builtin::details::UIDRegister, uipc::core::ContactModelCollectionT, uipc::core::ContactTabular, uipc::core::Object::Geometries, uipc::core::Scene::Objects, uipc::geometry::AttributeCollection, uipc::geometry::Geometry, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::SimplicialComplexAttributes)</li> <li>create_material (uipc::constitution::AffineBodyConstitution)</li> <li>Constraint (uipc::constitution::Constraint)</li> <li>ConstitutionTabular (uipc::core::ConstitutionTabular)</li> <li>ContactElement (uipc::core::ContactElement)</li> <li>ContactModel (uipc::core::ContactModel)</li> <li>ContactModelCollectionT (uipc::core::ContactModelCollectionT)</li> <li>ContactTabular (uipc::core::ContactTabular)</li> <li>contact_elements (uipc::core::ContactTabular, uipc::core::SceneSnapshotCommit)</li> <li>check (uipc::core::ISanityChecker, uipc::core::ISanityCheckerCollection, uipc::core::SanityChecker)</li> <li>CGeometries (uipc::core::Object::CGeometries, uipc::core::Scene::CGeometries)</li> <li>CObjects (uipc::core::Scene::CObjects)</li> <li>created_count (uipc::core::Scene::CObjects, uipc::core::Scene::Objects)</li> <li>commit_from_json (uipc::core::SceneFactory, uipc::geometry::AttributeCollectionFactory, uipc::geometry::GeometryFactory)</li> <li>commit_to_json (uipc::core::SceneFactory, uipc::core::SceneIO, uipc::geometry::AttributeCollectionFactory, uipc::geometry::GeometryFactory)</li> <li>commit (uipc::core::SceneIO)</li> <li>children (uipc::details::ScopedTimer, uipc::GlobalTimer::MergeResult)</li> <li>compute_dLdP (uipc::diff_sim::AdjointMethodFeature)</li> <li>connect (uipc::diff_sim::ParameterCollection)</li> <li>col_indices (uipc::diff_sim::SparseCOOView)</li> <li>CEdgeAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>CTetrahedronAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>CTriangleAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>CVertexAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>copy_from (uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::IAttribute, uipc::geometry::SimplicialComplexAttributes)</li> <li>CopyType (uipc::geometry::AttributeCopy)</li> <li>copy (uipc::geometry::AttributeCopy)</li> <li>CInstanceAttributes (uipc::geometry::Geometry)</li> <li>CMetaAttributes (uipc::geometry::Geometry)</li> <li>create_slot (uipc::geometry::GeometryFactory)</li> <li>clone (uipc::geometry::GeometrySlot, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometry)</li> <li>clone_empty (uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot)</li> <li>compare_edge (uipc::geometry::SimplexUtils)</li> <li>compare_tet (uipc::geometry::SimplexUtils)</li> <li>compare_tri (uipc::geometry::SimplexUtils)</li> <li>count (uipc::GlobalTimer::MergeResult)</li> </ul>"},{"location":"Libuipc/class_members/#d","title":"d","text":"<ul> <li>data (uipc::BufferInfo)</li> <li>default_instance (uipc::GlobalTimer)</li> <li>disable_all (uipc::Timer)</li> <li>DiffSimVisitor (uipc::backend::DiffSimVisitor)</li> <li>diff_sim (uipc::backend::SceneVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>description (uipc::builtin::UIDInfo)</li> <li>default_config (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean, uipc::core::ContactTabular, uipc::core::Engine, uipc::core::Scene, uipc::core::internal::Engine)</li> <li>DiscreteShellBending (uipc::constitution::DiscreteShellBending)</li> <li>dt (uipc::core::Animation::UpdateInfo, uipc::core::internal::Scene)</li> <li>default_element (uipc::core::ContactTabular)</li> <li>default_model (uipc::core::ContactTabular)</li> <li>DiffSim (uipc::core::DiffSim)</li> <li>do_advance (uipc::core::IEngine)</li> <li>do_backward (uipc::core::IEngine)</li> <li>do_dump (uipc::core::IEngine)</li> <li>do_init (uipc::core::IEngine)</li> <li>do_recover (uipc::core::IEngine)</li> <li>do_retrieve (uipc::core::IEngine)</li> <li>do_sync (uipc::core::IEngine)</li> <li>do_to_json (uipc::core::IEngine, uipc::geometry::AbstractSimplicialComplex, uipc::geometry::Attribute, uipc::geometry::Geometry, uipc::geometry::IAttribute, uipc::geometry::IGeometry)</li> <li>dump (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>do_check (uipc::core::ISanityChecker)</li> <li>destroy (uipc::core::ObjectCollection, uipc::core::Scene::Objects, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>Duration (uipc::details::ScopedTimer)</li> <li>depth (uipc::details::ScopedTimer, uipc::GlobalTimer::MergeResult)</li> <li>duration (uipc::details::ScopedTimer, uipc::GlobalTimer::MergeResult)</li> <li>do_compute_dLdP (uipc::diff_sim::AdjointMethodFeatureOverrider)</li> <li>do_receive_dofs (uipc::diff_sim::AdjointMethodFeatureOverrider)</li> <li>do_select_dofs (uipc::diff_sim::AdjointMethodFeatureOverrider)</li> <li>do_no_grad (uipc::diff_sim::EnableGradFeatureOverrider)</li> <li>do_with_grad (uipc::diff_sim::EnableGradFeatureOverrider)</li> <li>dim (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>do_clear (uipc::geometry::Attribute, uipc::geometry::GeometryCollection, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection)</li> <li>do_clone (uipc::geometry::Attribute, uipc::geometry::AttributeSlot, uipc::geometry::Geometry, uipc::geometry::GeometrySlot, uipc::geometry::GeometrySlotT&lt; Geometry &gt;, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometry, uipc::geometry::ImplicitGeometry, uipc::geometry::SimplicialComplex)</li> <li>do_clone_empty (uipc::geometry::Attribute, uipc::geometry::AttributeSlot, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot)</li> <li>do_copy_from (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>do_from_json (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>do_reorder (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>do_reserve (uipc::geometry::Attribute, uipc::geometry::GeometryCollection, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection)</li> <li>do_resize (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>diff (uipc::geometry::AttributeCollectionFactory)</li> <li>do_make_owned (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>do_share_from (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>DeserialSharedAttributeContext (uipc::geometry::DeserialSharedAttributeContext)</li> <li>do_build_from_attribute_collections (uipc::geometry::Geometry, uipc::geometry::IGeometry)</li> <li>do_collect_attribute_collections (uipc::geometry::Geometry, uipc::geometry::IGeometry)</li> <li>do_update_from (uipc::geometry::Geometry, uipc::geometry::IGeometry)</li> <li>detect (uipc::geometry::Octree)</li> <li>DstT_ (uipc::propagate_const)</li> </ul>"},{"location":"Libuipc/class_members/#e","title":"e","text":"<ul> <li>Exception (uipc::Exception, uipc::JsonIOError, uipc::core::EngineException, uipc::core::SceneIOError, uipc::geometry::AttributeCollectionError, uipc::geometry::AttributeIOError, uipc::geometry::GeometryIOError)</li> <li>elapsed (uipc::Timer, uipc::details::ScopedTimer)</li> <li>enable_all (uipc::Timer)</li> <li>element_size (uipc::backend::BufferView)</li> <li>element_stride (uipc::backend::BufferView)</li> <li>email (uipc::builtin::UIDInfo)</li> <li>extras (uipc::builtin::UIDInfo)</li> <li>exists (uipc::builtin::details::UIDRegister)</li> <li>ElasticModuli (uipc::constitution::ElasticModuli)</li> <li>Empty (uipc::constitution::Empty)</li> <li>erase (uipc::core::Animator)</li> <li>element_count (uipc::core::ContactTabular)</li> <li>Engine (uipc::core::Engine, uipc::core::internal::Engine)</li> <li>EngineStatus (uipc::core::EngineStatus)</li> <li>error (uipc::core::EngineStatus)</li> <li>EngineStatusCollection (uipc::core::EngineStatusCollection)</li> <li>emplace (uipc::core::ObjectCollection, uipc::geometry::GeometryCollection)</li> <li>errors (uipc::core::SanityChecker)</li> <li>end (uipc::details::ScopedTimer)</li> <li>EnableGradFeature (uipc::diff_sim::EnableGradFeature)</li> <li>EdgeAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>edges (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> </ul>"},{"location":"Libuipc/class_members/#f","title":"f","text":"<ul> <li>format (fmt::formatter&lt; uipc::core::Animation &gt;, fmt::formatter&lt; uipc::core::Animator &gt;, fmt::formatter&lt; uipc::core::Object &gt;, fmt::formatter&lt; uipc::core::ObjectCollection &gt;, fmt::formatter&lt; uipc::core::Scene &gt;, fmt::formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt;, fmt::formatter&lt; uipc::geometry::AttributeCollection &gt;, fmt::formatter&lt; uipc::geometry::Geometry &gt;, fmt::formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt;, fmt::formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt;, fmt::formatter&lt; uipc::geometry::ImplicitGeometry &gt;, fmt::formatter&lt; uipc::geometry::SimplicialComplex &gt;, fmt::formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt;)</li> <li>from_json (nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;, uipc::core::SceneFactory, uipc::core::SceneIO, uipc::geometry::AttributeCollectionFactory, uipc::geometry::AttributeFactory, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryFactory, uipc::geometry::IAttribute)</li> <li>find_geometry (uipc::backend::SceneVisitor)</li> <li>find_rest_geometry (uipc::backend::SceneVisitor)</li> <li>find (uipc::builtin::details::UIDRegister, uipc::core::ContactModelCollectionT, uipc::core::FeatureCollection, uipc::core::ObjectCollection, uipc::core::Scene::CGeometries, uipc::core::Scene::CObjects, uipc::core::Scene::Geometries, uipc::core::Scene::Objects, uipc::geometry::AttributeCollection, uipc::geometry::Geometry, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>fixed_vertices_changing (uipc::core::Animation::UpdateHint)</li> <li>frame (uipc::core::Animation::UpdateInfo, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>friction_rate (uipc::core::ContactModel)</li> <li>features (uipc::core::Engine, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>from_snapshot (uipc::core::SceneFactory)</li> <li>full_name (uipc::details::ScopedTimer)</li> <li>FeatureName (uipc::diff_sim::AdjointMethodFeature, uipc::diff_sim::EnableGradFeature)</li> <li>flush (uipc::geometry::GeometryCollection)</li> </ul>"},{"location":"Libuipc/class_members/#g","title":"g","text":"<ul> <li>GlobalTimer (uipc::GlobalTimer)</li> <li>GeometryVisitor (uipc::backend::GeometryVisitor)</li> <li>geometries (uipc::backend::SanityCheckMessageVisitor, uipc::backend::SceneVisitor, uipc::core::Object, uipc::core::SanityCheckMessage, uipc::core::Scene, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>get_uid (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::Constraint, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::FiniteElementExtraConstitution, uipc::constitution::HookeanSpring, uipc::constitution::IConstitution, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean)</li> <li>geo_slots (uipc::core::Animation::UpdateInfo)</li> <li>get_type_name (uipc::core::Feature, uipc::core::IFeature, uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>get_features (uipc::core::IEngine)</li> <li>get_frame (uipc::core::IEngine)</li> <li>get_status (uipc::core::IEngine)</li> <li>get_name (uipc::core::IFeature, uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::Object, uipc::diff_sim::AdjointMethodFeature, uipc::diff_sim::EnableGradFeature, uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_id (uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::Object)</li> <li>geometry_collection (uipc::core::Object)</li> <li>Geometries (uipc::core::Object::Geometries, uipc::core::Scene::Geometries)</li> <li>geometry (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;, uipc::geometry::GeometrySlot)</li> <li>get_is_grad_enabled (uipc::diff_sim::EnableGradFeatureOverrider)</li> <li>get_type (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::Geometry, uipc::geometry::IGeometry, uipc::geometry::ImplicitGeometry, uipc::geometry::SimplicialComplex)</li> <li>get_size (uipc::geometry::Attribute, uipc::geometry::GeometryCollection, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection)</li> <li>get_allow_destroy (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_attribute (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_is_evolving (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_last_modified (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_use_count (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>Geometry (uipc::geometry::Geometry)</li> <li>GeometryAtlas (uipc::geometry::GeometryAtlas)</li> <li>geometry_count (uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit)</li> <li>GeometryAtlasCommit (uipc::geometry::GeometryAtlasCommit)</li> <li>GeometryCollection (uipc::geometry::GeometryCollection)</li> <li>geometry_slots (uipc::geometry::GeometryCollection)</li> <li>get_next_id (uipc::geometry::GeometryCollection, uipc::geometry::IGeometryCollection)</li> <li>GeometryCollectionCommit (uipc::geometry::GeometryCollectionCommit)</li> <li>GeometryCommit (uipc::geometry::GeometryCommit)</li> <li>GeometryFactory (uipc::geometry::GeometryFactory)</li> <li>GeometrySlot (uipc::geometry::GeometrySlot)</li> <li>get_geometry (uipc::geometry::GeometrySlot, uipc::geometry::GeometrySlotT&lt; Geometry &gt;)</li> <li>GeometrySlotT (uipc::geometry::GeometrySlotT&lt; Geometry &gt;)</li> </ul>"},{"location":"Libuipc/class_members/#h","title":"h","text":"<ul> <li>handle (uipc::backend::BufferView)</li> <li>HookeanSpring (uipc::constitution::HookeanSpring)</li> <li>hint (uipc::core::Animation::UpdateInfo)</li> <li>has_error (uipc::core::EngineStatusCollection)</li> </ul>"},{"location":"Libuipc/class_members/#i","title":"i","text":"<ul> <li>itemsize (uipc::BufferInfo)</li> <li>init (uipc::backend::AnimatorVisitor, uipc::core::Animation, uipc::core::ConstitutionTabular, uipc::core::DiffSim, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::Scene, uipc::core::internal::World)</li> <li>INVALID (uipc::backend::BufferView)</li> <li>id (uipc::backend::SanityCheckMessageVisitor, uipc::core::ContactElement, uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::geometry::GeometrySlot)</li> <li>info (uipc::backend::SceneVisitor, uipc::core::EngineStatus, uipc::core::Scene)</li> <li>is_pending (uipc::backend::SceneVisitor, uipc::core::internal::Scene)</li> <li>instance (uipc::builtin::ConstitutionUIDCollection, uipc::builtin::ImplicitGeometryUIDCollection)</li> <li>ImplicitGeometryUIDAutoRegister (uipc::builtin::ImplicitGeometryUIDAutoRegister)</li> <li>ImplicitGeometryUIDCollection (uipc::builtin::ImplicitGeometryUIDCollection)</li> <li>is_official_builtin_uid (uipc::builtin::UIDInfo)</li> <li>is_user_defined_uid (uipc::builtin::UIDInfo)</li> <li>insert (uipc::core::Animator, uipc::core::ConstitutionTabular, uipc::core::ContactTabular, uipc::core::FeatureCollection)</li> <li>is_enabled (uipc::core::ContactModel)</li> <li>internal_contact_models (uipc::core::ContactTabular)</li> <li>ids (uipc::core::Object::CGeometries, uipc::core::Object::Geometries)</li> <li>is_empty (uipc::core::SanityCheckMessage)</li> <li>infos (uipc::core::SanityChecker)</li> <li>is_valid (uipc::core::SceneSnapshotCommit, uipc::core::World, uipc::core::internal::World, uipc::geometry::GeometryCommit)</li> <li>is_started (uipc::core::internal::Scene)</li> <li>is_grad_enabled (uipc::diff_sim::EnableGradFeature)</li> <li>InstanceAttributes (uipc::geometry::Geometry)</li> <li>instances (uipc::geometry::Geometry)</li> <li>InstanceAttributesT (uipc::geometry::Geometry::InstanceAttributesT)</li> <li>is_modification (uipc::geometry::GeometryCommit)</li> <li>is_new (uipc::geometry::GeometryCommit)</li> <li>IAttribute (uipc::geometry::IAttribute)</li> <li>IAttributeSlot (uipc::geometry::IAttributeSlot)</li> <li>is_evolving (uipc::geometry::IAttributeSlot)</li> <li>is_shared (uipc::geometry::IAttributeSlot)</li> <li>ImplicitGeometry (uipc::geometry::ImplicitGeometry)</li> <li>index_of (uipc::geometry::SerialSharedAttributeContext)</li> <li>is_same_edge (uipc::geometry::SimplexUtils)</li> <li>is_same_oriented_edge (uipc::geometry::SimplexUtils)</li> <li>is_same_oriented_tet (uipc::geometry::SimplexUtils)</li> <li>is_same_oriented_tri (uipc::geometry::SimplexUtils)</li> <li>is_same_tet (uipc::geometry::SimplexUtils)</li> <li>is_same_tri (uipc::geometry::SimplexUtils)</li> <li>IsScalar (uipc::geometry::SimplicialComplexAttributes)</li> </ul>"},{"location":"Libuipc/class_members/#k","title":"k","text":"<ul> <li>KirchhoffRodBending (uipc::constitution::KirchhoffRodBending)</li> </ul>"},{"location":"Libuipc/class_members/#l","title":"l","text":"<ul> <li>LogPatternGuard (uipc::LogPatternGuard)</li> <li>lambda (uipc::constitution::ElasticModuli)</li> <li>lame (uipc::constitution::ElasticModuli)</li> <li>LinearMotor (uipc::constitution::LinearMotor)</li> <li>load (uipc::core::SceneIO)</li> <li>last_calling_frame (uipc::diff_sim::AdjointMethodFeature)</li> <li>last_modified (uipc::geometry::IAttributeSlot)</li> </ul>"},{"location":"Libuipc/class_members/#m","title":"m","text":"<ul> <li>memory_resource (UIPCModuleInitInfo)</li> <li>module_name (UIPCModuleInitInfo)</li> <li>m_msg (uipc::Exception, uipc::backend::SanityCheckMessageVisitor, uipc::core::EngineStatus)</li> <li>m_current (uipc::GlobalTimer)</li> <li>m_merge_root (uipc::GlobalTimer)</li> <li>m_merge_timers (uipc::GlobalTimer)</li> <li>m_root (uipc::GlobalTimer)</li> <li>m_timer_stack (uipc::GlobalTimer)</li> <li>m_timers (uipc::GlobalTimer)</li> <li>max_depth (uipc::GlobalTimer)</li> <li>max_full_name_length (uipc::GlobalTimer)</li> <li>merge_timers (uipc::GlobalTimer)</li> <li>m_force_on (uipc::Timer)</li> <li>m_global_on (uipc::Timer)</li> <li>m_sync (uipc::Timer)</li> <li>m_timer (uipc::Timer)</li> <li>m_animator (uipc::backend::AnimatorVisitor, uipc::core::internal::Scene)</li> <li>m_get_buffer_view_func (uipc::backend::Buffer)</li> <li>m_resize_func (uipc::backend::Buffer)</li> <li>m_backend (uipc::backend::BufferView)</li> <li>m_element_size (uipc::backend::BufferView)</li> <li>m_element_stride (uipc::backend::BufferView)</li> <li>m_handle (uipc::backend::BufferView)</li> <li>m_offset (uipc::backend::BufferView)</li> <li>m_size (uipc::backend::BufferView, uipc::geometry::AttributeCollection)</li> <li>m_contact_tabular (uipc::backend::ContactTabularVisitor, uipc::core::internal::Scene)</li> <li>m_diff_sim (uipc::backend::DiffSimVisitor, uipc::core::internal::Scene)</li> <li>m_geometry (uipc::backend::GeometryVisitor, uipc::geometry::GeometrySlotT&lt; Geometry &gt;)</li> <li>message (uipc::backend::SanityCheckMessageVisitor, uipc::core::SanityCheckMessage)</li> <li>m_diff_sim_visitor (uipc::backend::SceneVisitor)</li> <li>m_ref (uipc::backend::SceneVisitor, uipc::backend::WorldVisitor)</li> <li>m_scene (uipc::backend::SceneVisitor, uipc::core::Animation, uipc::core::Animator, uipc::core::Object, uipc::core::SanityChecker, uipc::core::Scene::CGeometries, uipc::core::Scene::CObjects, uipc::core::Scene::Geometries, uipc::core::Scene::Objects, uipc::core::SceneIO, uipc::core::internal::World)</li> <li>m_world (uipc::backend::WorldVisitor, uipc::core::internal::Scene)</li> <li>m_uid_to_info (uipc::builtin::details::UIDRegister)</li> <li>m_config (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean, uipc::core::ContactModel, uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>m_constitution (uipc::constitution::AffineBodyMaterial)</li> <li>m_kappa (uipc::constitution::AffineBodyMaterial)</li> <li>m_mass_density (uipc::constitution::AffineBodyMaterial)</li> <li>m_lambda (uipc::constitution::ElasticModuli)</li> <li>m_mu (uipc::constitution::ElasticModuli)</li> <li>mu (uipc::constitution::ElasticModuli)</li> <li>m_object (uipc::core::Animation, uipc::core::Object::CGeometries, uipc::core::Object::Geometries)</li> <li>m_on_update (uipc::core::Animation)</li> <li>m_temp_geo_slots (uipc::core::Animation)</li> <li>m_temp_rest_geo_slots (uipc::core::Animation)</li> <li>m_fixed_vertices_changing (uipc::core::Animation::UpdateHint)</li> <li>m_animation (uipc::core::Animation::UpdateInfo)</li> <li>m_hint (uipc::core::Animation::UpdateInfo)</li> <li>m_animations (uipc::core::Animator)</li> <li>m_substep (uipc::core::Animator)</li> <li>m_impl (uipc::core::ConstitutionTabular, uipc::core::ContactTabular, uipc::core::DiffSim, uipc::core::EngineStatusCollection, uipc::core::SceneFactory, uipc::core::internal::Engine, uipc::diff_sim::AdjointMethodFeature, uipc::diff_sim::EnableGradFeature, uipc::diff_sim::ParameterCollection, uipc::geometry::AttributeCollectionFactory, uipc::geometry::AttributeFactory, uipc::geometry::AttributeIO, uipc::geometry::BVH, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryFactory, uipc::geometry::Octree)</li> <li>m_id (uipc::core::ContactElement, uipc::core::Object, uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::geometry::GeometrySlot)</li> <li>m_name (uipc::core::ContactElement, uipc::core::Object, uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::geometry::AttributeSlot)</li> <li>m_enabled (uipc::core::ContactModel)</li> <li>m_friction_rate (uipc::core::ContactModel)</li> <li>m_ids (uipc::core::ContactModel)</li> <li>m_resistance (uipc::core::ContactModel)</li> <li>m_attributes (uipc::core::ContactModelCollectionT, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::SimplicialComplexAttributes)</li> <li>m_internal (uipc::core::Engine, uipc::core::Scene, uipc::core::World)</li> <li>m_type (uipc::core::EngineStatus, uipc::geometry::AttributeCopy, uipc::geometry::GeometryCommit)</li> <li>m_type_name (uipc::core::Feature)</li> <li>m_features (uipc::core::FeatureCollection)</li> <li>m_geometry_ids (uipc::core::Object)</li> <li>m_next_id (uipc::core::ObjectCollection, uipc::core::ObjectCollectionSnapshot, uipc::geometry::GeometryCollection, uipc::geometry::GeometryCollectionCommit)</li> <li>m_objects (uipc::core::ObjectCollection, uipc::core::ObjectCollectionSnapshot, uipc::core::internal::Scene)</li> <li>m_geometries (uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene, uipc::geometry::GeometryCollection)</li> <li>m_message (uipc::core::SanityCheckMessage)</li> <li>m_result (uipc::core::SanityCheckMessage)</li> <li>m_messages (uipc::core::SanityCheckMessageCollection)</li> <li>messages (uipc::core::SanityCheckMessageCollection)</li> <li>m_errors (uipc::core::SanityChecker)</li> <li>m_infos (uipc::core::SanityChecker)</li> <li>m_warns (uipc::core::SanityChecker)</li> <li>m_contact_elements (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit)</li> <li>m_contact_models (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit)</li> <li>m_object_collection (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit)</li> <li>m_rest_geometries (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>m_is_valid (uipc::core::SceneSnapshotCommit, uipc::geometry::GeometryCommit)</li> <li>m_constitution_tabular (uipc::core::internal::Scene)</li> <li>m_dt (uipc::core::internal::Scene)</li> <li>m_pending (uipc::core::internal::Scene)</li> <li>m_sanity_checker (uipc::core::internal::Scene)</li> <li>m_started (uipc::core::internal::Scene)</li> <li>m_engine (uipc::core::internal::World)</li> <li>m_valid (uipc::core::internal::World)</li> <li>m_col_indices (uipc::diff_sim::SparseCOOView)</li> <li>m_row_indices (uipc::diff_sim::SparseCOOView)</li> <li>m_shape (uipc::diff_sim::SparseCOOView)</li> <li>m_values (uipc::diff_sim::SparseCOOView, uipc::geometry::Attribute)</li> <li>m_edge_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_tetrahedron_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_triangle_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_vertex_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_default_value (uipc::geometry::Attribute)</li> <li>m_attribute_collection (uipc::geometry::AttributeCollectionCommit)</li> <li>m_removed_names (uipc::geometry::AttributeCollectionCommit)</li> <li>m_count (uipc::geometry::AttributeCopy)</li> <li>m_dst_offset (uipc::geometry::AttributeCopy)</li> <li>m_mapping (uipc::geometry::AttributeCopy)</li> <li>m_pairs (uipc::geometry::AttributeCopy)</li> <li>m_src_offset (uipc::geometry::AttributeCopy)</li> <li>m_allow_destroy (uipc::geometry::AttributeSlot)</li> <li>m_attribute (uipc::geometry::AttributeSlot)</li> <li>m_is_evolving (uipc::geometry::AttributeSlot)</li> <li>m_last_modified (uipc::geometry::AttributeSlot)</li> <li>m_attribute_slots (uipc::geometry::DeserialSharedAttributeContext)</li> <li>MetaAttributes (uipc::geometry::Geometry)</li> <li>m_attribute_collections (uipc::geometry::Geometry, uipc::geometry::GeometryCommit)</li> <li>m_intances (uipc::geometry::Geometry)</li> <li>m_meta (uipc::geometry::Geometry)</li> <li>meta (uipc::geometry::Geometry)</li> <li>MetaAttributesT (uipc::geometry::Geometry::MetaAttributesT)</li> <li>m_dirty (uipc::geometry::GeometryCollection)</li> <li>m_geometry_slots (uipc::geometry::GeometryCollection)</li> <li>m_pending_create (uipc::geometry::GeometryCollection)</li> <li>m_pending_create_slots (uipc::geometry::GeometryCollection)</li> <li>m_pending_destroy (uipc::geometry::GeometryCollection)</li> <li>m_pending_destroy_ids (uipc::geometry::GeometryCollection)</li> <li>m_diff_geometries (uipc::geometry::GeometryCollectionCommit)</li> <li>m_new_geometry (uipc::geometry::GeometryCommit)</li> <li>m_state (uipc::geometry::GeometrySlot)</li> <li>make_owned (uipc::geometry::IAttributeSlot)</li> <li>m_attr_to_index (uipc::geometry::SerialSharedAttributeContext)</li> <li>m_index_to_attr (uipc::geometry::SerialSharedAttributeContext)</li> <li>m_pre_transform (uipc::geometry::SimplicialComplexIO)</li> <li>m_output_folder (uipc::geometry::SpreadSheetIO)</li> </ul>"},{"location":"Libuipc/class_members/#n","title":"n","text":"<ul> <li>name (uipc::backend::SanityCheckMessageVisitor, uipc::builtin::UIDInfo, uipc::constitution::IConstitution, uipc::core::ContactElement, uipc::core::IFeature, uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::SanityCheckMessage, uipc::details::ScopedTimer, uipc::geometry::IAttributeSlot, uipc::geometry::ImplicitGeometry, uipc::GlobalTimer::MergeResult)</li> <li>NeoHookeanShell (uipc::constitution::NeoHookeanShell)</li> <li>next_id (uipc::core::ObjectCollection, uipc::geometry::IGeometryCollection)</li> <li>NonConstGeometryT (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;)</li> <li>no_grad (uipc::diff_sim::EnableGradFeature)</li> <li>need_backend_broadcast (uipc::diff_sim::ParameterCollection)</li> <li>names (uipc::geometry::AttributeCollection)</li> <li>new_geometry (uipc::geometry::GeometryCommit)</li> </ul>"},{"location":"Libuipc/class_members/#o","title":"o","text":"<ul> <li>operator= (uipc::GlobalTimer, uipc::backend::SceneVisitor, uipc::backend::WorldVisitor, uipc::core::Animator, uipc::core::ConstitutionTabular, uipc::core::ContactElement, uipc::core::ContactTabular, uipc::core::DiffSim, uipc::core::Engine, uipc::core::Object, uipc::core::SceneSnapshot, uipc::core::World, uipc::diff_sim::ParameterCollection, uipc::geometry::AbstractSimplicialComplex, uipc::geometry::Attribute, uipc::geometry::AttributeCollection, uipc::geometry::AttributeCollectionCommit, uipc::geometry::Geometry, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryCollection, uipc::geometry::GeometryCommit, uipc::geometry::GeometrySlot, uipc::geometry::IAttributeSlot, uipc::geometry::SimplicialComplex, uipc::geometry::SimplicialComplexAttributes, uipc::geometry::SimplicialComplexIO)</li> <li>operator() (uipc::PmrDeleter)</li> <li>offset (uipc::backend::BufferView)</li> <li>operator bool (uipc::backend::BufferView)</li> <li>OfficialBuiltinUIDStart (uipc::builtin::UIDInfo)</li> <li>object (uipc::core::Animation::UpdateInfo)</li> <li>Object (uipc::core::Object)</li> <li>ObjectCollection (uipc::core::ObjectCollection)</li> <li>objects (uipc::core::ObjectCollection, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>ObjectCollectionSnapshot (uipc::core::ObjectCollectionSnapshot)</li> <li>ObjectSnapshot (uipc::core::ObjectSnapshot)</li> <li>Objects (uipc::core::Scene::Objects)</li> <li>object_collection (uipc::core::SceneSnapshotCommit)</li> <li>Octree (uipc::geometry::Octree)</li> <li>outward_tri_from_tet (uipc::geometry::SimplexUtils)</li> </ul>"},{"location":"Libuipc/class_members/#p","title":"p","text":"<ul> <li>pop_timer (uipc::GlobalTimer)</li> <li>print_merged_timings (uipc::GlobalTimer)</li> <li>print_timings (uipc::GlobalTimer)</li> <li>push_timer (uipc::GlobalTimer)</li> <li>parameters (uipc::backend::DiffSimVisitor, uipc::core::DiffSim)</li> <li>pending_destroy_ids (uipc::backend::SceneVisitor, uipc::geometry::GeometryCollection)</li> <li>pending_geometries (uipc::backend::SceneVisitor)</li> <li>pending_rest_geometries (uipc::backend::SceneVisitor)</li> <li>Particle (uipc::constitution::Particle)</li> <li>push_back (uipc::core::EngineStatusCollection)</li> <li>parent (uipc::details::ScopedTimer)</li> <li>ParameterCollection (uipc::diff_sim::ParameterCollection)</li> <li>pair (uipc::geometry::AttributeCopy)</li> <li>pull (uipc::geometry::AttributeCopy)</li> <li>push (uipc::geometry::AttributeCopy)</li> <li>pending_create_slots (uipc::geometry::GeometryCollection)</li> <li>pending_destroy (uipc::geometry::GeometryCollection)</li> <li>pending_emplace (uipc::geometry::GeometryCollection)</li> <li>positions (uipc::geometry::SimplicialComplex)</li> <li>parent_full_name (uipc::GlobalTimer::MergeResult)</li> <li>parent_name (uipc::GlobalTimer::MergeResult)</li> </ul>"},{"location":"Libuipc/class_members/#q","title":"q","text":"<ul> <li>query (uipc::geometry::BVH, uipc::geometry::Octree)</li> </ul>"},{"location":"Libuipc/class_members/#r","title":"r","text":"<ul> <li>report_as_json (uipc::GlobalTimer, uipc::Timer)</li> <li>report_merged_as_json (uipc::GlobalTimer)</li> <li>report (uipc::Timer, uipc::core::SanityChecker)</li> <li>resize (uipc::backend::Buffer, uipc::diff_sim::ParameterCollection, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::SimplicialComplexAttributes)</li> <li>ref (uipc::backend::DiffSimVisitor, uipc::backend::SceneVisitor, uipc::backend::WorldVisitor)</li> <li>result (uipc::backend::SanityCheckMessageVisitor, uipc::core::SanityCheckMessage)</li> <li>rest_geometries (uipc::backend::SceneVisitor, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>RotatingMotor (uipc::constitution::RotatingMotor)</li> <li>rest_geo_slots (uipc::core::Animation::UpdateInfo)</li> <li>resistance (uipc::core::ContactModel)</li> <li>recover (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>retrieve (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>rest_geometry_collection (uipc::core::Object)</li> <li>reserve (uipc::core::ObjectCollection, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>rest_geometry (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;)</li> <li>receive_dofs (uipc::diff_sim::AdjointMethodFeature)</li> <li>row_indices (uipc::diff_sim::SparseCOOView)</li> <li>reorder (uipc::geometry::AttributeCollection, uipc::geometry::IAttribute)</li> <li>removed_names (uipc::geometry::AttributeCollectionCommit)</li> <li>range (uipc::geometry::AttributeCopy)</li> <li>read (uipc::geometry::AttributeIO, uipc::geometry::SimplicialComplexIO)</li> <li>read_msh (uipc::geometry::SimplicialComplexIO)</li> <li>read_obj (uipc::geometry::SimplicialComplexIO)</li> <li>read_ply (uipc::geometry::SimplicialComplexIO)</li> </ul>"},{"location":"Libuipc/class_members/#s","title":"s","text":"<ul> <li>shape (uipc::BufferInfo, uipc::diff_sim::SparseCOOView)</li> <li>strides (uipc::BufferInfo)</li> <li>STimer (uipc::GlobalTimer)</li> <li>set_as_current (uipc::GlobalTimer)</li> <li>set_sync_func (uipc::Timer)</li> <li>sync (uipc::Timer, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>substep (uipc::backend::AnimatorVisitor, uipc::core::Animator)</li> <li>size (uipc::backend::BufferView, uipc::core::ObjectCollection, uipc::core::Scene::CObjects, uipc::core::Scene::Objects, uipc::diff_sim::ParameterCollection, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>size_in_bytes (uipc::backend::BufferView)</li> <li>subview (uipc::backend::BufferView)</li> <li>SanityCheckMessageVisitor (uipc::backend::SanityCheckMessageVisitor)</li> <li>SceneVisitor (uipc::backend::SceneVisitor)</li> <li>solve_pending (uipc::backend::SceneVisitor, uipc::core::internal::Scene, uipc::geometry::GeometryCollection)</li> <li>scene (uipc::backend::WorldVisitor)</li> <li>SoftPositionConstraint (uipc::constitution::SoftPositionConstraint)</li> <li>SoftTransformConstraint (uipc::constitution::SoftTransformConstraint)</li> <li>StableNeoHookean (uipc::constitution::StableNeoHookean)</li> <li>status (uipc::core::Engine, uipc::core::IEngine, uipc::core::internal::Engine)</li> <li>scene_pending (uipc::core::Object)</li> <li>scene_started (uipc::core::Object)</li> <li>SanityCheckMessage (uipc::core::SanityCheckMessage)</li> <li>SanityCheckMessageCollection (uipc::core::SanityCheckMessageCollection)</li> <li>SanityChecker (uipc::core::SanityChecker)</li> <li>Scene (uipc::core::Scene, uipc::core::internal::Scene)</li> <li>sanity_checker (uipc::core::Scene, uipc::core::internal::Scene)</li> <li>SceneFactory (uipc::core::SceneFactory)</li> <li>SceneIO (uipc::core::SceneIO)</li> <li>save (uipc::core::SceneIO)</li> <li>simplicial_surface (uipc::core::SceneIO)</li> <li>SceneSnapshot (uipc::core::SceneSnapshot)</li> <li>SceneSnapshotCommit (uipc::core::SceneSnapshotCommit)</li> <li>sanity_check (uipc::core::internal::World)</li> <li>ScopedTimer (uipc::details::ScopedTimer)</li> <li>setup_full_name (uipc::details::ScopedTimer)</li> <li>start (uipc::details::ScopedTimer)</li> <li>select_dofs (uipc::diff_sim::AdjointMethodFeature)</li> <li>SparseCOOView (uipc::diff_sim::SparseCOOView)</li> <li>share (uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::SimplicialComplexAttributes)</li> <li>same_dim (uipc::geometry::AttributeCopy)</li> <li>set_is_evolving (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>state (uipc::geometry::GeometrySlot)</li> <li>share_from (uipc::geometry::IAttributeSlot)</li> <li>SerialSharedAttributeContext (uipc::geometry::SerialSharedAttributeContext)</li> <li>SimplicialComplex (uipc::geometry::SimplicialComplex)</li> <li>SimplicialComplexAttributes (uipc::geometry::SimplicialComplexAttributes)</li> <li>SimplicialComplexIO (uipc::geometry::SimplicialComplexIO)</li> <li>SpreadSheetIO (uipc::geometry::SpreadSheetIO)</li> </ul>"},{"location":"Libuipc/class_members/#t","title":"t","text":"<ul> <li>to_json (nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;, uipc::builtin::UIDInfo, uipc::builtin::details::UIDRegister, uipc::core::ContactModelCollectionT, uipc::core::Engine, uipc::core::EngineStatusCollection, uipc::core::FeatureCollection, uipc::core::IEngine, uipc::core::SceneFactory, uipc::core::SceneIO, uipc::core::internal::Engine, uipc::geometry::AttributeCollection, uipc::geometry::AttributeCollectionFactory, uipc::geometry::AttributeFactory, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryFactory, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometry, uipc::geometry::SimplicialComplexAttributes)</li> <li>Timer (uipc::Timer)</li> <li>type (uipc::builtin::UIDInfo, uipc::constitution::IConstitution, uipc::core::EngineStatus, uipc::geometry::Attribute, uipc::geometry::AttributeCopy, uipc::geometry::GeometryCommit, uipc::geometry::IGeometry, uipc::propagate_const, uipc::signature&lt; R(Args...)&gt;)</li> <li>types (uipc::core::ConstitutionTabular)</li> <li>topo (uipc::core::ContactModel, uipc::geometry::SimplicialComplexAttributes)</li> <li>Type (uipc::core::EngineStatus)</li> <li>type_name (uipc::core::IFeature, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot)</li> <li>TimePoint (uipc::details::ScopedTimer)</li> <li>tick (uipc::details::ScopedTimer)</li> <li>tock (uipc::details::ScopedTimer)</li> <li>traverse (uipc::details::ScopedTimer)</li> <li>to_dense (uipc::diff_sim::SparseCOOView)</li> <li>to_sparse (uipc::diff_sim::SparseCOOView)</li> <li>TetrahedronAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>TriangleAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>tetrahedra (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>triangles (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>transforms (uipc::geometry::SimplicialComplex)</li> <li>TopoValueT (uipc::geometry::SimplicialComplexAttributes)</li> </ul>"},{"location":"Libuipc/class_members/#u","title":"u","text":"<ul> <li>update (uipc::backend::AnimatorVisitor, uipc::core::Animation, uipc::core::SceneIO)</li> <li>UserDefinedUIDStart (uipc::builtin::UIDInfo)</li> <li>uid (uipc::builtin::UIDInfo, uipc::constitution::IConstitution)</li> <li>uid_info (uipc::constitution::IConstitution, uipc::geometry::ImplicitGeometry)</li> <li>UpdateInfo (uipc::core::Animation::UpdateInfo)</li> <li>uids (uipc::core::ConstitutionTabular)</li> <li>update_from (uipc::core::ContactTabular, uipc::core::Object, uipc::core::ObjectCollection, uipc::core::Scene, uipc::core::internal::Scene, uipc::geometry::AttributeCollection, uipc::geometry::GeometryCollection, uipc::geometry::GeometryCollectionCommit, uipc::geometry::IGeometry)</li> <li>update_from_json (uipc::core::SceneIO)</li> <li>use_count (uipc::geometry::IAttributeSlot)</li> </ul>"},{"location":"Libuipc/class_members/#v","title":"v","text":"<ul> <li>view (uipc::backend::Buffer, uipc::diff_sim::ParameterCollection, uipc::geometry::Attribute, uipc::geometry::AttributeSlot)</li> <li>values (uipc::diff_sim::SparseCOOView)</li> <li>VertexAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>vertices (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>value_type (uipc::geometry::Attribute, uipc::geometry::AttributeSlot)</li> </ul>"},{"location":"Libuipc/class_members/#w","title":"w","text":"<ul> <li>what (uipc::Exception, uipc::core::EngineStatus)</li> <li>workspace (uipc::backend::EngineCreateInfo, uipc::core::Engine, uipc::core::SanityCheckerCollectionCreateInfo, uipc::core::internal::Engine)</li> <li>WorldVisitor (uipc::backend::WorldVisitor)</li> <li>website (uipc::builtin::UIDInfo)</li> <li>warning (uipc::core::EngineStatus)</li> <li>warns (uipc::core::SanityChecker)</li> <li>write_surface (uipc::core::SceneIO)</li> <li>write_surface_obj (uipc::core::SceneIO)</li> <li>World (uipc::core::World, uipc::core::internal::World)</li> <li>world (uipc::core::internal::Scene)</li> <li>with_grad (uipc::diff_sim::EnableGradFeature)</li> <li>write (uipc::geometry::SimplicialComplexIO)</li> <li>write_msh (uipc::geometry::SimplicialComplexIO)</li> <li>write_obj (uipc::geometry::SimplicialComplexIO)</li> <li>write_csv (uipc::geometry::SpreadSheetIO)</li> <li>write_json (uipc::geometry::SpreadSheetIO)</li> </ul>"},{"location":"Libuipc/class_members/#y","title":"y","text":"<ul> <li>youngs_poisson (uipc::constitution::ElasticModuli)</li> <li>youngs_shear (uipc::constitution::ElasticModuli)</li> </ul>"},{"location":"Libuipc/class_members/#_1","title":"~","text":"<ul> <li>~GlobalTimer (uipc::GlobalTimer)</li> <li>~LogPatternGuard (uipc::LogPatternGuard)</li> <li>~Timer (uipc::Timer)</li> <li>~DiffSimVisitor (uipc::backend::DiffSimVisitor)</li> <li>~IConstitution (uipc::constitution::IConstitution)</li> <li>~ConstitutionTabular (uipc::core::ConstitutionTabular)</li> <li>~ContactTabular (uipc::core::ContactTabular)</li> <li>~DiffSim (uipc::core::DiffSim)</li> <li>~Engine (uipc::core::Engine, uipc::core::internal::Engine)</li> <li>~EngineStatus (uipc::core::EngineStatus)</li> <li>~EngineStatusCollection (uipc::core::EngineStatusCollection)</li> <li>~FeatureCollection (uipc::core::FeatureCollection)</li> <li>~IEngine (uipc::core::IEngine)</li> <li>~IFeature (uipc::core::IFeature)</li> <li>~IObject (uipc::core::IObject)</li> <li>~IObjectCollection (uipc::core::IObjectCollection)</li> <li>~ISanityChecker (uipc::core::ISanityChecker)</li> <li>~ISanityCheckerCollection (uipc::core::ISanityCheckerCollection)</li> <li>~Object (uipc::core::Object)</li> <li>~SanityChecker (uipc::core::SanityChecker)</li> <li>~Scene (uipc::core::Scene, uipc::core::internal::Scene)</li> <li>~SceneFactory (uipc::core::SceneFactory)</li> <li>~World (uipc::core::World)</li> <li>~ScopedTimer (uipc::details::ScopedTimer)</li> <li>~ParameterCollection (uipc::diff_sim::ParameterCollection)</li> <li>~AttributeCollectionFactory (uipc::geometry::AttributeCollectionFactory)</li> <li>~AttributeFactory (uipc::geometry::AttributeFactory)</li> <li>~AttributeIO (uipc::geometry::AttributeIO)</li> <li>~BVH (uipc::geometry::BVH)</li> <li>~GeometryAtlas (uipc::geometry::GeometryAtlas)</li> <li>~GeometryAtlasCommit (uipc::geometry::GeometryAtlasCommit)</li> <li>~GeometryFactory (uipc::geometry::GeometryFactory)</li> <li>~GeometrySlot (uipc::geometry::GeometrySlot)</li> <li>~IAttribute (uipc::geometry::IAttribute)</li> <li>~IAttributeSlot (uipc::geometry::IAttributeSlot)</li> <li>~IGeometry (uipc::geometry::IGeometry)</li> <li>~IGeometryCollection (uipc::geometry::IGeometryCollection)</li> <li>~Octree (uipc::geometry::Octree)</li> </ul>"},{"location":"Libuipc/class_members/#_","title":"_","text":"<ul> <li>_print_merged_timings (uipc::GlobalTimer)</li> <li>_print_timings (uipc::GlobalTimer)</li> <li>_traverse_merge_timers (uipc::GlobalTimer)</li> </ul>"},{"location":"Libuipc/class_member_functions/","title":"Member Functions","text":""},{"location":"Libuipc/class_member_functions/#class-member-functions","title":"Class Member Functions","text":""},{"location":"Libuipc/class_member_functions/#a","title":"a","text":"<ul> <li>AnimatorVisitor (uipc::backend::AnimatorVisitor)</li> <li>animator (uipc::backend::WorldVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>ARAP (uipc::constitution::ARAP)</li> <li>apply_to (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::AffineBodyMaterial, uipc::constitution::Constraint, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::FiniteElementConstitution, uipc::constitution::FiniteElementExtraConstitution, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean, uipc::core::ContactElement)</li> <li>AffineBodyConstitution (uipc::constitution::AffineBodyConstitution)</li> <li>AffineBodyMaterial (uipc::constitution::AffineBodyMaterial)</li> <li>animate (uipc::constitution::LinearMotor, uipc::constitution::RotatingMotor)</li> <li>Animation (uipc::core::Animation)</li> <li>Animator (uipc::core::Animator)</li> <li>at (uipc::core::ContactTabular)</li> <li>advance (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>AdjointMethodFeature (uipc::diff_sim::AdjointMethodFeature)</li> <li>as_eigen (uipc::diff_sim::ParameterCollection)</li> <li>AbstractSimplicialComplex (uipc::geometry::AbstractSimplicialComplex)</li> <li>Attribute (uipc::geometry::Attribute)</li> <li>AttributeCollection (uipc::geometry::AttributeCollection)</li> <li>attribute_count (uipc::geometry::AttributeCollection)</li> <li>AttributeCollectionCommit (uipc::geometry::AttributeCollectionCommit)</li> <li>attribute_collection (uipc::geometry::AttributeCollectionCommit)</li> <li>AttributeCollectionFactory (uipc::geometry::AttributeCollectionFactory)</li> <li>AttributeCopy (uipc::geometry::AttributeCopy)</li> <li>AttributeFactory (uipc::geometry::AttributeFactory)</li> <li>AttributeIO (uipc::geometry::AttributeIO)</li> <li>AttributeSlot (uipc::geometry::AttributeSlot)</li> <li>attribute_slot_of (uipc::geometry::DeserialSharedAttributeContext)</li> <li>as (uipc::geometry::Geometry)</li> <li>attribute_collection_count (uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit)</li> <li>attribute_collection_names (uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit)</li> <li>attribute_collections (uipc::geometry::GeometryCommit)</li> <li>allow_destroy (uipc::geometry::IAttributeSlot)</li> <li>attribute (uipc::geometry::IAttributeSlot)</li> <li>attribute_of (uipc::geometry::SerialSharedAttributeContext)</li> <li>apply_pre_transform (uipc::geometry::SimplicialComplexIO)</li> </ul>"},{"location":"Libuipc/class_member_functions/#b","title":"b","text":"<ul> <li>Buffer (uipc::backend::Buffer)</li> <li>BufferView (uipc::backend::BufferView)</li> <li>backend (uipc::backend::BufferView)</li> <li>begin_pending (uipc::backend::SceneVisitor, uipc::core::internal::Scene)</li> <li>build_from (uipc::core::ContactTabular, uipc::core::Object, uipc::core::ObjectCollection, uipc::geometry::GeometryCollection)</li> <li>backend_name (uipc::core::Engine, uipc::core::internal::Engine)</li> <li>backward (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>build (uipc::core::ISanityChecker, uipc::core::ISanityCheckerCollection, uipc::diff_sim::ParameterCollection, uipc::geometry::BVH, uipc::geometry::Octree)</li> <li>broadcast (uipc::diff_sim::ParameterCollection)</li> <li>BVH (uipc::geometry::BVH)</li> <li>build_from_attribute_collections (uipc::geometry::IGeometry)</li> </ul>"},{"location":"Libuipc/class_member_functions/#c","title":"c","text":"<ul> <li>clear (uipc::GlobalTimer, uipc::core::EngineStatusCollection, uipc::core::SanityChecker, uipc::geometry::AttributeCollection, uipc::geometry::BVH, uipc::geometry::DeserialSharedAttributeContext, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection, uipc::geometry::Octree, uipc::geometry::SerialSharedAttributeContext, uipc::geometry::SimplicialComplexAttributes)</li> <li>current (uipc::GlobalTimer)</li> <li>ContactTabularVisitor (uipc::backend::ContactTabularVisitor)</li> <li>contact_models (uipc::backend::ContactTabularVisitor, uipc::core::ContactTabular, uipc::core::SceneSnapshotCommit)</li> <li>collect_attribute_collections (uipc::backend::GeometryVisitor, uipc::geometry::IGeometry)</li> <li>constitution_tabular (uipc::backend::SceneVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>contact_tabular (uipc::backend::SceneVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>ConstitutionUIDAutoRegister (uipc::builtin::ConstitutionUIDAutoRegister)</li> <li>creators (uipc::builtin::ConstitutionUIDAutoRegister, uipc::builtin::ImplicitGeometryUIDAutoRegister)</li> <li>ConstitutionUIDCollection (uipc::builtin::ConstitutionUIDCollection)</li> <li>create (uipc::builtin::details::UIDRegister, uipc::core::ContactModelCollectionT, uipc::core::ContactTabular, uipc::core::Object::Geometries, uipc::core::Scene::Objects, uipc::geometry::AttributeCollection, uipc::geometry::Geometry, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::SimplicialComplexAttributes)</li> <li>create_material (uipc::constitution::AffineBodyConstitution)</li> <li>Constraint (uipc::constitution::Constraint)</li> <li>ConstitutionTabular (uipc::core::ConstitutionTabular)</li> <li>ContactElement (uipc::core::ContactElement)</li> <li>ContactModel (uipc::core::ContactModel)</li> <li>config (uipc::core::ContactModel, uipc::core::Scene, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>ContactModelCollectionT (uipc::core::ContactModelCollectionT)</li> <li>ContactTabular (uipc::core::ContactTabular)</li> <li>contact_elements (uipc::core::ContactTabular, uipc::core::SceneSnapshotCommit)</li> <li>check (uipc::core::ISanityChecker, uipc::core::ISanityCheckerCollection, uipc::core::SanityChecker)</li> <li>CGeometries (uipc::core::Object::CGeometries, uipc::core::Scene::CGeometries)</li> <li>CObjects (uipc::core::Scene::CObjects)</li> <li>created_count (uipc::core::Scene::CObjects, uipc::core::Scene::Objects)</li> <li>commit_from_json (uipc::core::SceneFactory, uipc::geometry::AttributeCollectionFactory, uipc::geometry::GeometryFactory)</li> <li>commit_to_json (uipc::core::SceneFactory, uipc::core::SceneIO, uipc::geometry::AttributeCollectionFactory, uipc::geometry::GeometryFactory)</li> <li>commit (uipc::core::SceneIO)</li> <li>compute_dLdP (uipc::diff_sim::AdjointMethodFeature)</li> <li>connect (uipc::diff_sim::ParameterCollection)</li> <li>col_indices (uipc::diff_sim::SparseCOOView)</li> <li>copy_from (uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::IAttribute, uipc::geometry::SimplicialComplexAttributes)</li> <li>copy (uipc::geometry::AttributeCopy)</li> <li>create_slot (uipc::geometry::GeometryFactory)</li> <li>clone (uipc::geometry::GeometrySlot, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometry)</li> <li>clone_empty (uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot)</li> <li>compare_edge (uipc::geometry::SimplexUtils)</li> <li>compare_tet (uipc::geometry::SimplexUtils)</li> <li>compare_tri (uipc::geometry::SimplexUtils)</li> </ul>"},{"location":"Libuipc/class_member_functions/#d","title":"d","text":"<ul> <li>disable_all (uipc::Timer)</li> <li>DiffSimVisitor (uipc::backend::DiffSimVisitor)</li> <li>diff_sim (uipc::backend::SceneVisitor, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>default_config (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean, uipc::core::ContactTabular, uipc::core::Engine, uipc::core::Scene, uipc::core::internal::Engine)</li> <li>DiscreteShellBending (uipc::constitution::DiscreteShellBending)</li> <li>dt (uipc::core::Animation::UpdateInfo, uipc::core::internal::Scene)</li> <li>default_element (uipc::core::ContactTabular)</li> <li>default_model (uipc::core::ContactTabular)</li> <li>DiffSim (uipc::core::DiffSim)</li> <li>do_advance (uipc::core::IEngine)</li> <li>do_backward (uipc::core::IEngine)</li> <li>do_dump (uipc::core::IEngine)</li> <li>do_init (uipc::core::IEngine)</li> <li>do_recover (uipc::core::IEngine)</li> <li>do_retrieve (uipc::core::IEngine)</li> <li>do_sync (uipc::core::IEngine)</li> <li>do_to_json (uipc::core::IEngine, uipc::geometry::AbstractSimplicialComplex, uipc::geometry::Attribute, uipc::geometry::Geometry, uipc::geometry::IAttribute, uipc::geometry::IGeometry)</li> <li>dump (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>do_check (uipc::core::ISanityChecker)</li> <li>destroy (uipc::core::ObjectCollection, uipc::core::Scene::Objects, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>do_compute_dLdP (uipc::diff_sim::AdjointMethodFeatureOverrider)</li> <li>do_receive_dofs (uipc::diff_sim::AdjointMethodFeatureOverrider)</li> <li>do_select_dofs (uipc::diff_sim::AdjointMethodFeatureOverrider)</li> <li>do_no_grad (uipc::diff_sim::EnableGradFeatureOverrider)</li> <li>do_with_grad (uipc::diff_sim::EnableGradFeatureOverrider)</li> <li>dim (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>do_clear (uipc::geometry::Attribute, uipc::geometry::GeometryCollection, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection)</li> <li>do_clone (uipc::geometry::Attribute, uipc::geometry::AttributeSlot, uipc::geometry::Geometry, uipc::geometry::GeometrySlot, uipc::geometry::GeometrySlotT&lt; Geometry &gt;, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometry, uipc::geometry::ImplicitGeometry, uipc::geometry::SimplicialComplex)</li> <li>do_clone_empty (uipc::geometry::Attribute, uipc::geometry::AttributeSlot, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot)</li> <li>do_copy_from (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>do_from_json (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>do_reorder (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>do_reserve (uipc::geometry::Attribute, uipc::geometry::GeometryCollection, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection)</li> <li>do_resize (uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>diff (uipc::geometry::AttributeCollectionFactory)</li> <li>do_make_owned (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>do_share_from (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>DeserialSharedAttributeContext (uipc::geometry::DeserialSharedAttributeContext)</li> <li>do_build_from_attribute_collections (uipc::geometry::Geometry, uipc::geometry::IGeometry)</li> <li>do_collect_attribute_collections (uipc::geometry::Geometry, uipc::geometry::IGeometry)</li> <li>do_update_from (uipc::geometry::Geometry, uipc::geometry::IGeometry)</li> <li>detect (uipc::geometry::Octree)</li> </ul>"},{"location":"Libuipc/class_member_functions/#e","title":"e","text":"<ul> <li>Exception (uipc::Exception, uipc::JsonIOError, uipc::core::EngineException, uipc::core::SceneIOError, uipc::geometry::AttributeCollectionError, uipc::geometry::AttributeIOError, uipc::geometry::GeometryIOError)</li> <li>elapsed (uipc::Timer, uipc::details::ScopedTimer)</li> <li>enable_all (uipc::Timer)</li> <li>element_size (uipc::backend::BufferView)</li> <li>element_stride (uipc::backend::BufferView)</li> <li>exists (uipc::builtin::details::UIDRegister)</li> <li>ElasticModuli (uipc::constitution::ElasticModuli)</li> <li>Empty (uipc::constitution::Empty)</li> <li>erase (uipc::core::Animator)</li> <li>element_count (uipc::core::ContactTabular)</li> <li>Engine (uipc::core::Engine, uipc::core::internal::Engine)</li> <li>EngineStatus (uipc::core::EngineStatus)</li> <li>error (uipc::core::EngineStatus)</li> <li>EngineStatusCollection (uipc::core::EngineStatusCollection)</li> <li>emplace (uipc::core::ObjectCollection, uipc::geometry::GeometryCollection)</li> <li>errors (uipc::core::SanityChecker)</li> <li>EnableGradFeature (uipc::diff_sim::EnableGradFeature)</li> <li>edges (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> </ul>"},{"location":"Libuipc/class_member_functions/#f","title":"f","text":"<ul> <li>format (fmt::formatter&lt; uipc::core::Animation &gt;, fmt::formatter&lt; uipc::core::Animator &gt;, fmt::formatter&lt; uipc::core::Object &gt;, fmt::formatter&lt; uipc::core::ObjectCollection &gt;, fmt::formatter&lt; uipc::core::Scene &gt;, fmt::formatter&lt; uipc::geometry::AbstractSimplicialComplex &gt;, fmt::formatter&lt; uipc::geometry::AttributeCollection &gt;, fmt::formatter&lt; uipc::geometry::Geometry &gt;, fmt::formatter&lt; uipc::geometry::Geometry::InstanceAttributesT&lt; IsConst &gt; &gt;, fmt::formatter&lt; uipc::geometry::Geometry::MetaAttributesT&lt; IsConst &gt; &gt;, fmt::formatter&lt; uipc::geometry::ImplicitGeometry &gt;, fmt::formatter&lt; uipc::geometry::SimplicialComplex &gt;, fmt::formatter&lt; uipc::geometry::SimplicialComplexAttributes&lt; IsConst, N &gt; &gt;)</li> <li>from_json (nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;, uipc::core::SceneFactory, uipc::core::SceneIO, uipc::geometry::AttributeCollectionFactory, uipc::geometry::AttributeFactory, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryFactory, uipc::geometry::IAttribute)</li> <li>find_geometry (uipc::backend::SceneVisitor)</li> <li>find_rest_geometry (uipc::backend::SceneVisitor)</li> <li>find (uipc::builtin::details::UIDRegister, uipc::core::ContactModelCollectionT, uipc::core::FeatureCollection, uipc::core::ObjectCollection, uipc::core::Scene::CGeometries, uipc::core::Scene::CObjects, uipc::core::Scene::Geometries, uipc::core::Scene::Objects, uipc::geometry::AttributeCollection, uipc::geometry::Geometry, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>fixed_vertices_changing (uipc::core::Animation::UpdateHint)</li> <li>frame (uipc::core::Animation::UpdateInfo, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>friction_rate (uipc::core::ContactModel)</li> <li>features (uipc::core::Engine, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>from_snapshot (uipc::core::SceneFactory)</li> <li>flush (uipc::geometry::GeometryCollection)</li> </ul>"},{"location":"Libuipc/class_member_functions/#g","title":"g","text":"<ul> <li>GlobalTimer (uipc::GlobalTimer)</li> <li>GeometryVisitor (uipc::backend::GeometryVisitor)</li> <li>geometries (uipc::backend::SanityCheckMessageVisitor, uipc::backend::SceneVisitor, uipc::core::Object, uipc::core::SanityCheckMessage, uipc::core::Scene, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>get_uid (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::Constraint, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::FiniteElementExtraConstitution, uipc::constitution::HookeanSpring, uipc::constitution::IConstitution, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean)</li> <li>geo_slots (uipc::core::Animation::UpdateInfo)</li> <li>get_type_name (uipc::core::Feature, uipc::core::IFeature, uipc::geometry::Attribute, uipc::geometry::IAttribute)</li> <li>get_features (uipc::core::IEngine)</li> <li>get_frame (uipc::core::IEngine)</li> <li>get_status (uipc::core::IEngine)</li> <li>get_name (uipc::core::IFeature, uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::Object, uipc::diff_sim::AdjointMethodFeature, uipc::diff_sim::EnableGradFeature, uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_id (uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::Object)</li> <li>geometry_collection (uipc::core::Object)</li> <li>Geometries (uipc::core::Object::Geometries, uipc::core::Scene::Geometries)</li> <li>get_is_grad_enabled (uipc::diff_sim::EnableGradFeatureOverrider)</li> <li>get_type (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::Geometry, uipc::geometry::IGeometry, uipc::geometry::ImplicitGeometry, uipc::geometry::SimplicialComplex)</li> <li>get_size (uipc::geometry::Attribute, uipc::geometry::GeometryCollection, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection)</li> <li>get_allow_destroy (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_attribute (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_is_evolving (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_last_modified (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>get_use_count (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>Geometry (uipc::geometry::Geometry)</li> <li>GeometryAtlas (uipc::geometry::GeometryAtlas)</li> <li>geometry_count (uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit)</li> <li>GeometryAtlasCommit (uipc::geometry::GeometryAtlasCommit)</li> <li>GeometryCollection (uipc::geometry::GeometryCollection)</li> <li>geometry_slots (uipc::geometry::GeometryCollection)</li> <li>get_next_id (uipc::geometry::GeometryCollection, uipc::geometry::IGeometryCollection)</li> <li>GeometryCollectionCommit (uipc::geometry::GeometryCollectionCommit)</li> <li>GeometryCommit (uipc::geometry::GeometryCommit)</li> <li>GeometryFactory (uipc::geometry::GeometryFactory)</li> <li>GeometrySlot (uipc::geometry::GeometrySlot)</li> <li>geometry (uipc::geometry::GeometrySlot)</li> <li>get_geometry (uipc::geometry::GeometrySlot, uipc::geometry::GeometrySlotT&lt; Geometry &gt;)</li> <li>GeometrySlotT (uipc::geometry::GeometrySlotT&lt; Geometry &gt;)</li> </ul>"},{"location":"Libuipc/class_member_functions/#h","title":"h","text":"<ul> <li>handle (uipc::backend::BufferView)</li> <li>HookeanSpring (uipc::constitution::HookeanSpring)</li> <li>hint (uipc::core::Animation::UpdateInfo)</li> <li>has_error (uipc::core::EngineStatusCollection)</li> </ul>"},{"location":"Libuipc/class_member_functions/#i","title":"i","text":"<ul> <li>init (uipc::backend::AnimatorVisitor, uipc::core::Animation, uipc::core::ConstitutionTabular, uipc::core::DiffSim, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::Scene, uipc::core::internal::World)</li> <li>id (uipc::backend::SanityCheckMessageVisitor, uipc::core::ContactElement, uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::geometry::GeometrySlot)</li> <li>info (uipc::backend::SceneVisitor, uipc::core::EngineStatus, uipc::core::Scene)</li> <li>is_pending (uipc::backend::SceneVisitor, uipc::core::internal::Scene)</li> <li>instance (uipc::builtin::ConstitutionUIDCollection, uipc::builtin::ImplicitGeometryUIDCollection)</li> <li>ImplicitGeometryUIDAutoRegister (uipc::builtin::ImplicitGeometryUIDAutoRegister)</li> <li>ImplicitGeometryUIDCollection (uipc::builtin::ImplicitGeometryUIDCollection)</li> <li>is_official_builtin_uid (uipc::builtin::UIDInfo)</li> <li>is_user_defined_uid (uipc::builtin::UIDInfo)</li> <li>insert (uipc::core::Animator, uipc::core::ConstitutionTabular, uipc::core::ContactTabular, uipc::core::FeatureCollection)</li> <li>is_enabled (uipc::core::ContactModel)</li> <li>internal_contact_models (uipc::core::ContactTabular)</li> <li>ids (uipc::core::Object::CGeometries, uipc::core::Object::Geometries)</li> <li>is_empty (uipc::core::SanityCheckMessage)</li> <li>infos (uipc::core::SanityChecker)</li> <li>is_valid (uipc::core::SceneSnapshotCommit, uipc::core::World, uipc::core::internal::World, uipc::geometry::GeometryCommit)</li> <li>is_started (uipc::core::internal::Scene)</li> <li>is_grad_enabled (uipc::diff_sim::EnableGradFeature)</li> <li>instances (uipc::geometry::Geometry)</li> <li>InstanceAttributesT (uipc::geometry::Geometry::InstanceAttributesT)</li> <li>is_modification (uipc::geometry::GeometryCommit)</li> <li>is_new (uipc::geometry::GeometryCommit)</li> <li>IAttribute (uipc::geometry::IAttribute)</li> <li>IAttributeSlot (uipc::geometry::IAttributeSlot)</li> <li>is_evolving (uipc::geometry::IAttributeSlot)</li> <li>is_shared (uipc::geometry::IAttributeSlot)</li> <li>ImplicitGeometry (uipc::geometry::ImplicitGeometry)</li> <li>index_of (uipc::geometry::SerialSharedAttributeContext)</li> <li>is_same_edge (uipc::geometry::SimplexUtils)</li> <li>is_same_oriented_edge (uipc::geometry::SimplexUtils)</li> <li>is_same_oriented_tet (uipc::geometry::SimplexUtils)</li> <li>is_same_oriented_tri (uipc::geometry::SimplexUtils)</li> <li>is_same_tet (uipc::geometry::SimplexUtils)</li> <li>is_same_tri (uipc::geometry::SimplexUtils)</li> </ul>"},{"location":"Libuipc/class_member_functions/#k","title":"k","text":"<ul> <li>KirchhoffRodBending (uipc::constitution::KirchhoffRodBending)</li> </ul>"},{"location":"Libuipc/class_member_functions/#l","title":"l","text":"<ul> <li>LogPatternGuard (uipc::LogPatternGuard)</li> <li>lambda (uipc::constitution::ElasticModuli)</li> <li>lame (uipc::constitution::ElasticModuli)</li> <li>LinearMotor (uipc::constitution::LinearMotor)</li> <li>load (uipc::core::SceneIO)</li> <li>last_modified (uipc::geometry::IAttributeSlot)</li> </ul>"},{"location":"Libuipc/class_member_functions/#m","title":"m","text":"<ul> <li>max_depth (uipc::GlobalTimer)</li> <li>max_full_name_length (uipc::GlobalTimer)</li> <li>merge_timers (uipc::GlobalTimer)</li> <li>message (uipc::backend::SanityCheckMessageVisitor, uipc::core::SanityCheckMessage)</li> <li>mu (uipc::constitution::ElasticModuli)</li> <li>messages (uipc::core::SanityCheckMessageCollection)</li> <li>meta (uipc::geometry::Geometry)</li> <li>MetaAttributesT (uipc::geometry::Geometry::MetaAttributesT)</li> <li>make_owned (uipc::geometry::IAttributeSlot)</li> </ul>"},{"location":"Libuipc/class_member_functions/#n","title":"n","text":"<ul> <li>name (uipc::backend::SanityCheckMessageVisitor, uipc::constitution::IConstitution, uipc::core::ContactElement, uipc::core::IFeature, uipc::core::IObject, uipc::core::ISanityChecker, uipc::core::SanityCheckMessage, uipc::geometry::IAttributeSlot, uipc::geometry::ImplicitGeometry)</li> <li>NeoHookeanShell (uipc::constitution::NeoHookeanShell)</li> <li>next_id (uipc::core::ObjectCollection, uipc::geometry::IGeometryCollection)</li> <li>no_grad (uipc::diff_sim::EnableGradFeature)</li> <li>need_backend_broadcast (uipc::diff_sim::ParameterCollection)</li> <li>names (uipc::geometry::AttributeCollection)</li> <li>new_geometry (uipc::geometry::GeometryCommit)</li> </ul>"},{"location":"Libuipc/class_member_functions/#o","title":"o","text":"<ul> <li>operator= (uipc::GlobalTimer, uipc::backend::SceneVisitor, uipc::backend::WorldVisitor, uipc::core::Animator, uipc::core::ConstitutionTabular, uipc::core::ContactElement, uipc::core::ContactTabular, uipc::core::DiffSim, uipc::core::Engine, uipc::core::Object, uipc::core::SceneSnapshot, uipc::core::World, uipc::diff_sim::ParameterCollection, uipc::geometry::AbstractSimplicialComplex, uipc::geometry::Attribute, uipc::geometry::AttributeCollection, uipc::geometry::AttributeCollectionCommit, uipc::geometry::Geometry, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryCollection, uipc::geometry::GeometryCommit, uipc::geometry::GeometrySlot, uipc::geometry::IAttributeSlot, uipc::geometry::SimplicialComplex, uipc::geometry::SimplicialComplexAttributes, uipc::geometry::SimplicialComplexIO)</li> <li>operator() (uipc::PmrDeleter)</li> <li>offset (uipc::backend::BufferView)</li> <li>operator bool (uipc::backend::BufferView)</li> <li>object (uipc::core::Animation::UpdateInfo)</li> <li>Object (uipc::core::Object)</li> <li>ObjectCollection (uipc::core::ObjectCollection)</li> <li>objects (uipc::core::ObjectCollection, uipc::core::Scene, uipc::core::internal::Scene)</li> <li>ObjectCollectionSnapshot (uipc::core::ObjectCollectionSnapshot)</li> <li>ObjectSnapshot (uipc::core::ObjectSnapshot)</li> <li>Objects (uipc::core::Scene::Objects)</li> <li>object_collection (uipc::core::SceneSnapshotCommit)</li> <li>Octree (uipc::geometry::Octree)</li> <li>outward_tri_from_tet (uipc::geometry::SimplexUtils)</li> </ul>"},{"location":"Libuipc/class_member_functions/#p","title":"p","text":"<ul> <li>pop_timer (uipc::GlobalTimer)</li> <li>print_merged_timings (uipc::GlobalTimer)</li> <li>print_timings (uipc::GlobalTimer)</li> <li>push_timer (uipc::GlobalTimer)</li> <li>parameters (uipc::backend::DiffSimVisitor, uipc::core::DiffSim)</li> <li>pending_destroy_ids (uipc::backend::SceneVisitor, uipc::geometry::GeometryCollection)</li> <li>pending_geometries (uipc::backend::SceneVisitor)</li> <li>pending_rest_geometries (uipc::backend::SceneVisitor)</li> <li>Particle (uipc::constitution::Particle)</li> <li>push_back (uipc::core::EngineStatusCollection)</li> <li>ParameterCollection (uipc::diff_sim::ParameterCollection)</li> <li>pair (uipc::geometry::AttributeCopy)</li> <li>pull (uipc::geometry::AttributeCopy)</li> <li>push (uipc::geometry::AttributeCopy)</li> <li>pending_create_slots (uipc::geometry::GeometryCollection)</li> <li>pending_destroy (uipc::geometry::GeometryCollection)</li> <li>pending_emplace (uipc::geometry::GeometryCollection)</li> <li>positions (uipc::geometry::SimplicialComplex)</li> </ul>"},{"location":"Libuipc/class_member_functions/#q","title":"q","text":"<ul> <li>query (uipc::geometry::BVH, uipc::geometry::Octree)</li> </ul>"},{"location":"Libuipc/class_member_functions/#r","title":"r","text":"<ul> <li>report_as_json (uipc::GlobalTimer, uipc::Timer)</li> <li>report_merged_as_json (uipc::GlobalTimer)</li> <li>report (uipc::Timer, uipc::core::SanityChecker)</li> <li>resize (uipc::backend::Buffer, uipc::diff_sim::ParameterCollection, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::SimplicialComplexAttributes)</li> <li>ref (uipc::backend::DiffSimVisitor, uipc::backend::SceneVisitor, uipc::backend::WorldVisitor)</li> <li>result (uipc::backend::SanityCheckMessageVisitor, uipc::core::SanityCheckMessage)</li> <li>rest_geometries (uipc::backend::SceneVisitor, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>RotatingMotor (uipc::constitution::RotatingMotor)</li> <li>rest_geo_slots (uipc::core::Animation::UpdateInfo)</li> <li>resistance (uipc::core::ContactModel)</li> <li>recover (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>retrieve (uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>rest_geometry_collection (uipc::core::Object)</li> <li>reserve (uipc::core::ObjectCollection, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::IGeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>receive_dofs (uipc::diff_sim::AdjointMethodFeature)</li> <li>row_indices (uipc::diff_sim::SparseCOOView)</li> <li>reorder (uipc::geometry::AttributeCollection, uipc::geometry::IAttribute)</li> <li>removed_names (uipc::geometry::AttributeCollectionCommit)</li> <li>range (uipc::geometry::AttributeCopy)</li> <li>read (uipc::geometry::AttributeIO, uipc::geometry::SimplicialComplexIO)</li> <li>read_msh (uipc::geometry::SimplicialComplexIO)</li> <li>read_obj (uipc::geometry::SimplicialComplexIO)</li> <li>read_ply (uipc::geometry::SimplicialComplexIO)</li> </ul>"},{"location":"Libuipc/class_member_functions/#s","title":"s","text":"<ul> <li>set_as_current (uipc::GlobalTimer)</li> <li>set_sync_func (uipc::Timer)</li> <li>sync (uipc::Timer, uipc::core::IEngine, uipc::core::World, uipc::core::internal::Engine, uipc::core::internal::World)</li> <li>substep (uipc::backend::AnimatorVisitor, uipc::core::Animator)</li> <li>size (uipc::backend::BufferView, uipc::core::ObjectCollection, uipc::core::Scene::CObjects, uipc::core::Scene::Objects, uipc::diff_sim::ParameterCollection, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometryCollection, uipc::geometry::SimplicialComplexAttributes)</li> <li>size_in_bytes (uipc::backend::BufferView)</li> <li>subview (uipc::backend::BufferView)</li> <li>SanityCheckMessageVisitor (uipc::backend::SanityCheckMessageVisitor)</li> <li>SceneVisitor (uipc::backend::SceneVisitor)</li> <li>solve_pending (uipc::backend::SceneVisitor, uipc::core::internal::Scene, uipc::geometry::GeometryCollection)</li> <li>scene (uipc::backend::WorldVisitor)</li> <li>SoftPositionConstraint (uipc::constitution::SoftPositionConstraint)</li> <li>SoftTransformConstraint (uipc::constitution::SoftTransformConstraint)</li> <li>StableNeoHookean (uipc::constitution::StableNeoHookean)</li> <li>status (uipc::core::Engine, uipc::core::IEngine, uipc::core::internal::Engine)</li> <li>scene_pending (uipc::core::Object)</li> <li>scene_started (uipc::core::Object)</li> <li>SanityCheckMessage (uipc::core::SanityCheckMessage)</li> <li>SanityCheckMessageCollection (uipc::core::SanityCheckMessageCollection)</li> <li>SanityChecker (uipc::core::SanityChecker)</li> <li>Scene (uipc::core::Scene, uipc::core::internal::Scene)</li> <li>sanity_checker (uipc::core::Scene, uipc::core::internal::Scene)</li> <li>SceneFactory (uipc::core::SceneFactory)</li> <li>SceneIO (uipc::core::SceneIO)</li> <li>save (uipc::core::SceneIO)</li> <li>simplicial_surface (uipc::core::SceneIO)</li> <li>SceneSnapshot (uipc::core::SceneSnapshot)</li> <li>SceneSnapshotCommit (uipc::core::SceneSnapshotCommit)</li> <li>sanity_check (uipc::core::internal::World)</li> <li>ScopedTimer (uipc::details::ScopedTimer)</li> <li>setup_full_name (uipc::details::ScopedTimer)</li> <li>select_dofs (uipc::diff_sim::AdjointMethodFeature)</li> <li>SparseCOOView (uipc::diff_sim::SparseCOOView)</li> <li>shape (uipc::diff_sim::SparseCOOView)</li> <li>share (uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::SimplicialComplexAttributes)</li> <li>same_dim (uipc::geometry::AttributeCopy)</li> <li>set_is_evolving (uipc::geometry::AttributeSlot, uipc::geometry::IAttributeSlot)</li> <li>state (uipc::geometry::GeometrySlot)</li> <li>share_from (uipc::geometry::IAttributeSlot)</li> <li>SerialSharedAttributeContext (uipc::geometry::SerialSharedAttributeContext)</li> <li>SimplicialComplex (uipc::geometry::SimplicialComplex)</li> <li>SimplicialComplexAttributes (uipc::geometry::SimplicialComplexAttributes)</li> <li>SimplicialComplexIO (uipc::geometry::SimplicialComplexIO)</li> <li>SpreadSheetIO (uipc::geometry::SpreadSheetIO)</li> </ul>"},{"location":"Libuipc/class_member_functions/#t","title":"t","text":"<ul> <li>to_json (nlohmann::adl_serializer&lt; Eigen::Matrix&lt; Scalar, Rows, Cols, Options, MaxRows, MaxCols &gt; &gt;, uipc::builtin::UIDInfo, uipc::builtin::details::UIDRegister, uipc::core::ContactModelCollectionT, uipc::core::Engine, uipc::core::EngineStatusCollection, uipc::core::FeatureCollection, uipc::core::IEngine, uipc::core::SceneFactory, uipc::core::SceneIO, uipc::core::internal::Engine, uipc::geometry::AttributeCollection, uipc::geometry::AttributeCollectionFactory, uipc::geometry::AttributeFactory, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryFactory, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot, uipc::geometry::IGeometry, uipc::geometry::SimplicialComplexAttributes)</li> <li>Timer (uipc::Timer)</li> <li>type (uipc::constitution::IConstitution, uipc::core::EngineStatus, uipc::geometry::Attribute, uipc::geometry::AttributeCopy, uipc::geometry::GeometryCommit, uipc::geometry::IGeometry)</li> <li>types (uipc::core::ConstitutionTabular)</li> <li>topo (uipc::core::ContactModel, uipc::geometry::SimplicialComplexAttributes)</li> <li>type_name (uipc::core::IFeature, uipc::geometry::IAttribute, uipc::geometry::IAttributeSlot)</li> <li>tick (uipc::details::ScopedTimer)</li> <li>tock (uipc::details::ScopedTimer)</li> <li>traverse (uipc::details::ScopedTimer)</li> <li>to_dense (uipc::diff_sim::SparseCOOView)</li> <li>to_sparse (uipc::diff_sim::SparseCOOView)</li> <li>tetrahedra (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>triangles (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>transforms (uipc::geometry::SimplicialComplex)</li> </ul>"},{"location":"Libuipc/class_member_functions/#u","title":"u","text":"<ul> <li>update (uipc::backend::AnimatorVisitor, uipc::core::Animation, uipc::core::SceneIO)</li> <li>uid (uipc::constitution::IConstitution)</li> <li>uid_info (uipc::constitution::IConstitution, uipc::geometry::ImplicitGeometry)</li> <li>UpdateInfo (uipc::core::Animation::UpdateInfo)</li> <li>uids (uipc::core::ConstitutionTabular)</li> <li>update_from (uipc::core::ContactTabular, uipc::core::Object, uipc::core::ObjectCollection, uipc::core::Scene, uipc::core::internal::Scene, uipc::geometry::AttributeCollection, uipc::geometry::GeometryCollection, uipc::geometry::GeometryCollectionCommit, uipc::geometry::IGeometry)</li> <li>update_from_json (uipc::core::SceneIO)</li> <li>use_count (uipc::geometry::IAttributeSlot)</li> </ul>"},{"location":"Libuipc/class_member_functions/#v","title":"v","text":"<ul> <li>view (uipc::backend::Buffer, uipc::diff_sim::ParameterCollection, uipc::geometry::Attribute, uipc::geometry::AttributeSlot)</li> <li>values (uipc::diff_sim::SparseCOOView)</li> <li>vertices (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> </ul>"},{"location":"Libuipc/class_member_functions/#w","title":"w","text":"<ul> <li>what (uipc::Exception, uipc::core::EngineStatus)</li> <li>WorldVisitor (uipc::backend::WorldVisitor)</li> <li>workspace (uipc::core::Engine, uipc::core::internal::Engine)</li> <li>warning (uipc::core::EngineStatus)</li> <li>warns (uipc::core::SanityChecker)</li> <li>write_surface (uipc::core::SceneIO)</li> <li>write_surface_obj (uipc::core::SceneIO)</li> <li>World (uipc::core::World, uipc::core::internal::World)</li> <li>world (uipc::core::internal::Scene)</li> <li>with_grad (uipc::diff_sim::EnableGradFeature)</li> <li>write (uipc::geometry::SimplicialComplexIO)</li> <li>write_msh (uipc::geometry::SimplicialComplexIO)</li> <li>write_obj (uipc::geometry::SimplicialComplexIO)</li> <li>write_csv (uipc::geometry::SpreadSheetIO)</li> <li>write_json (uipc::geometry::SpreadSheetIO)</li> </ul>"},{"location":"Libuipc/class_member_functions/#y","title":"y","text":"<ul> <li>youngs_poisson (uipc::constitution::ElasticModuli)</li> <li>youngs_shear (uipc::constitution::ElasticModuli)</li> </ul>"},{"location":"Libuipc/class_member_functions/#_1","title":"~","text":"<ul> <li>~GlobalTimer (uipc::GlobalTimer)</li> <li>~LogPatternGuard (uipc::LogPatternGuard)</li> <li>~Timer (uipc::Timer)</li> <li>~DiffSimVisitor (uipc::backend::DiffSimVisitor)</li> <li>~IConstitution (uipc::constitution::IConstitution)</li> <li>~ConstitutionTabular (uipc::core::ConstitutionTabular)</li> <li>~ContactTabular (uipc::core::ContactTabular)</li> <li>~DiffSim (uipc::core::DiffSim)</li> <li>~Engine (uipc::core::Engine, uipc::core::internal::Engine)</li> <li>~EngineStatus (uipc::core::EngineStatus)</li> <li>~EngineStatusCollection (uipc::core::EngineStatusCollection)</li> <li>~FeatureCollection (uipc::core::FeatureCollection)</li> <li>~IEngine (uipc::core::IEngine)</li> <li>~IFeature (uipc::core::IFeature)</li> <li>~IObject (uipc::core::IObject)</li> <li>~IObjectCollection (uipc::core::IObjectCollection)</li> <li>~ISanityChecker (uipc::core::ISanityChecker)</li> <li>~ISanityCheckerCollection (uipc::core::ISanityCheckerCollection)</li> <li>~Object (uipc::core::Object)</li> <li>~SanityChecker (uipc::core::SanityChecker)</li> <li>~Scene (uipc::core::Scene, uipc::core::internal::Scene)</li> <li>~SceneFactory (uipc::core::SceneFactory)</li> <li>~World (uipc::core::World)</li> <li>~ScopedTimer (uipc::details::ScopedTimer)</li> <li>~ParameterCollection (uipc::diff_sim::ParameterCollection)</li> <li>~AttributeCollectionFactory (uipc::geometry::AttributeCollectionFactory)</li> <li>~AttributeFactory (uipc::geometry::AttributeFactory)</li> <li>~AttributeIO (uipc::geometry::AttributeIO)</li> <li>~BVH (uipc::geometry::BVH)</li> <li>~GeometryAtlas (uipc::geometry::GeometryAtlas)</li> <li>~GeometryAtlasCommit (uipc::geometry::GeometryAtlasCommit)</li> <li>~GeometryFactory (uipc::geometry::GeometryFactory)</li> <li>~GeometrySlot (uipc::geometry::GeometrySlot)</li> <li>~IAttribute (uipc::geometry::IAttribute)</li> <li>~IAttributeSlot (uipc::geometry::IAttributeSlot)</li> <li>~IGeometry (uipc::geometry::IGeometry)</li> <li>~IGeometryCollection (uipc::geometry::IGeometryCollection)</li> <li>~Octree (uipc::geometry::Octree)</li> </ul>"},{"location":"Libuipc/class_member_functions/#_","title":"_","text":"<ul> <li>_print_merged_timings (uipc::GlobalTimer)</li> <li>_print_timings (uipc::GlobalTimer)</li> <li>_traverse_merge_timers (uipc::GlobalTimer)</li> </ul>"},{"location":"Libuipc/class_member_variables/","title":"Member Variables","text":""},{"location":"Libuipc/class_member_variables/#class-member-variables","title":"Class Member Variables","text":""},{"location":"Libuipc/class_member_variables/#a","title":"a","text":"<ul> <li>author (uipc::builtin::UIDInfo)</li> </ul>"},{"location":"Libuipc/class_member_variables/#c","title":"c","text":"<ul> <li>config (uipc::backend::EngineCreateInfo)</li> <li>children (uipc::details::ScopedTimer, uipc::GlobalTimer::MergeResult)</li> <li>count (uipc::GlobalTimer::MergeResult)</li> </ul>"},{"location":"Libuipc/class_member_variables/#d","title":"d","text":"<ul> <li>data (uipc::BufferInfo)</li> <li>default_instance (uipc::GlobalTimer)</li> <li>description (uipc::builtin::UIDInfo)</li> <li>depth (uipc::details::ScopedTimer, uipc::GlobalTimer::MergeResult)</li> <li>duration (uipc::details::ScopedTimer, uipc::GlobalTimer::MergeResult)</li> </ul>"},{"location":"Libuipc/class_member_variables/#e","title":"e","text":"<ul> <li>email (uipc::builtin::UIDInfo)</li> <li>extras (uipc::builtin::UIDInfo)</li> <li>end (uipc::details::ScopedTimer)</li> </ul>"},{"location":"Libuipc/class_member_variables/#f","title":"f","text":"<ul> <li>full_name (uipc::details::ScopedTimer)</li> <li>FeatureName (uipc::diff_sim::AdjointMethodFeature, uipc::diff_sim::EnableGradFeature)</li> </ul>"},{"location":"Libuipc/class_member_variables/#g","title":"g","text":"<ul> <li>geometry (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;)</li> </ul>"},{"location":"Libuipc/class_member_variables/#i","title":"i","text":"<ul> <li>itemsize (uipc::BufferInfo)</li> <li>INVALID (uipc::backend::BufferView)</li> <li>IsScalar (uipc::geometry::SimplicialComplexAttributes)</li> </ul>"},{"location":"Libuipc/class_member_variables/#l","title":"l","text":"<ul> <li>last_calling_frame (uipc::diff_sim::AdjointMethodFeature)</li> </ul>"},{"location":"Libuipc/class_member_variables/#m","title":"m","text":"<ul> <li>memory_resource (UIPCModuleInitInfo)</li> <li>module_name (UIPCModuleInitInfo)</li> <li>m_msg (uipc::Exception, uipc::backend::SanityCheckMessageVisitor, uipc::core::EngineStatus)</li> <li>m_current (uipc::GlobalTimer)</li> <li>m_merge_root (uipc::GlobalTimer)</li> <li>m_merge_timers (uipc::GlobalTimer)</li> <li>m_root (uipc::GlobalTimer)</li> <li>m_timer_stack (uipc::GlobalTimer)</li> <li>m_timers (uipc::GlobalTimer)</li> <li>m_force_on (uipc::Timer)</li> <li>m_global_on (uipc::Timer)</li> <li>m_sync (uipc::Timer)</li> <li>m_timer (uipc::Timer)</li> <li>m_animator (uipc::backend::AnimatorVisitor, uipc::core::internal::Scene)</li> <li>m_get_buffer_view_func (uipc::backend::Buffer)</li> <li>m_resize_func (uipc::backend::Buffer)</li> <li>m_backend (uipc::backend::BufferView)</li> <li>m_element_size (uipc::backend::BufferView)</li> <li>m_element_stride (uipc::backend::BufferView)</li> <li>m_handle (uipc::backend::BufferView)</li> <li>m_offset (uipc::backend::BufferView)</li> <li>m_size (uipc::backend::BufferView, uipc::geometry::AttributeCollection)</li> <li>m_contact_tabular (uipc::backend::ContactTabularVisitor, uipc::core::internal::Scene)</li> <li>m_diff_sim (uipc::backend::DiffSimVisitor, uipc::core::internal::Scene)</li> <li>m_geometry (uipc::backend::GeometryVisitor, uipc::geometry::GeometrySlotT&lt; Geometry &gt;)</li> <li>m_diff_sim_visitor (uipc::backend::SceneVisitor)</li> <li>m_ref (uipc::backend::SceneVisitor, uipc::backend::WorldVisitor)</li> <li>m_scene (uipc::backend::SceneVisitor, uipc::core::Animation, uipc::core::Animator, uipc::core::Object, uipc::core::SanityChecker, uipc::core::Scene::CGeometries, uipc::core::Scene::CObjects, uipc::core::Scene::Geometries, uipc::core::Scene::Objects, uipc::core::SceneIO, uipc::core::internal::World)</li> <li>m_world (uipc::backend::WorldVisitor, uipc::core::internal::Scene)</li> <li>m_uid_to_info (uipc::builtin::details::UIDRegister)</li> <li>m_config (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean, uipc::core::ContactModel, uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>m_constitution (uipc::constitution::AffineBodyMaterial)</li> <li>m_kappa (uipc::constitution::AffineBodyMaterial)</li> <li>m_mass_density (uipc::constitution::AffineBodyMaterial)</li> <li>m_lambda (uipc::constitution::ElasticModuli)</li> <li>m_mu (uipc::constitution::ElasticModuli)</li> <li>m_object (uipc::core::Animation, uipc::core::Object::CGeometries, uipc::core::Object::Geometries)</li> <li>m_on_update (uipc::core::Animation)</li> <li>m_temp_geo_slots (uipc::core::Animation)</li> <li>m_temp_rest_geo_slots (uipc::core::Animation)</li> <li>m_fixed_vertices_changing (uipc::core::Animation::UpdateHint)</li> <li>m_animation (uipc::core::Animation::UpdateInfo)</li> <li>m_hint (uipc::core::Animation::UpdateInfo)</li> <li>m_animations (uipc::core::Animator)</li> <li>m_substep (uipc::core::Animator)</li> <li>m_impl (uipc::core::ConstitutionTabular, uipc::core::ContactTabular, uipc::core::DiffSim, uipc::core::EngineStatusCollection, uipc::core::SceneFactory, uipc::core::internal::Engine, uipc::diff_sim::AdjointMethodFeature, uipc::diff_sim::EnableGradFeature, uipc::diff_sim::ParameterCollection, uipc::geometry::AttributeCollectionFactory, uipc::geometry::AttributeFactory, uipc::geometry::AttributeIO, uipc::geometry::BVH, uipc::geometry::GeometryAtlas, uipc::geometry::GeometryAtlasCommit, uipc::geometry::GeometryFactory, uipc::geometry::Octree)</li> <li>m_id (uipc::core::ContactElement, uipc::core::Object, uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::geometry::GeometrySlot)</li> <li>m_name (uipc::core::ContactElement, uipc::core::Object, uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::geometry::AttributeSlot)</li> <li>m_enabled (uipc::core::ContactModel)</li> <li>m_friction_rate (uipc::core::ContactModel)</li> <li>m_ids (uipc::core::ContactModel)</li> <li>m_resistance (uipc::core::ContactModel)</li> <li>m_attributes (uipc::core::ContactModelCollectionT, uipc::geometry::AttributeCollection, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::SimplicialComplexAttributes)</li> <li>m_internal (uipc::core::Engine, uipc::core::Scene, uipc::core::World)</li> <li>m_type (uipc::core::EngineStatus, uipc::geometry::AttributeCopy, uipc::geometry::GeometryCommit)</li> <li>m_type_name (uipc::core::Feature)</li> <li>m_features (uipc::core::FeatureCollection)</li> <li>m_geometry_ids (uipc::core::Object)</li> <li>m_next_id (uipc::core::ObjectCollection, uipc::core::ObjectCollectionSnapshot, uipc::geometry::GeometryCollection, uipc::geometry::GeometryCollectionCommit)</li> <li>m_objects (uipc::core::ObjectCollection, uipc::core::ObjectCollectionSnapshot, uipc::core::internal::Scene)</li> <li>m_geometries (uipc::core::ObjectSnapshot, uipc::core::SanityCheckMessage, uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene, uipc::geometry::GeometryCollection)</li> <li>m_message (uipc::core::SanityCheckMessage)</li> <li>m_result (uipc::core::SanityCheckMessage)</li> <li>m_messages (uipc::core::SanityCheckMessageCollection)</li> <li>m_errors (uipc::core::SanityChecker)</li> <li>m_infos (uipc::core::SanityChecker)</li> <li>m_warns (uipc::core::SanityChecker)</li> <li>m_contact_elements (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit)</li> <li>m_contact_models (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit)</li> <li>m_object_collection (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit)</li> <li>m_rest_geometries (uipc::core::SceneSnapshot, uipc::core::SceneSnapshotCommit, uipc::core::internal::Scene)</li> <li>m_is_valid (uipc::core::SceneSnapshotCommit, uipc::geometry::GeometryCommit)</li> <li>m_constitution_tabular (uipc::core::internal::Scene)</li> <li>m_dt (uipc::core::internal::Scene)</li> <li>m_pending (uipc::core::internal::Scene)</li> <li>m_sanity_checker (uipc::core::internal::Scene)</li> <li>m_started (uipc::core::internal::Scene)</li> <li>m_engine (uipc::core::internal::World)</li> <li>m_valid (uipc::core::internal::World)</li> <li>m_col_indices (uipc::diff_sim::SparseCOOView)</li> <li>m_row_indices (uipc::diff_sim::SparseCOOView)</li> <li>m_shape (uipc::diff_sim::SparseCOOView)</li> <li>m_values (uipc::diff_sim::SparseCOOView, uipc::geometry::Attribute)</li> <li>m_edge_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_tetrahedron_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_triangle_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_vertex_attributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>m_default_value (uipc::geometry::Attribute)</li> <li>m_attribute_collection (uipc::geometry::AttributeCollectionCommit)</li> <li>m_removed_names (uipc::geometry::AttributeCollectionCommit)</li> <li>m_count (uipc::geometry::AttributeCopy)</li> <li>m_dst_offset (uipc::geometry::AttributeCopy)</li> <li>m_mapping (uipc::geometry::AttributeCopy)</li> <li>m_pairs (uipc::geometry::AttributeCopy)</li> <li>m_src_offset (uipc::geometry::AttributeCopy)</li> <li>m_allow_destroy (uipc::geometry::AttributeSlot)</li> <li>m_attribute (uipc::geometry::AttributeSlot)</li> <li>m_is_evolving (uipc::geometry::AttributeSlot)</li> <li>m_last_modified (uipc::geometry::AttributeSlot)</li> <li>m_attribute_slots (uipc::geometry::DeserialSharedAttributeContext)</li> <li>m_attribute_collections (uipc::geometry::Geometry, uipc::geometry::GeometryCommit)</li> <li>m_intances (uipc::geometry::Geometry)</li> <li>m_meta (uipc::geometry::Geometry)</li> <li>m_dirty (uipc::geometry::GeometryCollection)</li> <li>m_geometry_slots (uipc::geometry::GeometryCollection)</li> <li>m_pending_create (uipc::geometry::GeometryCollection)</li> <li>m_pending_create_slots (uipc::geometry::GeometryCollection)</li> <li>m_pending_destroy (uipc::geometry::GeometryCollection)</li> <li>m_pending_destroy_ids (uipc::geometry::GeometryCollection)</li> <li>m_diff_geometries (uipc::geometry::GeometryCollectionCommit)</li> <li>m_new_geometry (uipc::geometry::GeometryCommit)</li> <li>m_state (uipc::geometry::GeometrySlot)</li> <li>m_attr_to_index (uipc::geometry::SerialSharedAttributeContext)</li> <li>m_index_to_attr (uipc::geometry::SerialSharedAttributeContext)</li> <li>m_pre_transform (uipc::geometry::SimplicialComplexIO)</li> <li>m_output_folder (uipc::geometry::SpreadSheetIO)</li> </ul>"},{"location":"Libuipc/class_member_variables/#n","title":"n","text":"<ul> <li>name (uipc::builtin::UIDInfo, uipc::details::ScopedTimer, uipc::GlobalTimer::MergeResult)</li> </ul>"},{"location":"Libuipc/class_member_variables/#o","title":"o","text":"<ul> <li>OfficialBuiltinUIDStart (uipc::builtin::UIDInfo)</li> </ul>"},{"location":"Libuipc/class_member_variables/#p","title":"p","text":"<ul> <li>parent (uipc::details::ScopedTimer)</li> <li>parent_full_name (uipc::GlobalTimer::MergeResult)</li> <li>parent_name (uipc::GlobalTimer::MergeResult)</li> </ul>"},{"location":"Libuipc/class_member_variables/#r","title":"r","text":"<ul> <li>rest_geometry (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;)</li> </ul>"},{"location":"Libuipc/class_member_variables/#s","title":"s","text":"<ul> <li>shape (uipc::BufferInfo)</li> <li>strides (uipc::BufferInfo)</li> <li>start (uipc::details::ScopedTimer)</li> </ul>"},{"location":"Libuipc/class_member_variables/#t","title":"t","text":"<ul> <li>type (uipc::builtin::UIDInfo)</li> </ul>"},{"location":"Libuipc/class_member_variables/#u","title":"u","text":"<ul> <li>UserDefinedUIDStart (uipc::builtin::UIDInfo)</li> <li>uid (uipc::builtin::UIDInfo)</li> </ul>"},{"location":"Libuipc/class_member_variables/#w","title":"w","text":"<ul> <li>workspace (uipc::backend::EngineCreateInfo, uipc::core::SanityCheckerCollectionCreateInfo)</li> <li>website (uipc::builtin::UIDInfo)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/","title":"Member Typedefs","text":""},{"location":"Libuipc/class_member_typedefs/#class-member-typedefs","title":"Class Member Typedefs","text":""},{"location":"Libuipc/class_member_typedefs/#a","title":"a","text":"<ul> <li>Allocator (uipc::PmrDeleter)</li> <li>ActionOnUpdate (uipc::core::Animation)</li> <li>AutoAttributeCollection (uipc::core::ContactModelCollectionT, uipc::geometry::Geometry::InstanceAttributesT, uipc::geometry::Geometry::MetaAttributesT, uipc::geometry::SimplicialComplexAttributes)</li> <li>AutoGeometrySlot (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;)</li> <li>AABB (uipc::geometry::BVH, uipc::geometry::Octree)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#b","title":"b","text":"<ul> <li>Base (uipc::constitution::ARAP, uipc::constitution::AffineBodyConstitution, uipc::constitution::DiscreteShellBending, uipc::constitution::Empty, uipc::constitution::FiniteElementConstitution, uipc::constitution::FiniteElementExtraConstitution, uipc::constitution::HookeanSpring, uipc::constitution::KirchhoffRodBending, uipc::constitution::LinearMotor, uipc::constitution::NeoHookeanShell, uipc::constitution::Particle, uipc::constitution::RotatingMotor, uipc::constitution::SoftPositionConstraint, uipc::constitution::SoftTransformConstraint, uipc::constitution::StableNeoHookean)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#c","title":"c","text":"<ul> <li>Creator (uipc::builtin::ConstitutionUIDAutoRegister, uipc::builtin::ImplicitGeometryUIDAutoRegister)</li> <li>CEdgeAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>CTetrahedronAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>CTriangleAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>CVertexAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>CInstanceAttributes (uipc::geometry::Geometry)</li> <li>CMetaAttributes (uipc::geometry::Geometry)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#d","title":"d","text":"<ul> <li>Duration (uipc::details::ScopedTimer)</li> <li>DstT_ (uipc::propagate_const)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#e","title":"e","text":"<ul> <li>EdgeAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#i","title":"i","text":"<ul> <li>InstanceAttributes (uipc::geometry::Geometry)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#m","title":"m","text":"<ul> <li>MetaAttributes (uipc::geometry::Geometry)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#n","title":"n","text":"<ul> <li>NonConstGeometryT (uipc::core::ObjectGeometrySlots, uipc::core::ObjectGeometrySlots&lt; const geometry::Geometry &gt;, uipc::core::ObjectGeometrySlots&lt; geometry::Geometry &gt;)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#s","title":"s","text":"<ul> <li>STimer (uipc::GlobalTimer)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#t","title":"t","text":"<ul> <li>TimePoint (uipc::details::ScopedTimer)</li> <li>TetrahedronAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>TriangleAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>TopoValueT (uipc::geometry::SimplicialComplexAttributes)</li> <li>type (uipc::propagate_const, uipc::signature&lt; R(Args...)&gt;)</li> </ul>"},{"location":"Libuipc/class_member_typedefs/#v","title":"v","text":"<ul> <li>VertexAttributes (uipc::geometry::AbstractSimplicialComplex, uipc::geometry::SimplicialComplex)</li> <li>value_type (uipc::geometry::Attribute, uipc::geometry::AttributeSlot)</li> </ul>"},{"location":"Libuipc/class_member_enums/","title":"Member Enumerations","text":""},{"location":"Libuipc/class_member_enums/#class-member-enums","title":"Class Member Enums","text":""},{"location":"Libuipc/class_member_enums/#c","title":"c","text":"<ul> <li>CopyType (uipc::geometry::AttributeCopy)</li> </ul>"},{"location":"Libuipc/class_member_enums/#t","title":"t","text":"<ul> <li>Type (uipc::core::EngineStatus)</li> </ul>"},{"location":"Libuipc/namespace_members/","title":"Member","text":""},{"location":"Libuipc/namespace_members/#namespace-members","title":"Namespace Members","text":""},{"location":"Libuipc/namespace_members/#a","title":"a","text":"<ul> <li>Allocator (uipc)</li> <li>as_eigen (uipc, uipc::diff_sim)</li> <li>AbstractSimplicialComplex (uipc::builtin)</li> <li>AffineBody (uipc::builtin)</li> <li>apply_region (uipc::geometry)</li> <li>apply_transform (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#c","title":"c","text":"<ul> <li>config (uipc)</li> <li>Constraint (uipc::builtin)</li> <li>CContactModelCollection (uipc::core)</li> <li>ContactModelCollection (uipc::core)</li> <li>compute_instance_volume (uipc::geometry)</li> <li>compute_vertex_volume (uipc::geometry)</li> <li>compute_body_force (uipc::geometry::affine_body)</li> <li>compute_dyadic_mass (uipc::geometry::affine_body)</li> </ul>"},{"location":"Libuipc/namespace_members/#d","title":"d","text":"<ul> <li>default_config (uipc)</li> </ul>"},{"location":"Libuipc/namespace_members/#e","title":"e","text":"<ul> <li>encode_offset_count (uipc)</li> <li>EG_to_lame (uipc::constitution)</li> <li>EG_to_poisson (uipc::constitution)</li> <li>EP_to_lame (uipc::constitution)</li> <li>Engine (uipc::core::internal)</li> <li>edge_edge_squared_distance (uipc::geometry)</li> <li>extract_surface (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#f","title":"f","text":"<ul> <li>Float (uipc)</li> <li>FiniteElement (uipc::builtin)</li> <li>from_json (uipc::core)</li> <li>facet_closure (uipc::geometry)</li> <li>flip_inward_triangles (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#g","title":"g","text":"<ul> <li>Geometry (uipc::builtin)</li> <li>GeometrySlotState (uipc::geometry)</li> <li>ground (uipc::geometry)</li> <li>glfw_native_window_handle (uipc::gui)</li> </ul>"},{"location":"Libuipc/namespace_members/#h","title":"h","text":"<ul> <li>HandleT (uipc::backend)</li> <li>halfplane (uipc::geometry)</li> <li>halfplane_vertex_signed_distance (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#i","title":"i","text":"<ul> <li>I32 (uipc)</li> <li>I64 (uipc)</li> <li>IndexT (uipc)</li> <li>init (uipc)</li> <li>is_matrix_v (uipc)</li> <li>ImplicitGeometry (uipc::builtin)</li> <li>ImplicitGeometrySlot (uipc::geometry)</li> <li>is_point_in_tet (uipc::geometry)</li> <li>is_trimesh_closed (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#j","title":"j","text":"<ul> <li>Json (uipc)</li> </ul>"},{"location":"Libuipc/namespace_members/#l","title":"l","text":"<ul> <li>lame_to_EG (uipc::constitution)</li> <li>lame_to_poisson (uipc::constitution)</li> <li>label_connected_vertices (uipc::geometry)</li> <li>label_region (uipc::geometry)</li> <li>label_surface (uipc::geometry)</li> <li>label_triangle_orient (uipc::geometry)</li> <li>linemesh (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#m","title":"m","text":"<ul> <li>Matrix12x12 (uipc)</li> <li>Matrix2x2 (uipc)</li> <li>Matrix3x3 (uipc)</li> <li>Matrix4x4 (uipc)</li> <li>Matrix6x6 (uipc)</li> <li>Matrix9x9 (uipc)</li> <li>make_shared (uipc)</li> <li>make_unique (uipc)</li> <li>merge (uipc::geometry)</li> <li>mesh_partition (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#n","title":"n","text":"<ul> <li>native_display_handle (uipc::gui)</li> <li>native_window_handle_type (uipc::gui)</li> </ul>"},{"location":"Libuipc/namespace_members/#o","title":"o","text":"<ul> <li>operator\"\"_GPa (uipc)</li> <li>operator\"\"_MPa (uipc)</li> <li>operator\"\"_N (uipc)</li> <li>operator\"\"_Pa (uipc)</li> <li>operator\"\"_kPa (uipc)</li> <li>operator\"\"_km (uipc)</li> <li>operator\"\"_m (uipc)</li> <li>operator\"\"_mm (uipc)</li> <li>operator\"\"_ms (uipc)</li> <li>operator\"\"_s (uipc)</li> <li>operator- (uipc::core, uipc::geometry)</li> <li>operator+= (uipc::geometry)</li> <li>optimal_transform (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#p","title":"p","text":"<ul> <li>propagate_const_t (uipc)</li> <li>point_edge_squared_distance (uipc::geometry)</li> <li>point_point_squared_distance (uipc::geometry)</li> <li>point_triangle_squared_distance (uipc::geometry)</li> <li>pointcloud (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#r","title":"r","text":"<ul> <li>READABLE_TYPE_NAME_AS_ALIAS (uipc)</li> <li>RUNTIME_CHECK (uipc)</li> <li>readable_type_name (uipc)</li> <li>run_length_encode (uipc)</li> </ul>"},{"location":"Libuipc/namespace_members/#s","title":"s","text":"<ul> <li>S (uipc)</li> <li>SizeT (uipc)</li> <li>signature_t (uipc)</li> <li>stack (uipc)</li> <li>static_pointer_cast (uipc)</li> <li>SimplicialComplex (uipc::builtin)</li> <li>SanityCheckResult (uipc::core)</li> <li>SimplicialComplexSlot (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#t","title":"t","text":"<ul> <li>Transform (uipc)</li> <li>Translation (uipc)</li> <li>test_gltf (uipc)</li> <li>to_json (uipc::core)</li> <li>TimePoint (uipc::geometry)</li> <li>tetmesh (uipc::geometry)</li> <li>tetrahedralize (uipc::geometry)</li> <li>tri_edge_intersect (uipc::geometry)</li> <li>trimesh (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_members/#u","title":"u","text":"<ul> <li>U (uipc)</li> <li>U32 (uipc)</li> <li>U64 (uipc)</li> <li>UIPC_BUILTIN_ATTRIBUTE (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_members/#v","title":"v","text":"<ul> <li>Vector12 (uipc)</li> <li>Vector2 (uipc)</li> <li>Vector2i (uipc)</li> <li>Vector3 (uipc)</li> <li>Vector3i (uipc)</li> <li>Vector4 (uipc)</li> <li>Vector4i (uipc)</li> <li>Vector6 (uipc)</li> <li>Vector9 (uipc)</li> <li>VectorX (uipc)</li> <li>VectorXi (uipc)</li> <li>VectorXi64 (uipc)</li> <li>VectorXu (uipc)</li> <li>VectorXu64 (uipc)</li> <li>view (uipc::diff_sim)</li> </ul>"},{"location":"Libuipc/namespace_members/#w","title":"w","text":"<ul> <li>W (uipc)</li> </ul>"},{"location":"Libuipc/namespace_members/#_","title":"_","text":"<ul> <li>__data__ (uipc::builtin)</li> <li>__meta__ (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/","title":"Member Functions","text":""},{"location":"Libuipc/namespace_member_functions/#namespace-member-functions","title":"Namespace Member Functions","text":""},{"location":"Libuipc/namespace_member_functions/#a","title":"a","text":"<ul> <li>as_eigen (uipc, uipc::diff_sim)</li> <li>apply_region (uipc::geometry)</li> <li>apply_transform (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#c","title":"c","text":"<ul> <li>config (uipc)</li> <li>compute_instance_volume (uipc::geometry)</li> <li>compute_vertex_volume (uipc::geometry)</li> <li>compute_body_force (uipc::geometry::affine_body)</li> <li>compute_dyadic_mass (uipc::geometry::affine_body)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#d","title":"d","text":"<ul> <li>default_config (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#e","title":"e","text":"<ul> <li>encode_offset_count (uipc)</li> <li>EG_to_lame (uipc::constitution)</li> <li>EG_to_poisson (uipc::constitution)</li> <li>EP_to_lame (uipc::constitution)</li> <li>edge_edge_squared_distance (uipc::geometry)</li> <li>extract_surface (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#f","title":"f","text":"<ul> <li>from_json (uipc::core)</li> <li>facet_closure (uipc::geometry)</li> <li>flip_inward_triangles (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#g","title":"g","text":"<ul> <li>ground (uipc::geometry)</li> <li>glfw_native_window_handle (uipc::gui)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#h","title":"h","text":"<ul> <li>halfplane (uipc::geometry)</li> <li>halfplane_vertex_signed_distance (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#i","title":"i","text":"<ul> <li>init (uipc)</li> <li>is_point_in_tet (uipc::geometry)</li> <li>is_trimesh_closed (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#l","title":"l","text":"<ul> <li>lame_to_EG (uipc::constitution)</li> <li>lame_to_poisson (uipc::constitution)</li> <li>label_connected_vertices (uipc::geometry)</li> <li>label_region (uipc::geometry)</li> <li>label_surface (uipc::geometry)</li> <li>label_triangle_orient (uipc::geometry)</li> <li>linemesh (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#m","title":"m","text":"<ul> <li>make_shared (uipc)</li> <li>make_unique (uipc)</li> <li>merge (uipc::geometry)</li> <li>mesh_partition (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#n","title":"n","text":"<ul> <li>native_display_handle (uipc::gui)</li> <li>native_window_handle_type (uipc::gui)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#o","title":"o","text":"<ul> <li>operator\"\"_GPa (uipc)</li> <li>operator\"\"_MPa (uipc)</li> <li>operator\"\"_N (uipc)</li> <li>operator\"\"_Pa (uipc)</li> <li>operator\"\"_kPa (uipc)</li> <li>operator\"\"_km (uipc)</li> <li>operator\"\"_m (uipc)</li> <li>operator\"\"_mm (uipc)</li> <li>operator\"\"_ms (uipc)</li> <li>operator\"\"_s (uipc)</li> <li>operator- (uipc::core, uipc::geometry)</li> <li>operator+= (uipc::geometry)</li> <li>optimal_transform (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#p","title":"p","text":"<ul> <li>point_edge_squared_distance (uipc::geometry)</li> <li>point_point_squared_distance (uipc::geometry)</li> <li>point_triangle_squared_distance (uipc::geometry)</li> <li>pointcloud (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#r","title":"r","text":"<ul> <li>READABLE_TYPE_NAME_AS_ALIAS (uipc)</li> <li>readable_type_name (uipc)</li> <li>run_length_encode (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#s","title":"s","text":"<ul> <li>static_pointer_cast (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#t","title":"t","text":"<ul> <li>test_gltf (uipc)</li> <li>to_json (uipc::core)</li> <li>tetmesh (uipc::geometry)</li> <li>tetrahedralize (uipc::geometry)</li> <li>tri_edge_intersect (uipc::geometry)</li> <li>trimesh (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#u","title":"u","text":"<ul> <li>UIPC_BUILTIN_ATTRIBUTE (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_functions/#v","title":"v","text":"<ul> <li>view (uipc::diff_sim)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/","title":"Member Variables","text":""},{"location":"Libuipc/namespace_member_variables/#namespace-member-variables","title":"Namespace Member Variables","text":""},{"location":"Libuipc/namespace_member_variables/#a","title":"a","text":"<ul> <li>AbstractSimplicialComplex (uipc::builtin)</li> <li>AffineBody (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#c","title":"c","text":"<ul> <li>Constraint (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#e","title":"e","text":"<ul> <li>Engine (uipc::core::internal)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#f","title":"f","text":"<ul> <li>FiniteElement (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#g","title":"g","text":"<ul> <li>Geometry (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#i","title":"i","text":"<ul> <li>is_matrix_v (uipc)</li> <li>ImplicitGeometry (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#r","title":"r","text":"<ul> <li>RUNTIME_CHECK (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#s","title":"s","text":"<ul> <li>SimplicialComplex (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_variables/#_","title":"_","text":"<ul> <li>__data__ (uipc::builtin)</li> <li>__meta__ (uipc::builtin)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/","title":"Member Typedefs","text":""},{"location":"Libuipc/namespace_member_typedefs/#namespace-member-typedefs","title":"Namespace Member Typedefs","text":""},{"location":"Libuipc/namespace_member_typedefs/#a","title":"a","text":"<ul> <li>Allocator (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#c","title":"c","text":"<ul> <li>CContactModelCollection (uipc::core)</li> <li>ContactModelCollection (uipc::core)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#f","title":"f","text":"<ul> <li>Float (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#h","title":"h","text":"<ul> <li>HandleT (uipc::backend)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#i","title":"i","text":"<ul> <li>I32 (uipc)</li> <li>I64 (uipc)</li> <li>IndexT (uipc)</li> <li>ImplicitGeometrySlot (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#j","title":"j","text":"<ul> <li>Json (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#m","title":"m","text":"<ul> <li>Matrix12x12 (uipc)</li> <li>Matrix2x2 (uipc)</li> <li>Matrix3x3 (uipc)</li> <li>Matrix4x4 (uipc)</li> <li>Matrix6x6 (uipc)</li> <li>Matrix9x9 (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#p","title":"p","text":"<ul> <li>propagate_const_t (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#s","title":"s","text":"<ul> <li>S (uipc)</li> <li>SizeT (uipc)</li> <li>signature_t (uipc)</li> <li>stack (uipc)</li> <li>SimplicialComplexSlot (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#t","title":"t","text":"<ul> <li>Transform (uipc)</li> <li>Translation (uipc)</li> <li>TimePoint (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#u","title":"u","text":"<ul> <li>U (uipc)</li> <li>U32 (uipc)</li> <li>U64 (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#v","title":"v","text":"<ul> <li>Vector12 (uipc)</li> <li>Vector2 (uipc)</li> <li>Vector2i (uipc)</li> <li>Vector3 (uipc)</li> <li>Vector3i (uipc)</li> <li>Vector4 (uipc)</li> <li>Vector4i (uipc)</li> <li>Vector6 (uipc)</li> <li>Vector9 (uipc)</li> <li>VectorX (uipc)</li> <li>VectorXi (uipc)</li> <li>VectorXi64 (uipc)</li> <li>VectorXu (uipc)</li> <li>VectorXu64 (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_typedefs/#w","title":"w","text":"<ul> <li>W (uipc)</li> </ul>"},{"location":"Libuipc/namespace_member_enums/","title":"Member Enumerations","text":""},{"location":"Libuipc/namespace_member_enums/#namespace-member-enums","title":"Namespace Member Enums","text":""},{"location":"Libuipc/namespace_member_enums/#g","title":"g","text":"<ul> <li>GeometrySlotState (uipc::geometry)</li> </ul>"},{"location":"Libuipc/namespace_member_enums/#s","title":"s","text":"<ul> <li>SanityCheckResult (uipc::core)</li> </ul>"},{"location":"Libuipc/functions/","title":"Functions","text":""},{"location":"Libuipc/functions/#functions","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"Libuipc/macros/","title":"Macros","text":""},{"location":"Libuipc/macros/#macros","title":"Macros","text":""},{"location":"Libuipc/macros/#r","title":"r","text":"<ul> <li>REGISTER_CONSTITUTION_UIDS (constitution_uid_auto_register.h)</li> <li>REGISTER_CONSTITUTION_UIDS_INTERNAL (constitution_uid_auto_register.h)</li> <li>REGISTER_IMPLICIT_GEOMETRY_UIDS (implicit_geometry_uid_auto_register.h)</li> <li>REGISTER_IMPLICIT_GEOMETRY_UIDS_INTERNAL (implicit_geometry_uid_auto_register.h)</li> <li>READABLE_TYPE_NAME_AS_ALIAS (readable_type_name.h)</li> </ul>"},{"location":"Libuipc/macros/#u","title":"u","text":"<ul> <li>UIPC_BACKEND_API (macro.h, dllexport.h)</li> <li>UIPC_BUILTIN_ATTRIBUTE (attribute_name.h)</li> <li>UIPC_CONSTITUTION_API (dllexport.h)</li> <li>UIPC_CORE_API (dllexport.h)</li> <li>UIPC_EXPORT_API (dllexport.h)</li> <li>UIPC_EXTERN_C (dllexport.h)</li> <li>UIPC_FORCE_INLINE (dllexport.h)</li> <li>UIPC_GEOMETRY_API (dllexport.h)</li> <li>UIPC_IMPORT_API (dllexport.h)</li> <li>UIPC_IO_API (dllexport.h)</li> <li>UIPC_NEVER_INLINE (dllexport.h)</li> <li>UIPC_NOEXCEPT (dllexport.h)</li> <li>UIPC_ASSERT (log.h)</li> <li>UIPC_ERROR_WITH_LOCATION (log.h)</li> <li>UIPC_INFO_WITH_LOCATION (log.h)</li> <li>UIPC_LOG_WITH_LOCATION (log.h)</li> <li>UIPC_WARN_WITH_LOCATION (log.h)</li> <li>UIPC_CONCATE (macro.h)</li> <li>UIPC_NAME_WITH_ID (macro.h)</li> <li>UIPC_NAME_WITH_ID_IMPL (macro.h)</li> <li>UIPC_TO_STRING (macro.h)</li> </ul>"},{"location":"Libuipc/variables/","title":"Variables","text":""},{"location":"Libuipc/variables/#variables","title":"Variables","text":""},{"location":"Libuipc/variables/#e","title":"e","text":"<ul> <li>EngineCreateInfo (engine_create_info.h)</li> </ul>"},{"location":"Libuipc/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}