<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="readable__type__name_8h" kind="file" language="C++">
    <compoundname>readable_type_name.h</compoundname>
    <includes refid="common_2type__define_8h" local="no">uipc/common/type_define.h</includes>
    <includes local="no">string_view</includes>
    <includes local="no">boost/core/demangle.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>include/uipc/common/readable_type_name.h</label>
        <link refid="readable__type__name_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>uipc/common/type_define.h</label>
        <link refid="common_2type__define_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Eigen/Core</label>
      </node>
      <node id="5">
        <label>boost/core/demangle.hpp</label>
      </node>
      <node id="4">
        <label>string_view</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceuipc">uipc</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="readable__type__name_8h_1aced1461023b3e879a7a8cbfc8248b2ef" prot="public" static="no">
        <name>READABLE_TYPE_NAME_AS_ALIAS</name>
        <param><defname>type</defname></param>
        <initializer>    template &lt;&gt;                                                                \
    inline std::string readable_type_name&lt;type&gt;() noexcept                     \
    {                                                                          \
        return #type;                                                          \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/uipc/common/readable_type_name.h" line="5" column="13" bodyfile="include/uipc/common/readable_type_name.h" bodystart="5" bodyend="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uipc/common/type_define.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/core/demangle.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READABLE_TYPE_NAME_AS_ALIAS(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>std::string<sp/>readable_type_name&lt;type&gt;()<sp/>noexcept<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>#type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">uipc</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>readable_type_name()<sp/>noexcept</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::core::demangle(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T).name());</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector2);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector3);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector4);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector2i);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector3i);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector4i);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector6);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector9);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Vector12);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Matrix2x2);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Matrix3x3);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Matrix4x4);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Matrix6x6);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Matrix9x9);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(Matrix12x12);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(VectorX);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(VectorXi);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(VectorXi64);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(VectorXu);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">READABLE_TYPE_NAME_AS_ALIAS(VectorXu64);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>uipc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>READABLE_TYPE_NAME_AS_ALIAS</highlight></codeline>
    </programlisting>
    <location file="include/uipc/common/readable_type_name.h"/>
  </compounddef>
</doxygen>
